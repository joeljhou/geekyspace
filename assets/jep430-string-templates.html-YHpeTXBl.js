import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-CARt6Xo2.js";const e={},p=t(`<h1 id="java-21-新特性-string-templates-字符串模版" tabindex="-1"><a class="header-anchor" href="#java-21-新特性-string-templates-字符串模版"><span>Java 21 新特性：String Templates（字符串模版）</span></a></h1><p>Java 21 中引入了<strong>字符串模版</strong>（String Templates），它是一种新的字符串字面量，用于更简洁地构建字符串。</p><h2 id="字符串组合的机制" tabindex="-1"><a class="header-anchor" href="#字符串组合的机制"><span>字符串组合的机制</span></a></h2><p>在之前，Java 提供了几种字符串组合的机制，但不幸的是，它们都存在一些缺点</p><ol><li>使用 <code>+</code> 操作符, 代码难以阅读<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">&quot; plus &quot;</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">&quot; equals &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>使用 <code>StringBuilder</code> 和 <code>StringBuffer</code>，代码冗长<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span>（）
                <span class="token punctuation">.</span>append（x）
                <span class="token punctuation">.</span>append（“plus“）
                <span class="token punctuation">.</span>append（y）
                <span class="token punctuation">.</span>append（“equals“）
                <span class="token punctuation">.</span>append（x <span class="token operator">+</span> y）
                <span class="token punctuation">.</span>println（）<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>使用 <code>String::format</code> 和 <code>String::formatted</code>，容易出现参数数量和类型不匹配的问题<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%2$d plus %1$d equals %3$d&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> t <span class="token operator">=</span> <span class="token string">&quot;%2$d plus %1$d equals %3$d&quot;</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>使用 <code>java.text.MessageFormat</code> 格式化消息，语法复杂对一些人来说可能不太熟悉<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MessageFormat</span> mf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageFormat</span><span class="token punctuation">(</span><span class="token string">&quot;{0} plus {1} equals {2}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> mf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>下面，我们将学习Java 21中的字符串模版，以及它的使用方法。</p><h2 id="模版表达式-插值" tabindex="-1"><a class="header-anchor" href="#模版表达式-插值"><span>模版表达式（插值）</span></a></h2><p>在Java 21中处理字符串的新方法称为：<code>Template Expressions</code>，即：<strong>模版表达式</strong>。</p><ul><li>优点：模版表达式可以执行<strong>字符串插值</strong>，插值不仅比串联更方便，而且在阅读代码时也更清晰</li><li>缺点：但插值是危险的，尤其是对于SQL语句，因为它可能导致注入攻击</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;Joan&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;My name is \\{name}&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span> info<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;My name is Joan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中的第2行就是一个模版表达式，其中主要包含三个部分：</p><ol><li>模板处理器<code>STR</code>;</li><li>一个<code>.</code>字符，类似于方法调用</li><li>包含嵌入表达式（<code>\\{name}</code>）的模版</li></ol><p>运行时，计算模板表达式，模板处理器将模板中的文本与嵌入表达式的值组合在一起，以产生结果。</p><h2 id="str模版处理器" tabindex="-1"><a class="header-anchor" href="#str模版处理器"><span>STR模版处理器</span></a></h2><blockquote><p>STR模板处理器用于将模板中的每个<mark>嵌入表达式</mark>替换成<mark>表达式的（字符串）值</mark>来执行字符串插值</p></blockquote><ul><li>STR是一个<code>public static final</code>字段，它会自动导入到每个Java源文件中</li></ul><p>使用STR模板处理器的模板表达式示例。符号 <code>|</code> 后显示前一条语句的值，类似于<code>jshell</code>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 嵌入式表达式可以是字符串</span>
<span class="token class-name">String</span> firstName <span class="token operator">=</span> <span class="token string">&quot;Bill&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> lastName  <span class="token operator">=</span> <span class="token string">&quot;Duck&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> fullName  <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;\\{firstName} \\{lastName}&quot;</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token string">&quot;Bill Duck&quot;</span>
<span class="token class-name">String</span> sortName  <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;\\{lastName}, \\{firstName}&quot;</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token string">&quot;Duck, Bill&quot;</span>

<span class="token comment">// 嵌入式表达式可以执行算术运算</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;\\{x} + \\{y} = \\{x + y}&quot;</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token string">&quot;10 + 20 = 30&quot;</span>

<span class="token comment">// 嵌入式表达式可以调用方法和访问字段</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;You have a \\{getOfferType()} waiting for you!&quot;</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token string">&quot;You have a gift waiting for you!&quot;</span>
<span class="token class-name">String</span> t <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;Access at \\{req.date} \\{req.time} from \\{req.ipAddress}&quot;</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token string">&quot;Access at 2022-03-25 15:34 from 8.8.8.8&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>为了帮助重构，嵌入式表达式中可以使用双引号字符，而无需将它们转义为<code>&quot;</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">&quot;tmp.dat&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> old <span class="token operator">=</span> <span class="token string">&quot;The file &quot;</span> <span class="token operator">+</span> filePath <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;does&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;does not&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; exist&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;The file \\{filePath} \\{file.exists() ? &quot;</span>does<span class="token string">&quot; : &quot;</span>does not<span class="token string">&quot;} exist&quot;</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token string">&quot;The file tmp.dat does exist&quot;</span> 或 <span class="token string">&quot;The file tmp.dat does not exist&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>为了提高可读性，在源文件中，嵌入式表达式可以跨越多行而不会引入新的换行符</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span>&quot;<span class="token class-name">The</span> time is \\<span class="token punctuation">{</span>
    <span class="token comment">// java.time.format包非常有用</span>
    <span class="token class-name">DateTimeFormatter</span>
      <span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;HH:mm:ss&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> right now&quot;<span class="token punctuation">;</span>
<span class="token comment">// &quot;The time is 12:34:56 right now&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>字符串模板表达式中嵌入表达式的数量没有限制</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 嵌入式表达式可以是后缀递增表达式</span>
<span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;\\{index++}, \\{index++}, \\{index++}, \\{index++}&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;0, 1, 2, 3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>任何Java表达式都可以用作嵌入式表达式，甚至是模板表达式。例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 嵌入式表达式是（嵌套的）模板表达式</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fruit <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;apples&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;oranges&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;peaches&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;\\{fruit[0]}, \\{STR.&quot;</span>\\<span class="token punctuation">{</span>fruit<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> \\<span class="token punctuation">{</span>fruit<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;apples, oranges, peaches&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在这里，模板表达式 <code>STR.&quot;\\{fruit[1]}, \\{fruit[2]}&quot;</code> 嵌入到另一个模板表达式的模板中。 由于存在大量的 <code>&quot;</code> <code>,</code> <code>\\</code> 和 <code>{ }</code> 字符，这段代码很难阅读，因此最好将其格式化为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span>&quot;\\<span class="token punctuation">{</span>fruit<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> \\<span class="token punctuation">{</span>
    <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;\\{fruit[1]}, \\{fruit[2]}&quot;</span>
<span class="token punctuation">}</span>&quot;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="多行模板表达式" tabindex="-1"><a class="header-anchor" href="#多行模板表达式"><span>多行模板表达式</span></a></h2><p>模板表达式的模板可以跨越多行源代码，类似于Java 15中的<a href="/java-features/Java15/jep378-text-blocks">文本块</a>的语法。 开发者可以用它来方便的组织<code>html</code>、<code>json</code>、<code>xml</code>等字符串内容，比如下面这样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 多行模板表达式示例：HTML文档</span>
<span class="token class-name">String</span> title <span class="token operator">=</span> <span class="token string">&quot;My Web Page&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> text  <span class="token operator">=</span> <span class="token string">&quot;Hello, world&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
        &lt;html&gt;
          &lt;head&gt;
            &lt;title&gt;\\{title}&lt;/title&gt;
          &lt;/head&gt;
          &lt;body&gt;
            &lt;p&gt;\\{text}&lt;/p&gt;
          &lt;/body&gt;
        &lt;/html&gt;
        &quot;&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token operator">|</span> 输出结果：
<span class="token operator">|</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
| &lt;html&gt;
|   &lt;head&gt;
|     &lt;title&gt;My Web Page&lt;/title&gt;
|   &lt;/head&gt;
|   &lt;body&gt;
|     &lt;p&gt;Hello, world&lt;/p&gt;
|   &lt;/body&gt;
| &lt;/html&gt;
| &quot;&quot;&quot;</span>

<span class="token comment">// 多行模板表达式示例：JSON文档</span>
<span class="token class-name">String</span> name    <span class="token operator">=</span> <span class="token string">&quot;Joan Smith&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> phone   <span class="token operator">=</span> <span class="token string">&quot;555-123-4567&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> address <span class="token operator">=</span> <span class="token string">&quot;1 Maple Drive, Anytown&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
    {
        &quot;name&quot;:    &quot;\\{name}&quot;,
        &quot;phone&quot;:   &quot;\\{phone}&quot;,
        &quot;address&quot;: &quot;\\{address}&quot;
    }
    &quot;&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token operator">|</span> 输出结果：
<span class="token operator">|</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
| {
|     &quot;name&quot;:    &quot;Joan Smith&quot;,
|     &quot;phone&quot;:   &quot;555-123-4567&quot;,
|     &quot;address&quot;: &quot;1 Maple Drive, Anytown&quot;
| }
| &quot;&quot;&quot;</span>

<span class="token keyword">record</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> width<span class="token punctuation">,</span> <span class="token keyword">double</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Rectangle</span><span class="token punctuation">[</span><span class="token punctuation">]</span> zone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token string">&quot;Alfa&quot;</span><span class="token punctuation">,</span> <span class="token number">17.8</span><span class="token punctuation">,</span> <span class="token number">31.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token string">&quot;Bravo&quot;</span><span class="token punctuation">,</span> <span class="token number">9.6</span><span class="token punctuation">,</span> <span class="token number">12.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">,</span> <span class="token number">7.1</span><span class="token punctuation">,</span> <span class="token number">11.23</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 多行模板表达式示例：表格</span>
<span class="token class-name">String</span> table <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
    Description  Width  Height  Area
    \\{zone[0].name}  \\{zone[0].width}  \\{zone[0].height}     \\{zone[0].area()}
    \\{zone[1].name}  \\{zone[1].width}  \\{zone[1].height}     \\{zone[1].area()}
    \\{zone[2].name}  \\{zone[2].width}  \\{zone[2].height}     \\{zone[2].area()}
    Total \\{zone[0].area() + zone[1].area() + zone[2].area()}
    &quot;&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token operator">|</span> 输出结果：
<span class="token operator">|</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
| Description  Width  Height  Area
| Alfa  17.8  31.4     558.92
| Bravo  9.6  12.4     119.03999999999999
| Charlie  7.1  11.23     79.733
| Total 757.693
| &quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fmt模板处理器" tabindex="-1"><a class="header-anchor" href="#fmt模板处理器"><span>FMT模板处理器</span></a></h2><p>除了STR模版处理器之外，Java中还提供了另外一个模版处理器：FMT。 FMT与STR相似之处在于它执行插值，但还提供了<mark>格式化处理</mark>能力。</p><ul><li>格式说明符与<code>java.util.Formatter</code>中定义的格式说明符相同</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> width<span class="token punctuation">,</span> <span class="token keyword">double</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Rectangle</span><span class="token punctuation">[</span><span class="token punctuation">]</span> zone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token string">&quot;Alfa&quot;</span><span class="token punctuation">,</span> <span class="token number">17.8</span><span class="token punctuation">,</span> <span class="token number">31.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token string">&quot;Bravo&quot;</span><span class="token punctuation">,</span> <span class="token number">9.6</span><span class="token punctuation">,</span> <span class="token number">12.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">,</span> <span class="token number">7.1</span><span class="token punctuation">,</span> <span class="token number">11.23</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 多行模板表达式示例：表格</span>
<span class="token class-name">String</span> table <span class="token operator">=</span> <span class="token constant">FMT</span><span class="token punctuation">.</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
    Description     Width    Height     Area
    %-12s\\{zone[0].name}  %7.2f\\{zone[0].width}  %7.2f\\{zone[0].height}     %7.2f\\{zone[0].area()}
    %-12s\\{zone[1].name}  %7.2f\\{zone[1].width}  %7.2f\\{zone[1].height}     %7.2f\\{zone[1].area()}
    %-12s\\{zone[2].name}  %7.2f\\{zone[2].width}  %7.2f\\{zone[2].height}     %7.2f\\{zone[2].area()}
    \\{&quot; &quot;.repeat(28)} Total %7.2f\\{zone[0].area() + zone[1].area() + zone[2].area()}
    &quot;&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token operator">|</span> 输出结果：
<span class="token operator">|</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
| Description     Width    Height     Area
| Alfa            17.80    31.40      558.92
| Bravo            9.60    12.40      119.04
| Charlie          7.10    11.23       79.73
|                              Total  757.69
| &quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[p];function l(c,i){return s(),a("div",null,o)}const d=n(e,[["render",l],["__file","jep430-string-templates.html.vue"]]),k=JSON.parse('{"path":"/md/java/features/Java21/jep430-string-templates.html","title":"Java 21 新特性：字符串模版(Preview)","lang":"zh-CN","frontmatter":{"title":"Java 21 新特性：字符串模版(Preview)","shortTitle":null,"description":"Java 21 新特性：String Templates（字符串模版） Java 21 中引入了字符串模版（String Templates），它是一种新的字符串字面量，用于更简洁地构建字符串。 字符串组合的机制 在之前，Java 提供了几种字符串组合的机制，但不幸的是，它们都存在一些缺点 使用 + 操作符, 代码难以阅读 使用 StringBuild...","icon":null,"cover":null,"author":"流浪码客","isOriginal":true,"sticky":false,"star":false,"date":"2024-01-06T00:00:00.000Z","category":"Java Features","tag":["java"],"order":430,"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/java/features/Java21/jep430-string-templates.html"}],["meta",{"property":"og:title","content":"Java 21 新特性：字符串模版(Preview)"}],["meta",{"property":"og:description","content":"Java 21 新特性：String Templates（字符串模版） Java 21 中引入了字符串模版（String Templates），它是一种新的字符串字面量，用于更简洁地构建字符串。 字符串组合的机制 在之前，Java 提供了几种字符串组合的机制，但不幸的是，它们都存在一些缺点 使用 + 操作符, 代码难以阅读 使用 StringBuild..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-16T11:19:57.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-01-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-16T11:19:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 21 新特性：字符串模版(Preview)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-16T11:19:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"字符串组合的机制","slug":"字符串组合的机制","link":"#字符串组合的机制","children":[]},{"level":2,"title":"模版表达式（插值）","slug":"模版表达式-插值","link":"#模版表达式-插值","children":[]},{"level":2,"title":"STR模版处理器","slug":"str模版处理器","link":"#str模版处理器","children":[]},{"level":2,"title":"多行模板表达式","slug":"多行模板表达式","link":"#多行模板表达式","children":[]},{"level":2,"title":"FMT模板处理器","slug":"fmt模板处理器","link":"#fmt模板处理器","children":[]}],"git":{"createdTime":1758021597000,"updatedTime":1758021597000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":1}]},"readingTime":{"minutes":5.2,"words":1559},"filePathRelative":"md/java/features/Java21/jep430-string-templates.md","localizedDate":"2024年1月6日","excerpt":"\\n<p>Java 21 中引入了<strong>字符串模版</strong>（String Templates），它是一种新的字符串字面量，用于更简洁地构建字符串。</p>\\n<h2>字符串组合的机制</h2>\\n<p>在之前，Java 提供了几种字符串组合的机制，但不幸的是，它们都存在一些缺点</p>\\n<ol>\\n<li>使用 <code>+</code> 操作符, 代码难以阅读<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">String</span> s <span class=\\"token operator\\">=</span> x <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\" plus \\"</span> <span class=\\"token operator\\">+</span> y <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\" equals \\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">+</span> y<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n<li>使用 <code>StringBuilder</code> 和 <code>StringBuffer</code>，代码冗长<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">String</span> s <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">StringBuilder</span>（）\\n                <span class=\\"token punctuation\\">.</span>append（x）\\n                <span class=\\"token punctuation\\">.</span>append（“plus“）\\n                <span class=\\"token punctuation\\">.</span>append（y）\\n                <span class=\\"token punctuation\\">.</span>append（“equals“）\\n                <span class=\\"token punctuation\\">.</span>append（x <span class=\\"token operator\\">+</span> y）\\n                <span class=\\"token punctuation\\">.</span>println（）<span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n<li>使用 <code>String::format</code> 和 <code>String::formatted</code>，容易出现参数数量和类型不匹配的问题<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">String</span> s <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">format</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%2$d plus %1$d equals %3$d\\"</span><span class=\\"token punctuation\\">,</span> x<span class=\\"token punctuation\\">,</span> y<span class=\\"token punctuation\\">,</span> x <span class=\\"token operator\\">+</span> y<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> t <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"%2$d plus %1$d equals %3$d\\"</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">formatted</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">,</span> y<span class=\\"token punctuation\\">,</span> x <span class=\\"token operator\\">+</span> y<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n<li>使用 <code>java.text.MessageFormat</code> 格式化消息，语法复杂对一些人来说可能不太熟悉<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">MessageFormat</span> mf <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MessageFormat</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"{0} plus {1} equals {2}\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> s <span class=\\"token operator\\">=</span> mf<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">format</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">,</span> y<span class=\\"token punctuation\\">,</span> x <span class=\\"token operator\\">+</span> y<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n</ol>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{d as comp,k as data};
