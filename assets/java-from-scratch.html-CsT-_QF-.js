import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as s,b as n,d as l,e as a}from"./app-CARt6Xo2.js";const i={},u=a('<h1 id="java基础-从零开始学习java" tabindex="-1"><a class="header-anchor" href="#java基础-从零开始学习java"><span>Java基础 - 从零开始学习Java</span></a></h1><h2 id="_1-java语言的发展历史" tabindex="-1"><a class="header-anchor" href="#_1-java语言的发展历史"><span>1.Java语言的发展历史</span></a></h2><h3 id="java特征" tabindex="-1"><a class="header-anchor" href="#java特征"><span>Java特征</span></a></h3><p>Java语言是美国Sun公司（Stanford University Network），在1995年推出的高级的编程语言。 <strong>特征：</strong></p><ul><li>面向对象（OOP）</li><li>跨平台性强（“一次编写，到处运行”）</li><li>安全性高、可移植性强</li></ul><h3 id="java之父" tabindex="-1"><a class="header-anchor" href="#java之父"><span>Java之父</span></a></h3><p><img src="http://img.geekyspace.cn/pictures/2025/202509092327337.png" alt="Java之父" loading="lazy"> 詹姆斯·高斯林 （James Gosling）是一名软件专家，1955年5月19日出生于加拿大，Java编程语言的共同创始人之一，一般公认他为“Java之父”。 1977年获得了加拿大卡尔加里大学计算机科学学士学位，1983年获得了美国卡内基梅隆大学计算机科学博士学位。</p><h3 id="发展历史" tabindex="-1"><a class="header-anchor" href="#发展历史"><span>发展历史</span></a></h3><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092328789.png" alt="Java语言发展史" tabindex="0" loading="lazy"><figcaption>Java语言发展史</figcaption></figure><ul><li>2004年推出了Java 1.5版本</li><li>2009年Sun公司被Oracle甲骨文公司收购</li><li>2014年推出了Java 8.0版本</li></ul><h3 id="计算机语言发展历史" tabindex="-1"><a class="header-anchor" href="#计算机语言发展历史"><span>计算机语言发展历史</span></a></h3><ol><li>第一代<strong>机器语言</strong> 打孔机 二进制010101</li><li>第二代<strong>汇编语言</strong> 助记符</li><li>第三代<strong>高级编程语言</strong> C、C++、Java、Python 、php、c#等 <img src="http://img.geekyspace.cn/pictures/2025/202509092328775.png" alt="机器&gt;汇编&gt;高级语言发展" loading="lazy"></li></ol><h3 id="java跨平台原理" tabindex="-1"><a class="header-anchor" href="#java跨平台原理"><span>Java跨平台原理</span></a></h3><ul><li><strong>平台</strong> = 操作系统（<code>Windows</code>，<code>Linux</code>，<code>Mac</code>）</li><li>Java的程序可以在任意的操作系统上运行 <img src="http://img.geekyspace.cn/pictures/2025/202509092329828.png" alt="Java跨平台的原理" loading="lazy"></li></ul><h2 id="_2-下载安装使用jdk" tabindex="-1"><a class="header-anchor" href="#_2-下载安装使用jdk"><span>2.下载安装使用JDK</span></a></h2><h3 id="下载jdk11" tabindex="-1"><a class="header-anchor" href="#下载jdk11"><span>下载JDK11</span></a></h3>',16),r={href:"https://www.oracle.com/java/technologies/javase-jdk11-downloads.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<figure><img src="http://img.geekyspace.cn/pictures/2025/202509092330631.png" alt="jdk-11安装包" tabindex="0" loading="lazy"><figcaption>jdk-11安装包</figcaption></figure><h3 id="安装后目录介绍" tabindex="-1"><a class="header-anchor" href="#安装后目录介绍"><span>安装后目录介绍</span></a></h3><p>傻瓜式安装，下一步</p><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092330060.png" alt="JDK常见目录" tabindex="0" loading="lazy"><figcaption>JDK常见目录</figcaption></figure><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092331631.png" alt="JDK常见目录" tabindex="0" loading="lazy"><figcaption>JDK常见目录</figcaption></figure><h3 id="配置jdk环境变量" tabindex="-1"><a class="header-anchor" href="#配置jdk环境变量"><span>配置JDK环境变量</span></a></h3><p><strong>1. 为什么需要配置JDK环境变量？</strong></p><p>不配置JDK环境变量的话，就需要每次到JDK安装路径下的Bin目录执行对应的exe文件； 在环境变量中加入软件的安装路径后，即使没有在该软件的安装目录下，我们在命令行输入软件的名称也可启动该软件。</p><p><strong>2.如何配置环境变量</strong></p><p>右键“此电脑”&gt;&gt;“属性”，在弹出的页面上点击高“高级系统设置”</p><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092332594.png" alt="环境变量-高级系统设置" tabindex="0" loading="lazy"><figcaption>环境变量-高级系统设置</figcaption></figure><p>在弹出的“系统属性”窗口中“高级”标签下点击“环境变量”按钮</p><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092332253.png" alt="环境变量" tabindex="0" loading="lazy"><figcaption>环境变量</figcaption></figure><p>在弹出的“环境变量”窗口中，点击下方的“新建”按钮，在弹出的“新建系统变量”窗口中，新建一个名为<code>JAVA_HOME</code>的环境变量，设置<code>Path</code>环境变量</p><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092333174.png" alt="设置Path环境变量" tabindex="0" loading="lazy"><figcaption>设置Path环境变量</figcaption></figure><p>验证是否配置成功，进入win+r输入cmd，输入指令<code>java -version</code></p><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092333155.png" alt="java -version指令验证" tabindex="0" loading="lazy"><figcaption>java -version指令验证</figcaption></figure><p>JDK8之后的版本只需要配置<code>JAVA_HOME</code>，在PATH中添加<code>JAVA_HOME/bin</code>即可。</p><h3 id="jre-jdk-jvm之间的关系" tabindex="-1"><a class="header-anchor" href="#jre-jdk-jvm之间的关系"><span>JRE，JDK，JVM之间的关系</span></a></h3><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092330293.png" alt="JDK，JRE，JVM之间的关系" tabindex="0" loading="lazy"><figcaption>JDK，JRE，JVM之间的关系</figcaption></figure><h3 id="javase-javaee-javame之间的区别" tabindex="-1"><a class="header-anchor" href="#javase-javaee-javame之间的区别"><span>JavaSE，JavaEE，JavaME之间的区别</span></a></h3><p>Java总共有三个版本</p><ol><li><strong>标准版Java SE</strong><ul><li>Java SE 以前称为 J2SE。它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类；</li></ul></li><li><strong>企业版Java EE</strong><ul><li>JavaEE是在JavaSE的基础上构建的，用来开发B/S架构软件，也就是开发企业级应用，所以称为企业版帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。Java EE 是在 Java SE 的基础上构建的，它提供 Web 服务、组件模型、管理和通信 API；</li></ul></li><li><strong>微型Java ME</strong><ul><li>Java ME为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME包括灵活的用户界面、健壮的安全模式、许多内置的网络协议以及对于动态下载的连网和离线应用程序的丰富支持。基于Java ME规范的应用程序只需要编写一次，就可以用于许多设备，而且可以利用每个设备的本级功能。</li></ul></li></ol><p><strong>简而言之</strong></p><ul><li>JavaSE是Java的基础，主要针对桌面程序开发；</li><li>JavaEE是针对企业级应用开发；</li><li>JavaME是主要针对嵌入式设备软件开发。</li></ul><h3 id="dos常用命令" tabindex="-1"><a class="header-anchor" href="#dos常用命令"><span>Dos常用命令</span></a></h3><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092331468.png" alt="Dos常用命令" tabindex="0" loading="lazy"><figcaption>Dos常用命令</figcaption></figure><h3 id="编译运行java程序" tabindex="-1"><a class="header-anchor" href="#编译运行java程序"><span>编译运行Java程序</span></a></h3><p>开发java程序，需要三个步骤：<strong>1.编写程序（源代码）&gt;&gt; 2.编译程序 &gt;&gt; 3.运行程序</strong></p><ol><li>新建文本文件，修改名称为<code>HelloWorld.java</code></li><li>用记事本打开，编写以下程序</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>打开命令提示窗口，进入<code>HelloWorld</code>所在目录，输入编译和执行命令</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 编译，生成 .class 字节码文件</span>
javac <span class="token parameter variable">-encoding</span> UTF-8 HelloWorld.java
<span class="token comment"># 运行程序（执行字节码）</span>
<span class="token function">java</span> HelloWorld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092334223.png" alt="Java程序编译运行流程" tabindex="0" loading="lazy"><figcaption>Java程序编译运行流程</figcaption></figure><h2 id="_3-java基础语法" tabindex="-1"><a class="header-anchor" href="#_3-java基础语法"><span>3.Java基础语法</span></a></h2><h3 id="java注释" tabindex="-1"><a class="header-anchor" href="#java注释"><span>Java注释</span></a></h3><p>注释是指在程序指定的位置添加的说明信息，不参与运行。<strong>Java 支持三种注释方式：</strong></p><ol><li>单行：<code>// 注释内容</code></li><li>多行：<code>/* 注释内容 */</code></li><li>文档注释：<code>/** 注释内容 */</code><img src="http://img.geekyspace.cn/pictures/2025/202509092335176.png" alt="Java注释的使用" loading="lazy"></li></ol><h3 id="什么是关键字" tabindex="-1"><a class="header-anchor" href="#什么是关键字"><span>什么是关键字</span></a></h3><p><strong>Java关键字</strong>是电脑语言里事先定义的，<strong>有特别意义的标识符</strong>，有时又叫保留字。 一律用<strong>小写字母标志</strong>，根据用途分为如下分组：</p><ol><li><strong>数据类型</strong>：<code>boolean</code>、<code>byte</code>、<code>char</code>、 <code>double</code>、 <code>false</code>、<code>float</code>、<code>int</code>、<code>long</code>、<code>new</code>、<code>short</code>、<code>true</code>、<code>void</code>、<code>instanceof</code>。</li><li><strong>语句控制</strong>： <code>break</code>、<code>case</code>、 <code>catch</code>、 <code>continue</code>、 <code>default</code> 、<code>do</code>、 <code>else</code>、 <code>for</code>、 <code>if</code>、<code>return</code>、<code>switch</code>、<code>try</code>、 <code>while</code>、 <code>finally</code>、 <code>throw</code>、<code>this</code>、 <code>super</code>。</li><li><strong>修饰符</strong>： <code>abstract</code>、<code>final</code>、<code>native</code>、<code>private</code>、 <code>protected</code>、<code>public</code>、<code>static</code>、<code>synchronized</code>、<code>transient</code>、 <code>volatile</code>。</li><li><strong>用于类，方法，包，接口和异常</strong>：<code>class</code>、 <code>extends</code>、 <code>implements</code>、<code>interface</code>、 <code>package</code>、<code>import</code>、<code>throws</code>。</li></ol><h3 id="常量与变量" tabindex="-1"><a class="header-anchor" href="#常量与变量"><span>常量与变量</span></a></h3><ul><li><strong>常量</strong>：Java中使用<code>final</code> 修饰，表示运行中不可变化的量。</li><li><strong>变量</strong>：在程序运行过程中，可以取不同数值的量；可变，需先声明后使用。 <ul><li>语法：变量的数据类型 变量名称 = 变量的值（赋值操作）；</li><li>为整数常量，浮点数常量，字符常量，字符串常量，布尔常量（true，false），NULL是常量</li></ul></li><li>命名规则：字母、数字、下划线 <code>_</code>、$ 符号开头，不能以数字开头，遵循驼峰命名法</li></ul><h3 id="java变量命名规则" tabindex="-1"><a class="header-anchor" href="#java变量命名规则"><span>Java变量命名规则</span></a></h3><ol><li>不能使用Java中的关键字，比如public class void int char等等..</li><li>变量名必须以 字母 下划线_ 或者 $ 符号开头</li><li>变量名可以包含数字，但是不能够以数字开头</li><li>变量名除了 下划线_ 或者 $ 符号以外不能包含其他任何特殊字符</li></ol><p><strong>驼峰命名法</strong></p><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092335719.png" alt="驼峰命名法" tabindex="0" loading="lazy"><figcaption>驼峰命名法</figcaption></figure><h3 id="存储单位与数据类型" tabindex="-1"><a class="header-anchor" href="#存储单位与数据类型"><span>存储单位与数据类型</span></a></h3><p><strong>常见存储单位换算</strong></p><p>数据必须首先在计算机内被表示，然后才能被计算机处理。计算机表示数据的部件主要是存储设备；而存储数据的具体单位是<strong>存储单元</strong>；因此，了解存储单元的结构是十分必要的。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">1</span> Byte（字节<span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">8</span> bit（位）
<span class="token number">1</span> KB <span class="token operator">=</span> <span class="token number">1024</span> Byte
<span class="token number">1</span> MB <span class="token operator">=</span> <span class="token number">1024</span> KB
<span class="token number">1</span> GB <span class="token operator">=</span> <span class="token number">1024</span> MB
<span class="token number">1</span> TB <span class="token operator">=</span> <span class="token number">1024</span> GB
<span class="token number">1</span> PB <span class="token operator">=</span> <span class="token number">1024</span> TB
<span class="token number">1</span> EB <span class="token operator">=</span> <span class="token number">1024</span> PB
<span class="token number">1</span> ZB <span class="token operator">=</span> <span class="token number">1024</span> EB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>计算机中存储设备的最小单元叫”位（bit）”，又称为“比特位”，用小写字母b表示。</li><li>计算机中最小存储单元叫”字节（byte）”，用大写字母B表示，字节由8个位组成。</li></ul><p><strong>Java中的数据类型</strong></p><p>Java语言是强类型语言，对于每一个数据都给出明确的数据类型，不同的数据类型也分配了不同的内存空间，所以它们表示的数据大小也是不一样的。 <img src="http://img.geekyspace.cn/pictures/2025/202509092337025.png" alt="Java数据类型" loading="lazy"></p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>类型</strong></th><th><strong>内存占用</strong></th><th><strong>取值范围</strong></th></tr></thead><tbody><tr><td><strong>整数</strong></td><td><strong>byte</strong></td><td>1字节</td><td>－128～127</td></tr><tr><td></td><td><strong>short</strong></td><td>2字节</td><td>-32768-32767</td></tr><tr><td></td><td><strong>int（默认）</strong></td><td>4字节</td><td>-2的31次方到2的31次方-1</td></tr><tr><td></td><td><strong>long</strong></td><td>8字节</td><td>-2的63次方到2的63次方-1</td></tr><tr><td><strong>浮点数</strong></td><td><strong>float</strong></td><td>4字节</td><td>负数：-3.402823E+38到-1.401298E-45<br>正数：-1.401298E-45到3.402823E+38</td></tr><tr><td></td><td><strong>double（默认）</strong></td><td>8字节</td><td>负数：-1.797693E+308到-4.9000000E-324<br>正数：4.9000000E到1.797693E+308</td></tr><tr><td><strong>字符</strong></td><td><strong>char</strong></td><td>2字节</td><td>0-65535</td></tr><tr><td><strong>布尔</strong></td><td><strong>boolean</strong></td><td>1字节</td><td>true，false</td></tr></tbody></table><p>说明：E+38表示是乘以10的38次方，同样，E-45表示乘以10的-45次方。</p><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h3><p>在 java 程序中，不同的基本类型的值经常需要进行相互类型转换，类型转换分为<strong>自动类型转换</strong>和<strong>强制类型转换</strong>。</p><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092337491.png" alt="Java数据类型的数据范围从小到大" tabindex="0" loading="lazy"><figcaption>Java数据类型的数据范围从小到大</figcaption></figure><p><strong>自动类型转换</strong>： <u>把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量。</u></p><ul><li>例如：<code>double a = 10；</code></li><li><strong>规律</strong><ul><li>小的类型自动转化为大的类型</li><li>整数类型可以自动转化为浮点类型，可能会产生舍入误差</li><li>字符可以自动提升为整数</li></ul></li></ul><p><strong>强制类型转换</strong>：<u>把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量。</u></p><ul><li>例如：<code>int j = (int) 99.99;</code></li><li>在要强制类型转换的前面加上括号，然后在括号里面加上你要转换的类型（强制转换需要程序员手动处理）</li></ul><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h3><ul><li><strong>运算符</strong>：对常量或者变量进行操作的符号</li><li><strong>表达式</strong>：用运算符吧常量或者变量连接起来的符号</li></ul><h4 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h4><table><thead><tr><th><strong>操作符</strong></th><th><strong>说明</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td><strong>+</strong></td><td><strong>加</strong></td><td><strong>加法</strong></td></tr><tr><td><strong>-</strong></td><td><strong>减</strong></td><td><strong>减法</strong></td></tr><tr><td><strong>*</strong></td><td><strong>乘</strong></td><td><strong>乘法</strong></td></tr><tr><td><strong>/</strong></td><td><strong>除</strong></td><td><strong>除法</strong></td></tr><tr><td><strong>%</strong></td><td><strong>取余</strong></td><td><strong>得到两个数做除法的余数</strong></td></tr><tr><td><strong>++</strong></td><td><strong>自增</strong></td><td><strong>变量的值+1</strong></td></tr><tr><td><strong>--</strong></td><td><strong>自减</strong></td><td><strong>变量的值-1</strong></td></tr></tbody></table><p><strong>搞清楚<code>i++</code>，<code>++i</code>，<code>i--</code>，<code>--i</code>的区别?</strong></p><ul><li><code>++i</code>，表示参与运算之前先自加1.</li><li><code>i++</code>，表示参与运算以后再加1.</li><li><code>--i</code>，<code>i--</code> 类似。</li></ul><h4 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h4><table><thead><tr><th><strong>操作符</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>==</strong></td><td><strong>检查如果两个操作数的值是否相等，如果相等则条件为真。</strong></td></tr><tr><td><strong>!=</strong></td><td><strong>检查如果两个操作数的值是否相等，如果值不相等则条件为真。</strong></td></tr><tr><td><strong>&gt;</strong></td><td><strong>检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</strong></td></tr><tr><td><strong>&lt;</strong></td><td><strong>检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</strong></td></tr><tr><td><strong>&gt;=</strong></td><td><strong>检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</strong></td></tr><tr><td><strong>&lt;=</strong></td><td><strong>检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</strong></td></tr></tbody></table><ul><li>注意事项：关系运算符的结果都是boolean类型，要么是true，要么是false。</li><li>千万不要把“<mark>”误写成“=”，“</mark>”是判断是否相等的关系，“=”是赋值。</li></ul><h4 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h4><table><thead><tr><th><strong>操作符</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>＆</strong></td><td>如果相对应位都是1，则结果为1，否则为0</td></tr><tr><td>|</td><td>如果相对应位都是 0，则结果为 0，否则为 1</td></tr><tr><td><strong>〜</strong></td><td>按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td></tr><tr><td><strong>^</strong></td><td>如果相对应位值相同，则结果为0，否则为1</td></tr><tr><td><strong>&lt;&lt;</strong></td><td>按位左移运算符。左操作数按位左移右操作数指定的位数。左移一位相当于将原数*2</td></tr><tr><td><strong>&gt;&gt;</strong></td><td>按位右移运算符。左操作数按位右移右操作数指定的位数。右移一位相当于将原数/2</td></tr></tbody></table><h4 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h4><p>逻辑运算符把各个运算的关系表达式联系起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断结果是<code>true</code>或<code>false</code>。</p><table><thead><tr><th><strong>操作符</strong></th><th><strong>说明</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td><strong>＆&amp;</strong></td><td>逻辑与 运算符。</td><td>当且仅当两个操作数都为真，条件才为真。</td></tr><tr><td>||</td><td>逻辑或 操作符。</td><td>如果任何两个操作数任何一个为真，条件为真。</td></tr><tr><td><strong>^</strong></td><td>逻辑异或 操作符。</td><td>如果任意两个操作数结构不相同，条件为真，否则条件假</td></tr><tr><td><strong>!</strong></td><td>逻辑非 运算符。</td><td>用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td></tr></tbody></table><h4 id="短路运算符" tabindex="-1"><a class="header-anchor" href="#短路运算符"><span>短路运算符</span></a></h4><table><thead><tr><th><strong>操作符</strong></th><th><strong>说明</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td><strong>＆&amp;</strong></td><td>短路与</td><td>作用和 &amp; 相同，但是有短路效果</td></tr><tr><td>||</td><td>短路或</td><td>作用和 | 相同，但是有短路效果</td></tr></tbody></table><ul><li>短路与 &amp;&amp;：如果左边为真，右边执行；如果左边为假，右边不执行。</li><li>短路或 ||：如果左边为假，右边执行；如果左边为真，右边不执行。</li></ul><h4 id="三元运算符" tabindex="-1"><a class="header-anchor" href="#三元运算符"><span>三元运算符 ( ? : )</span></a></h4><ul><li><strong>语法是：“条件表达式 ? 表达式1 : 表达式2”；</strong><ul><li><code>?</code>前面的位置是判断的条件，判断结果为<code>boolean</code>型</li><li>为<code>true</code>时调用<strong>表达式1</strong>，为<code>false</code>时调用<strong>表达式2</strong></li></ul></li></ul><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092339610.png" alt="三元运算符" tabindex="0" loading="lazy"><figcaption>三元运算符</figcaption></figure><h3 id="scanner打印机用法" tabindex="-1"><a class="header-anchor" href="#scanner打印机用法"><span>Scanner打印机用法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>  <span class="token comment">// ① 导包</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ② 创建对象</span>
        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ③ 接收数据</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的名字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 接收字符串</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> age <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 接收整数</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的身高(米)：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> height <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 接收小数</span>

        <span class="token comment">// 输出结果</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;------ 信息展示 ------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;姓名：&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;年龄：&quot;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;身高：&quot;</span> <span class="token operator">+</span> height <span class="token operator">+</span> <span class="token string">&quot; 米&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 关闭Scanner（养成好习惯）</span>
        scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="流程控制语句" tabindex="-1"><a class="header-anchor" href="#流程控制语句"><span>流程控制语句</span></a></h3><h4 id="顺序结构" tabindex="-1"><a class="header-anchor" href="#顺序结构"><span>顺序结构</span></a></h4><p>是程序中最简单的流程控制，按照代码执行的先后顺序，依次执行，程序中的大多数代码都是这样执行的。</p><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092339308.png" alt="顺序结构" tabindex="0" loading="lazy"><figcaption>顺序结构</figcaption></figure><h4 id="分支结构-if-switch" tabindex="-1"><a class="header-anchor" href="#分支结构-if-switch"><span>分支结构（if，switch）</span></a></h4><p>选择结构也被称为分支结构。选择结构有特定的语法规则，代码要执行具体的逻辑运算进行判断，逻辑运算的结果有两个，所以产生选择，按照不同的选择执行不同的代码。</p><h5 id="if语句" tabindex="-1"><a class="header-anchor" href="#if语句"><span>if语句</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 语法</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
    语句体
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092339003.png" alt="if语句" tabindex="0" loading="lazy"><figcaption>if语句</figcaption></figure><h5 id="if-else语句" tabindex="-1"><a class="header-anchor" href="#if-else语句"><span>if-else语句</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 语法</span>
<span class="token function">f</span><span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    语句体<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    语句体<span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092340316.png" alt="if-else语句" tabindex="0" loading="lazy"><figcaption>if-else语句</figcaption></figure><h5 id="多重if-else语句" tabindex="-1"><a class="header-anchor" href="#多重if-else语句"><span>多重if-else语句</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 语法</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>判断条件<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    执行语句<span class="token number">1</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>判断条件<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    执行语句<span class="token number">2</span>
<span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>判断条件n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    执行语句n
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    执行语句n<span class="token operator">+</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092340867.png" alt="多重if-else语句" tabindex="0" loading="lazy"><figcaption>多重if-else语句</figcaption></figure><h5 id="switch语句" tabindex="-1"><a class="header-anchor" href="#switch语句"><span>switch语句</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 语法</span>
<span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span>目标值<span class="token number">1</span><span class="token operator">:</span>
	   语句体<span class="token number">1</span><span class="token punctuation">;</span>
	   <span class="token keyword">break</span><span class="token punctuation">;</span>
   <span class="token keyword">case</span>目标值<span class="token number">2</span><span class="token operator">:</span>
	   语句体<span class="token number">2</span><span class="token punctuation">;</span>
	   <span class="token keyword">break</span><span class="token punctuation">;</span>
   …
   <span class="token keyword">default</span><span class="token operator">:</span>
	   语句体n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	   <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092340042.png" alt="switch语句" tabindex="0" loading="lazy"><figcaption>switch语句</figcaption></figure><h4 id="循环结构-for-while-do-while" tabindex="-1"><a class="header-anchor" href="#循环结构-for-while-do-while"><span>循环结构（for，while，do..while）</span></a></h4><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形成死循环。</p><h5 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环"><span>for循环</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 语法</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式<span class="token punctuation">;</span>布尔表达式<span class="token punctuation">;</span>步进表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
	循环体
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092341599.png" alt="for循环" tabindex="0" loading="lazy"><figcaption>for循环</figcaption></figure><h5 id="while循环" tabindex="-1"><a class="header-anchor" href="#while循环"><span><strong>while循环</strong></span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 语法</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	循环体语句<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 扩展格式</span>
初始化表达式①
<span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式②<span class="token punctuation">)</span><span class="token punctuation">{</span>
	循环体③
	步进表达式④
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092341956.png" alt="while循环" tabindex="0" loading="lazy"><figcaption>while循环</figcaption></figure><h5 id="do-while循环" tabindex="-1"><a class="header-anchor" href="#do-while循环"><span><strong>do while循环</strong></span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 语法</span>
<span class="token keyword">do</span><span class="token punctuation">{</span>
	循环体语句<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 扩展格式</span>
初始化表达式①
<span class="token keyword">do</span><span class="token punctuation">{</span>
	循环体③
    步进表达式④
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式②<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092341691.png" alt="do while循环" tabindex="0" loading="lazy"><figcaption>do while循环</figcaption></figure><h5 id="三种不同循环的区别" tabindex="-1"><a class="header-anchor" href="#三种不同循环的区别"><span>三种不同循环的区别</span></a></h5><ul><li><code>do…while</code>循环至少会执行一次循环体。</li><li><code>for</code>循环和<code>while</code>循环只有在条件成立的时候才会去执行循环体</li><li><code>for</code>循环语句和while循环语句的小区别： <strong>使用区别：</strong> 控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，而while循环结束还可以继续使用，如果你想继续使用，就用while，否则推荐使用for。原因是for循环结束，该变量就从内存中消失，能够提高内存的使用效率。</li></ul><h4 id="break和contiune区别" tabindex="-1"><a class="header-anchor" href="#break和contiune区别"><span>break和contiune区别</span></a></h4><ul><li><code>break</code>直接中断当前的整个循环，<code>continue</code>跳出本次的循环进入下一次。</li><li><code>continue</code>只能在循环中进行使用。</li></ul><h4 id="嵌套for循环语句" tabindex="-1"><a class="header-anchor" href="#嵌套for循环语句"><span>嵌套for循环语句</span></a></h4><p>可以通过带<strong>标记</strong>的<code>break</code>和<code>continue</code>结束或跳出多重循环。</p><figure><img src="http://img.geekyspace.cn/pictures/2025/202509092342106.png" alt="带标签的 break tag" tabindex="0" loading="lazy"><figcaption>带标签的 break tag</figcaption></figure><h2 id="_4-java-方法" tabindex="-1"><a class="header-anchor" href="#_4-java-方法"><span>4.Java 方法</span></a></h2><h3 id="什么是方法" tabindex="-1"><a class="header-anchor" href="#什么是方法"><span>什么是方法？</span></a></h3><p>方法的本意是<strong>功能块</strong>，就是实现某个功能的语句块的集合。</p><h3 id="方法的定义与调用" tabindex="-1"><a class="header-anchor" href="#方法的定义与调用"><span>方法的定义与调用</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 语法</span>
修饰符 返回类型 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方法体：具体执行的代码</span>
    <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span> <span class="token comment">// 如果有返回类型，必须返回相应类型的值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各部分解释：</p><ol><li>修饰符（modifier）：如 <code>public</code>, <code>private</code>, <code>static</code>，控制方法的访问范围和行为</li><li>返回类型（return type）：方法执行后返回的数据类型，如果不返回值则写 <code>void</code></li><li>方法名（method name）：方法的名字，命名规则和变量名类似</li><li>参数列表（parameters）：方法执行所需的外部数据，可以没有参数</li><li>方法体（body）：实际执行的操作</li><li>返回值（return）：方法执行后返回的结果，如果返回类型是 <code>void</code>，则无需 <code>return</code><strong>方法的调用</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodInvoke</span> <span class="token punctuation">{</span>
	<span class="token comment">// 静态方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是静态方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 无参数、无返回值</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Java!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 有参数</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 有返回值</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用静态方法</span>
        <span class="token class-name">MethodInvoke</span><span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建对象，调用非静态方法</span>
        <span class="token class-name">MethodInvoke</span> invoke <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodInvoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        invoke<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 输出问候</span>
        invoke<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 输出个性化问候</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>invoke<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 12</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法的重载" tabindex="-1"><a class="header-anchor" href="#方法的重载"><span>方法的重载</span></a></h3><p><strong>定义：</strong> 重载就是在一个类中，有相同的函数名称，但形参不同的函数。</p><ul><li>返回类型可以相同，也可以不同</li><li><strong>仅靠返回类型不同不能构成重载</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverloadDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;无参数方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一个参数：&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;两个参数：&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">OverloadDemo</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OverloadDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        demo<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 调用无参数方法</span>
        demo<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 调用一个参数方法</span>
        demo<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 调用两个参数方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

输出：
无参数方法
一个参数：<span class="token class-name">Alice</span>
两个参数：<span class="token class-name">Bob</span><span class="token punctuation">,</span> <span class="token number">25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命令行传参" tabindex="-1"><a class="header-anchor" href="#命令行传参"><span>命令行传参</span></a></h3><p>有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给<code>main()</code>函数实现。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandLine</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;args[&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot;]: &quot;</span> <span class="token operator">+</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行方式（文件名为 <code>CommandLine.java</code>）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>javac CommandLine.java
<span class="token function">java</span> CommandLine hello world <span class="token number">123</span>
输出结果：
args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>: hello
args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: world
args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: <span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可变参数" tabindex="-1"><a class="header-anchor" href="#可变参数"><span>可变参数(...)</span></a></h3><p>在 Java 里，<strong>可变参数（varargs）</strong> 用来让方法接收不定数量的参数。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 语法</span>
返回类型 方法名<span class="token punctuation">(</span>参数类型<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 参数名<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可变参数求最大值案例：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarArgsMax</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用可变参数求最大值</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;未传递参数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">double</span> result <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;最大值是 &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 多个参数</span>
        <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 单个参数</span>
        <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 没有参数</span>
        <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">7.7</span><span class="token punctuation">,</span> <span class="token number">9.9</span><span class="token punctuation">,</span> <span class="token number">8.8</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传数组</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="递归-recursion" tabindex="-1"><a class="header-anchor" href="#递归-recursion"><span>递归（recursion）</span></a></h3><p>👉 递归本质就是就是：<strong>方法自己调用自己</strong>。 递归结构包含两个部分：</p><ul><li><strong>递归头</strong>：终止条件（避免无限调用）</li><li><strong>递归体</strong>：继续调用自身（问题规模要缩小）</li></ul><h4 id="阶乘-factorial" tabindex="-1"><a class="header-anchor" href="#阶乘-factorial"><span>阶乘（Factorial）</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursionDemo</span> <span class="token punctuation">{</span>
    <span class="token comment">// 计算 n 的阶乘：n! = n * (n-1) * (n-2) * ... * 1</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// 递归头</span>
        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 递归体</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;5! = &quot;</span> <span class="token operator">+</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 120</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="斐波那契-fibonacci-sequence" tabindex="-1"><a class="header-anchor" href="#斐波那契-fibonacci-sequence"><span>斐波那契（Fibonacci Sequence）</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FibonacciDemo</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 斐波那契数列（Fibonacci Sequence）
     * 特点：
     *   1. 第1项 = 1，第2项 = 1（固定）
     *   2. 从第3项开始，每一项 = 前两项之和
     * 数学公式：
     *   F(1) = 1
     *   F(2) = 1
     *   F(n) = F(n-1) + F(n-2)   (n &gt;= 3)
     *
     * 示例：
     *   第1项：1
     *   第2项：1
     *   第3项：2   (1+1)
     *   第4项：3   (2+1)
     *   第5项：5   (3+2)
     *   数列：1, 1, 2, 3, 5, 8, 13, 21, 34, ...
     */</span>

    <span class="token comment">// 使用递归实现斐波那契</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 递归出口：第1项或第2项，直接返回1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 递归体：第n项 = 前两项之和</span>
        <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 输出前10项</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-java-数组-array" tabindex="-1"><a class="header-anchor" href="#_5-java-数组-array"><span>5.Java 数组（Array）</span></a></h2><h3 id="什么是数组" tabindex="-1"><a class="header-anchor" href="#什么是数组"><span>什么是数组？</span></a></h3><p>定义：数组是<strong>相同数据类型元素</strong>的有序集合，具有以下特点：</p><ul><li><strong>连续存储</strong>：数组在内存中占用连续的存储空间。</li><li><strong>下标访问</strong>：每个元素通过唯一索引访问，下标从0开始。</li><li><strong>长度固定</strong>：一旦创建，长度不可改变。</li><li><strong>类型统一</strong>：数组中的所有元素必须是相同类型，可以是基本类型或引用类型。</li><li><strong>数组是对象</strong>：在Java中，数组属于引用类型，存储在堆内存中，数组元素类似对象的成员变量。</li></ul><h3 id="数组声明与创建" tabindex="-1"><a class="header-anchor" href="#数组声明与创建"><span>数组声明与创建</span></a></h3><p><strong>声明</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 声明，以 int 为例</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">;</span>      <span class="token comment">// ✅ 推荐写法</span>
<span class="token keyword">int</span> numbers2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>创建</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个长度为5的int数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>访问元素</strong></p><ul><li>数组索引从 0 开始，到 length - 1 结束。</li><li>使用 <code>数组名[索引]</code> 访问元素。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token comment">// 修改第一个元素</span>
<span class="token keyword">int</span> first <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 访问第一个元素</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：数组下标范围 <code>[0, length-1]</code>，越界会抛出 <code>ArrayIndexOutOfBoundsException</code>。</p><h3 id="数组初始化方式" tabindex="-1"><a class="header-anchor" href="#数组初始化方式"><span>数组初始化方式</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>① 静态初始化
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Man</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mans <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
② 动态初始化
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
③ 数组的默认初始化
当使用动态初始化时，数组元素会自动被赋予该类型的默认值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组内存分析" tabindex="-1"><a class="header-anchor" href="#数组内存分析"><span>数组内存分析</span></a></h3><p><strong>先了解Java 内存模型</strong></p><figure><img src="http://img.geekyspace.cn/pictures/2025/202509100119499.png" alt="Java内存模型" tabindex="0" loading="lazy"><figcaption>Java内存模型</figcaption></figure><p>数组对象存储在<strong>堆内存</strong>中。 数组变量本身在栈内存中保存<strong>堆地址引用</strong>。 每个线程都有独立的程序计数器（PC），控制执行流程。</p><figure><img src="http://img.geekyspace.cn/pictures/2025/202509100130746.png" alt="内存分析" tabindex="0" loading="lazy"><figcaption>内存分析</figcaption></figure><h3 id="反转数组" tabindex="-1"><a class="header-anchor" href="#反转数组"><span>反转数组</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
        right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java-util-arrays-类" tabindex="-1"><a class="header-anchor" href="#java-util-arrays-类"><span>java.util.Arrays 类</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArraysDemo</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment">// 初始化一个数组  </span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">,</span> <span class="token number">178</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;原始数组: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        <span class="token comment">// 1. 排序（升序）  </span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;排序后: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        <span class="token comment">// 2. 二分查找（前提是数组已排序）  </span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数字 19 的索引: &quot;</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        <span class="token comment">// 3. 填充数组  </span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;填充后的数组: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        <span class="token comment">// 4. 数组复制（扩容）  </span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;扩容后的数组: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        <span class="token comment">// 5. 部分复制  </span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 下标 [2,6)        System.out.println(&quot;部分复制: &quot; + Arrays.toString(d));  </span>
  
        <span class="token comment">// 6. 比较数组是否相等  </span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">178</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 确保顺序一致  </span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数组a与数组e是否相等: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        <span class="token comment">// 7. 多维数组打印  </span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;二维数组: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepToString</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        <span class="token comment">// 8. 并行排序（大数组时更快）  </span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> g <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">parallelSort</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;并行排序结果: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序"><span>冒泡排序</span></a></h3><p>冒泡的代码还是相当简单的。两层循环，外层冒泡轮数，里层依次比较，江湖中人人尽皆知。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>  
  
<span class="token comment">// 冒泡排序  </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSortDemo</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">,</span> <span class="token number">178</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;冒泡排序后: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment">// 外层循环控制轮数  </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token keyword">boolean</span> swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 标记本轮是否发生过交换  </span>
            <span class="token comment">// 内层循环控制比较和交换  </span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                    <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  
                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
                    array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  
                    swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
                <span class="token punctuation">}</span>  
            <span class="token punctuation">}</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>swapped<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,177);function k(v,m){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("JDK11的下载官方网站: "),s("a",r,[n("https://www.oracle.com/java/technologies/javase-jdk11-downloads.html"),l(t)]),n(" 注意：需要注意下载对应不同操作系统版本的JDK")]),d])}const h=e(i,[["render",k],["__file","java-from-scratch.html.vue"]]),y=JSON.parse('{"path":"/md/java/basic/java-from-scratch.html","title":"Java基础 - 从零开始学习Java","lang":"zh-CN","frontmatter":{"title":"Java基础 - 从零开始学习Java","shortTitle":null,"description":"Java基础 - 从零开始学习Java 1.Java语言的发展历史 Java特征 Java语言是美国Sun公司（Stanford University Network），在1995年推出的高级的编程语言。 特征： 面向对象（OOP） 跨平台性强（“一次编写，到处运行”） 安全性高、可移植性强 Java之父 Java之父 詹姆斯·高斯林 （James G...","icon":null,"cover":null,"author":"流浪码客","isOriginal":true,"sticky":false,"star":false,"date":"2025-09-09T00:00:00.000Z","category":"Java","tags":["JavaBasic"],"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/java/basic/java-from-scratch.html"}],["meta",{"property":"og:title","content":"Java基础 - 从零开始学习Java"}],["meta",{"property":"og:description","content":"Java基础 - 从零开始学习Java 1.Java语言的发展历史 Java特征 Java语言是美国Sun公司（Stanford University Network），在1995年推出的高级的编程语言。 特征： 面向对象（OOP） 跨平台性强（“一次编写，到处运行”） 安全性高、可移植性强 Java之父 Java之父 詹姆斯·高斯林 （James G..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://img.geekyspace.cn/pictures/2025/202509092327337.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-21T18:06:57.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"JavaBasic"}],["meta",{"property":"article:published_time","content":"2025-09-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-21T18:06:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础 - 从零开始学习Java\\",\\"image\\":[\\"http://img.geekyspace.cn/pictures/2025/202509092327337.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092328789.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092328775.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092329828.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092330631.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092330060.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092331631.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092332594.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092332253.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092333174.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092333155.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092330293.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092331468.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092334223.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092335176.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092335719.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092337025.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092337491.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092339610.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092339308.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092339003.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092340316.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092340867.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092340042.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092341599.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092341956.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092341691.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509092342106.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509100119499.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509100130746.png\\"],\\"datePublished\\":\\"2025-09-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-21T18:06:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"1.Java语言的发展历史","slug":"_1-java语言的发展历史","link":"#_1-java语言的发展历史","children":[{"level":3,"title":"Java特征","slug":"java特征","link":"#java特征","children":[]},{"level":3,"title":"Java之父","slug":"java之父","link":"#java之父","children":[]},{"level":3,"title":"发展历史","slug":"发展历史","link":"#发展历史","children":[]},{"level":3,"title":"计算机语言发展历史","slug":"计算机语言发展历史","link":"#计算机语言发展历史","children":[]},{"level":3,"title":"Java跨平台原理","slug":"java跨平台原理","link":"#java跨平台原理","children":[]}]},{"level":2,"title":"2.下载安装使用JDK","slug":"_2-下载安装使用jdk","link":"#_2-下载安装使用jdk","children":[{"level":3,"title":"下载JDK11","slug":"下载jdk11","link":"#下载jdk11","children":[]},{"level":3,"title":"安装后目录介绍","slug":"安装后目录介绍","link":"#安装后目录介绍","children":[]},{"level":3,"title":"配置JDK环境变量","slug":"配置jdk环境变量","link":"#配置jdk环境变量","children":[]},{"level":3,"title":"JRE，JDK，JVM之间的关系","slug":"jre-jdk-jvm之间的关系","link":"#jre-jdk-jvm之间的关系","children":[]},{"level":3,"title":"JavaSE，JavaEE，JavaME之间的区别","slug":"javase-javaee-javame之间的区别","link":"#javase-javaee-javame之间的区别","children":[]},{"level":3,"title":"Dos常用命令","slug":"dos常用命令","link":"#dos常用命令","children":[]},{"level":3,"title":"编译运行Java程序","slug":"编译运行java程序","link":"#编译运行java程序","children":[]}]},{"level":2,"title":"3.Java基础语法","slug":"_3-java基础语法","link":"#_3-java基础语法","children":[{"level":3,"title":"Java注释","slug":"java注释","link":"#java注释","children":[]},{"level":3,"title":"什么是关键字","slug":"什么是关键字","link":"#什么是关键字","children":[]},{"level":3,"title":"常量与变量","slug":"常量与变量","link":"#常量与变量","children":[]},{"level":3,"title":"Java变量命名规则","slug":"java变量命名规则","link":"#java变量命名规则","children":[]},{"level":3,"title":"存储单位与数据类型","slug":"存储单位与数据类型","link":"#存储单位与数据类型","children":[]},{"level":3,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]},{"level":3,"title":"运算符","slug":"运算符","link":"#运算符","children":[]},{"level":3,"title":"Scanner打印机用法","slug":"scanner打印机用法","link":"#scanner打印机用法","children":[]},{"level":3,"title":"流程控制语句","slug":"流程控制语句","link":"#流程控制语句","children":[]}]},{"level":2,"title":"4.Java 方法","slug":"_4-java-方法","link":"#_4-java-方法","children":[{"level":3,"title":"什么是方法？","slug":"什么是方法","link":"#什么是方法","children":[]},{"level":3,"title":"方法的定义与调用","slug":"方法的定义与调用","link":"#方法的定义与调用","children":[]},{"level":3,"title":"方法的重载","slug":"方法的重载","link":"#方法的重载","children":[]},{"level":3,"title":"命令行传参","slug":"命令行传参","link":"#命令行传参","children":[]},{"level":3,"title":"可变参数(...)","slug":"可变参数","link":"#可变参数","children":[]},{"level":3,"title":"递归（recursion）","slug":"递归-recursion","link":"#递归-recursion","children":[]}]},{"level":2,"title":"5.Java 数组（Array）","slug":"_5-java-数组-array","link":"#_5-java-数组-array","children":[{"level":3,"title":"什么是数组？","slug":"什么是数组","link":"#什么是数组","children":[]},{"level":3,"title":"数组声明与创建","slug":"数组声明与创建","link":"#数组声明与创建","children":[]},{"level":3,"title":"数组初始化方式","slug":"数组初始化方式","link":"#数组初始化方式","children":[]},{"level":3,"title":"数组内存分析","slug":"数组内存分析","link":"#数组内存分析","children":[]},{"level":3,"title":"反转数组","slug":"反转数组","link":"#反转数组","children":[]},{"level":3,"title":"java.util.Arrays 类","slug":"java-util-arrays-类","link":"#java-util-arrays-类","children":[]},{"level":3,"title":"冒泡排序","slug":"冒泡排序","link":"#冒泡排序","children":[]}]}],"git":{"createdTime":1757705470000,"updatedTime":1758478017000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":3}]},"readingTime":{"minutes":20.07,"words":6021},"filePathRelative":"md/java/basic/java-from-scratch.md","localizedDate":"2025年9月9日","excerpt":"\\n<h2>1.Java语言的发展历史</h2>\\n<h3>Java特征</h3>\\n<p>Java语言是美国Sun公司（Stanford University Network），在1995年推出的高级的编程语言。\\n<strong>特征：</strong></p>\\n<ul>\\n<li>面向对象（OOP）</li>\\n<li>跨平台性强（“一次编写，到处运行”）</li>\\n<li>安全性高、可移植性强</li>\\n</ul>\\n<h3>Java之父</h3>\\n<p><img src=\\"http://img.geekyspace.cn/pictures/2025/202509092327337.png\\" alt=\\"Java之父\\" loading=\\"lazy\\">\\n詹姆斯·高斯林 （James Gosling）是一名软件专家，1955年5月19日出生于加拿大，Java编程语言的共同创始人之一，一般公认他为“Java之父”。\\n1977年获得了加拿大卡尔加里大学计算机科学学士学位，1983年获得了美国卡内基梅隆大学计算机科学博士学位。</p>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{h as comp,y as data};
