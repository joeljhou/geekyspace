import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-CARt6Xo2.js";const p={},e=t(`<h1 id="java-21-新特性-记录模式-record-patterns" tabindex="-1"><a class="header-anchor" href="#java-21-新特性-记录模式-record-patterns"><span>Java 21 新特性：记录模式（Record Patterns）</span></a></h1><p>Java 21 中的<strong>记录模式</strong>（Record Patterns）是对模式匹配的扩展，它允许在模式匹配中使用<strong>记录</strong>（Records）类型。 同时，记录模式还支持嵌套，可以实现更复杂的数据查询和处理。</p><h2 id="仅仅是类型匹配" tabindex="-1"><a class="header-anchor" href="#仅仅是类型匹配"><span>仅仅是类型匹配</span></a></h2><p>到目前为止，Java中的模式匹配主要局限于匹配类型：<a href="/java-features/Java16/jep394-pattern-matching-for-instanceof">instanceof类型匹配</a></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Java 16 之前</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// JAVA 16+</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 21扩展了这个概念，使其可用于switch语句和表达式: <a href="/java-features/Java21/jep441-pattern-matching-for-switch">switch的模式匹配</a></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// JAVA 21之前</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">asStringValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anyValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>anyValue <span class="token keyword">instanceof</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> str<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>anyValue <span class="token keyword">instanceof</span> <span class="token class-name">BigDecimal</span> bd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">toEngineeringString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>anyValue instance <span class="token class-name">Integer</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token string">&quot;n/a&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// JAVA 21+</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">asStringValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anyValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>anyValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">String</span> str    <span class="token operator">-&gt;</span> str<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">BigDecimal</span> bd <span class="token operator">-&gt;</span> bd<span class="token punctuation">.</span><span class="token function">toEngineeringString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">Integer</span> i     <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span>            <span class="token operator">-&gt;</span> <span class="token string">&quot;n/a&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码比之前更加简洁，同时也更加易读。但是，这种模式匹配仍然局限于类型匹配。</p><h2 id="record模式" tabindex="-1"><a class="header-anchor" href="#record模式"><span>record模式</span></a></h2><p>当我们将模式匹配与记录类型结合使用时，我们称之为<strong>记录模式</strong>。这意味着我们可以在模式匹配中使用记录类型，以及记录类型的属性。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// Java 16 之前</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printSum</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Point</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// JAVA 21+</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printSum</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>Point(int x, int y)</code>就是记录模式，它匹配<code>Point</code>类型的对象，将记录的实例（obj）分解到它的组件（<code>x</code>和<code>y</code>）。</p><h2 id="嵌套record的解构" tabindex="-1"><a class="header-anchor" href="#嵌套record的解构"><span>嵌套record的解构</span></a></h2><p>假设我们设计了一个记录，表示一个矩形，其中包含左上角和右下角的颜色点。 如果我们想要获取左上角点的颜色，我们可以这样写：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span> <span class="token constant">RED</span><span class="token punctuation">,</span> <span class="token constant">GREEN</span><span class="token punctuation">,</span> <span class="token constant">BLUE</span> <span class="token punctuation">}</span>
<span class="token keyword">record</span> <span class="token class-name">ColoredPoint</span><span class="token punctuation">(</span><span class="token class-name">Point</span> p<span class="token punctuation">,</span> <span class="token class-name">Color</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">record</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token class-name">ColoredPoint</span> upperLeft<span class="token punctuation">,</span> <span class="token class-name">ColoredPoint</span> lowerRight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColoredPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token punctuation">,</span> 
                            <span class="token keyword">new</span> <span class="token class-name">ColoredPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Java 16 之前</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printUpperLeftColoredPoint</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token keyword">instanceof</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token class-name">ColoredPoint</span> ul<span class="token punctuation">,</span> <span class="token class-name">ColoredPoint</span> lr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// JAVA 21+</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printUpperLeftColoredPoint</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token keyword">instanceof</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token class-name">ColoredPoint</span><span class="token punctuation">(</span><span class="token class-name">Point</span> ul<span class="token punctuation">,</span> <span class="token class-name">Color</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ColoredPoint</span> lr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>嵌套模式允许我们使用与将其组合的代码一样清晰简洁的代码来拆解聚合。</p><h2 id="发展脉络" tabindex="-1"><a class="header-anchor" href="#发展脉络"><span>发展脉络</span></a></h2><p>该功能最初作为预览功能在Java 19（JEP 405）中首次亮相，随后经过Java 20（JEP 432）的迭代，最终在Java 21中定稿（JEP 440）。 此功能与模式匹配的switch语句（JEP 441）共同演进，并且它们之间存在相当大的互动。</p>`,18),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","jep440-record-partterns.html.vue"]]),d=JSON.parse('{"path":"/md/java/features/Java21/jep440-record-partterns.html","title":"Java 21 新特性：记录模式","lang":"zh-CN","frontmatter":{"title":"Java 21 新特性：记录模式","shortTitle":null,"description":"Java 21 新特性：记录模式（Record Patterns） Java 21 中的记录模式（Record Patterns）是对模式匹配的扩展，它允许在模式匹配中使用记录（Records）类型。 同时，记录模式还支持嵌套，可以实现更复杂的数据查询和处理。 仅仅是类型匹配 到目前为止，Java中的模式匹配主要局限于匹配类型：instanceof类型...","icon":null,"cover":null,"author":"流浪码客","isOriginal":true,"sticky":false,"star":false,"date":"2024-01-09T00:00:00.000Z","category":"Java Features","tag":["java"],"order":440,"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/java/features/Java21/jep440-record-partterns.html"}],["meta",{"property":"og:title","content":"Java 21 新特性：记录模式"}],["meta",{"property":"og:description","content":"Java 21 新特性：记录模式（Record Patterns） Java 21 中的记录模式（Record Patterns）是对模式匹配的扩展，它允许在模式匹配中使用记录（Records）类型。 同时，记录模式还支持嵌套，可以实现更复杂的数据查询和处理。 仅仅是类型匹配 到目前为止，Java中的模式匹配主要局限于匹配类型：instanceof类型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-16T11:19:57.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-01-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-16T11:19:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 21 新特性：记录模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-16T11:19:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"仅仅是类型匹配","slug":"仅仅是类型匹配","link":"#仅仅是类型匹配","children":[]},{"level":2,"title":"record模式","slug":"record模式","link":"#record模式","children":[]},{"level":2,"title":"嵌套record的解构","slug":"嵌套record的解构","link":"#嵌套record的解构","children":[]},{"level":2,"title":"发展脉络","slug":"发展脉络","link":"#发展脉络","children":[]}],"git":{"createdTime":1758021597000,"updatedTime":1758021597000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":1}]},"readingTime":{"minutes":2.36,"words":709},"filePathRelative":"md/java/features/Java21/jep440-record-partterns.md","localizedDate":"2024年1月9日","excerpt":"\\n<p>Java 21 中的<strong>记录模式</strong>（Record Patterns）是对模式匹配的扩展，它允许在模式匹配中使用<strong>记录</strong>（Records）类型。\\n同时，记录模式还支持嵌套，可以实现更复杂的数据查询和处理。</p>\\n<h2>仅仅是类型匹配</h2>\\n<p>到目前为止，Java中的模式匹配主要局限于匹配类型：<a href=\\"/java-features/Java16/jep394-pattern-matching-for-instanceof\\">instanceof类型匹配</a></p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// Java 16 之前</span>\\n<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>obj <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token class-name\\">String</span> str <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">)</span> obj<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// JAVA 16+</span>\\n<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>obj <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\">String</span> str<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{k as comp,d as data};
