import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as l,c as p,a as n,b as a,d as s,e as t}from"./app-CARt6Xo2.js";const i={},r=t('<h1 id="bean-定义-definition" tabindex="-1"><a class="header-anchor" href="#bean-定义-definition"><span>Bean 定义（Definition）</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><blockquote><p>构建应用程序主干并由Spring IoC 容器管理的对象称为 Bean。</p><p>在容器中，Bean的定义表示为<code>org.springframework.beans.factory.config.BeanDefinition</code>对象。</p></blockquote><p><strong>BeanDefinition包含以下元数据：</strong></p><ul><li><strong>全路径类名</strong>：通常，被定义为Bean的实现类</li><li><strong>行为配置元素</strong>：说明了Bean在容器中的行为方式，例如作用域scope、生命周期回调等</li><li><strong>依赖关系</strong>：描述Bean与其他Bean之间的依赖关系，包括依赖注入，依赖查找等</li><li>其他配置信息：如：管理连接池的Bean可以配置pool的大小限制，使用的连接数量等</li></ul><p>该元数据转换为组成每个Bean定义的一组属性。 下表介绍了这些属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Class</td><td>Bean的全限定类名</td></tr><tr><td>Name</td><td>Bean的名称</td></tr><tr><td>Scope</td><td>Bean的作用域</td></tr><tr><td>Constructor arguments</td><td>Bean的构造函数参数</td></tr><tr><td>Properties</td><td>Bean的属性</td></tr><tr><td>Autowiring mode</td><td>Bean的自动装配模式</td></tr><tr><td>Lazy initialization mode</td><td>Bean的延迟初始化模式</td></tr><tr><td>Initialization method</td><td>Bean的初始化方法</td></tr><tr><td>Destruction method</td><td>Bean的销毁方法</td></tr></tbody></table><h2 id="命名beans" tabindex="-1"><a class="header-anchor" href="#命名beans"><span>命名Beans</span></a></h2><p>在Spring IoC容器中，每个Bean都必须有一个<strong>唯一的标识符</strong>（identifier），如果需要一个以上的标识符，多余的标识符可以被视为<strong>别名</strong>。</p><p><strong>基于XML的配置元数据</strong></p><table><thead><tr><th>属性/元素</th><th>描述</th></tr></thead><tbody><tr><td><code>id</code></td><td>Bean的唯一标识符；默认采取小写字母开头的驼峰命名法</td></tr><tr><td><code>name</code></td><td>Bean的别名，可以有多个别名；用逗号（<code>,</code>）、分号（<code>;</code>）或空格分隔</td></tr><tr><td><code>alias</code></td><td>与name作用相同，都是用于指定Bean的别名（Spring 5.0中废弃）</td></tr><tr><td><code>ref</code></td><td>引用其他Bean</td></tr></tbody></table>',11),d=n("code",null,"id",-1),u=n("code",null,"ref",-1),k={href:"https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-properties-detailed.html#beans-inner-beans",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-autowire.html",target:"_blank",rel:"noopener noreferrer"},v=t("<p><strong>使用<code>Introspector</code>生成默认Bean名称</strong></p><p>在classpath中的组件扫描，Spring会自动为未命名的组件按照<code>java.beans.Introspector</code>的规则生成一个默认的bean名称</p><p>默认将类名的转为<mark>小写字母开头的驼峰命名法</mark>；如<code>com.example.MyBean</code>类的Bean名称是<code>myBean</code>。 特殊的，如果类名的第一个和第二个字符都是大写字母，则 Spring 会保留原始的大小写；如<code>URL</code>类的默认Bean名称还是<code>URL</code></p>",3),g=n("strong",null,"Java配置",-1),h=n("code",null,"@Bean",-1),b={href:"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html",target:"_blank",rel:"noopener noreferrer"},B=n("h2",{id:"实例化bean",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实例化bean"},[n("span",null,"实例化Bean")])],-1),f=n("p",null,"Bean定义（definition）本质上是创建一个或多个对象的“配方”。 容器在被询问时查看指定名称的Bean的“配方”，并使用该Bean定义所封装的元数据来创建（或获取）一个对象。",-1),_=n("p",null,[n("strong",null,"使用XML配置元数据实例化Bean")],-1),y=n("code",null,"<bean>",-1),E=n("code",null,"class",-1),q=n("code",null,"class",-1),x=n("code",null,"BeanDefinition",-1),w=n("code",null,"Class",-1),S=n("a",{href:"#%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E5%AE%9E%E4%BE%8B%E5%8C%96"},"使用实例工厂方法实例化",-1),C={href:"https://docs.spring.io/spring-framework/reference/core/beans/child-bean-definitions.html",target:"_blank",rel:"noopener noreferrer"},D=t(`<p><strong>使用<code>Class</code>属性</strong></p><ol><li>通过反射调用构造函数创建Bean <ul><li>这种方式类似于Java中的<code>new</code>操作符，容器通过反射调用构造函数来创建Bean</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.MyClass<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>通过静态工厂方法创建Bean <ul><li>这种方式不太常见，容器会调用一个类上的<code>static</code>工厂方法来创建Bean</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.MyFactoryClass<span class="token punctuation">&quot;</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createInstance<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p><strong>嵌套类的Bean定义</strong></p><blockquote><p>如果要为嵌套类配置Bean定义，可以使用嵌套类的<mark>二进制名称</mark>或<mark>源名称</mark>，通过美元符号 (<code>$</code>) 或点 (<code>.</code>) 分隔。</p></blockquote><p>假设有一个名为<code>OuterClass</code>的外围类，其中包含一个名为<code>InnerClass</code>的嵌套类</p><ul><li>二进制名称：<code>com.example.OuterClass$InnerClass</code></li><li>源名称：<code>com.example.OuterClass.InnerClass</code></li></ul><h3 id="使用构造函数实例化" tabindex="-1"><a class="header-anchor" href="#使用构造函数实例化"><span>使用构造函数实例化</span></a></h3><p>通过构造函数方法创建<code>Bean</code>时，所有普通的类都可以被<code>Spring</code>使用并与之兼容</p><ul><li>被开发的类不需要实现任何特定的接口，或以特定的方式进行编码。只需指定<code>Bean</code>类就足够了</li><li>根据你对该特定<code>Bean</code>使用的<code>IoC</code>类型，可能需要一个<mark>默认（空）构造函数</mark></li></ul><p>通过基于XML的配置元数据，你可以按以下方式指定你的bean类。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>anotherExample<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBeanTwo<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),I=n("mark",null,"构造函数传递参数",-1),A=n("mark",null,"对象被构造后设置对象实例属性",-1),j={href:"https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-collaborators.html",target:"_blank",rel:"noopener noreferrer"},L=t(`<h3 id="使用静态工厂方法实例化" tabindex="-1"><a class="header-anchor" href="#使用静态工厂方法实例化"><span>使用静态工厂方法实例化</span></a></h3><p>定义一个静态工厂方法创建Bean时，使用<code>class</code>属性指定工厂类，使用<code>factory-method</code>属性指定工厂方法。 这种Bean定义的一个用途是在遗留代码中调用<code>static</code>工厂，做到<mark>无侵入性</mark>。</p><p>示例Bean定义，它使用静态工厂方法创建Bean：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clientService<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ClientService<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createInstance<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的例子展示了一个与Bean定义（definition）一起工作的类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ClientService</span> clientService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ClientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ClientService</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> clientService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),F=n("mark",null,"工厂方法提供（可选）参数",-1),T=n("mark",null,"从工厂返回对象后设置对象实例属性",-1),M={href:"https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-properties-detailed.html",target:"_blank",rel:"noopener noreferrer"},N=t(`<h3 id="使用实例工厂方法实例化" tabindex="-1"><a class="header-anchor" href="#使用实例工厂方法实例化"><span>使用实例工厂方法实例化</span></a></h3><p>使用<strong>实例工厂方法</strong>进行的实例化，与<a href="#%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E5%AE%9E%E4%BE%8B%E5%8C%96">使用静态工厂方法实例化</a>类似； 通过从容器中调用现有<code>Bean</code>的非静态方法来创建一个新的<code>Bean</code>。 要使用这种机制，请将<code>class</code>属性留空，<code>factory-bean</code>属性指定工厂Bean，<code>factory-method</code>属性指定工厂方法。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 工厂Bean，包含一个名为 createInstance() 的方法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serviceLocator<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.DefaultServiceLocator<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 注入此定位器Bean所需的任何依赖项 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- 通过工厂Bean创建的Bean --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clientService<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serviceLocator<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createClientServiceInstance<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serviceLocator<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createAccountServiceInstance<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下示例显示了相应的类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultServiceLocator</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ClientService</span> clientService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AccountService</span> accountService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ClientService</span> <span class="token function">createClientServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> clientService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">AccountService</span> <span class="token function">createAccountServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> accountService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),O={href:"https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-properties-detailed.html",target:"_blank",rel:"noopener noreferrer"},z={class:"hint-container note"},P=n("p",{class:"hint-container-title"},"注",-1),Z=n("code",null,"factory bean",-1),V=n("a",{href:"#%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E5%AE%9E%E4%BE%8B%E5%8C%96"},"实例",-1),X=n("a",{href:"#%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E5%AE%9E%E4%BE%8B%E5%8C%96"},"静态",-1),J=n("code",null,"FactoryBean",-1),R={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-extension.html#beans-factory-extension-factorybean",target:"_blank",rel:"noopener noreferrer"},U=t('<h3 id="确定bean的运行时类型" tabindex="-1"><a class="header-anchor" href="#确定bean的运行时类型"><span>确定Bean的运行时类型</span></a></h3><p>在 Spring 应用程序中，要确定特定<code>Bean</code>的<mark>运行时类型</mark>可能会有些复杂。 这是因为<code>Bean</code>的类型可能受到多种因素的影响，包括但不限于以下几点：</p><ol><li><strong>Bean 元数据定义</strong><ul><li>Bean元数据定义中指定的<code>class</code>类只是一个初始的类引用</li></ul></li><li><strong>静态工厂方法和 FactoryBean</strong><ul><li>与静态工厂方法或者FactoryBean的实现结合使用，可能会导致Bean的实际类型与<code>class</code>属性指定的类型不同</li></ul></li><li><strong>实例工厂方法</strong><ul><li>与实例工厂方法结合使用，根本不会使用<code>class</code>属性指定的类型，而是通过指定的<code>factory-bean</code>名称来解决</li></ul></li><li><strong>AOP 代理</strong><ul><li>AOP代理可能会使用基于接口代理包装Bean实例，目标Bean的实际类型公开有限（只有其实现的的代理接口）</li></ul></li></ol><p>考虑到上述所有情况，要了解某个特定Bean的实际运行时类型。 推荐的方法是使用<code>BeanFactory</code>接口的<code>getType()</code>方法， 并返回与<code>BeanFactory.getBean()</code>调用返回的对象类型相同的类型。</p>',4);function $(G,H){const e=c("ExternalLinkIcon");return l(),p("div",null,[r,n("p",null,[a("建议为每个Bean提供一个唯一的"),d,a("属性，以便使用"),u,a("属性引用该Bean。 不提供Bean名称的动机与使用"),n("a",k,[a("内部Bean"),s(e)]),a(" 和"),n("a",m,[a("自动装配协作者"),s(e)]),a("有关。")]),v,n("blockquote",null,[n("p",null,[a("如果你使用"),g,a("，"),h,a(" 注解可以被用来提供别名。 参阅 "),n("a",b,[a("使用@Bean注释"),s(e)]),a("。")])]),B,f,_,n("p",null,[a("如果使用基于XML的配置元数据，可以在"),y,a("元素中的"),E,a("属性中指定要实例化对象的类型。 这个"),q,a("属性通常是必需的，用于定义内部"),x,a("对象实例的"),w,a("属性。 对于一些例外情况，参阅 "),S,a(" 以及 "),n("a",C,[a("Bean定义的继承"),s(e)]),a("。")]),D,n("p",null,[a("关于向"),I,a("和"),A,a("的机制的详细信息，请参阅 "),n("a",j,[a("依赖注入"),s(e)]),a("。")]),L,n("p",null,[a("关于向"),F,a("以及"),T,a("的机制，参阅 "),n("a",M,[a("依赖和配置详解"),s(e)]),a("。")]),N,n("p",null,[a("这种方法表明，工厂Bean本身可以通过依赖注入（DI）进行管理和配置。参阅 "),n("a",O,[a("依赖和配置详解"),s(e)]),a("。")]),n("div",z,[P,n("p",null,[a("在 Spring 文档中，“"),Z,a("”是指Spring容器中配置的Bean，它通过"),V,a(" 或"),X,a("工厂方法创建对象。 相比之下，"),J,a("（注意大小写）是Spring特定 "),n("a",R,[a("FactoryBean"),s(e)]),a(" 接口的实现，它允许自定义实例化逻辑。")])]),U])}const W=o(i,[["render",$],["__file","beans-definition.html.vue"]]),Y=JSON.parse('{"path":"/md/spring-framework/core/beans-definition.html","title":"Bean 定义（Definition）","lang":"zh-CN","frontmatter":{"title":"Bean 定义（Definition）","author":"流浪码客","isOriginal":true,"date":"2024-03-18T00:00:00.000Z","category":"Spring","tag":"Spring Framework","description":"Bean 定义（Definition） 概述 构建应用程序主干并由Spring IoC 容器管理的对象称为 Bean。 在容器中，Bean的定义表示为org.springframework.beans.factory.config.BeanDefinition对象。 BeanDefinition包含以下元数据： 全路径类名：通常，被定义为Bean的实现...","head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/spring-framework/core/beans-definition.html"}],["meta",{"property":"og:title","content":"Bean 定义（Definition）"}],["meta",{"property":"og:description","content":"Bean 定义（Definition） 概述 构建应用程序主干并由Spring IoC 容器管理的对象称为 Bean。 在容器中，Bean的定义表示为org.springframework.beans.factory.config.BeanDefinition对象。 BeanDefinition包含以下元数据： 全路径类名：通常，被定义为Bean的实现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-01T18:57:43.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"Spring Framework"}],["meta",{"property":"article:published_time","content":"2024-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-01T18:57:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bean 定义（Definition）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-01T18:57:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"命名Beans","slug":"命名beans","link":"#命名beans","children":[]},{"level":2,"title":"实例化Bean","slug":"实例化bean","link":"#实例化bean","children":[{"level":3,"title":"使用构造函数实例化","slug":"使用构造函数实例化","link":"#使用构造函数实例化","children":[]},{"level":3,"title":"使用静态工厂方法实例化","slug":"使用静态工厂方法实例化","link":"#使用静态工厂方法实例化","children":[]},{"level":3,"title":"使用实例工厂方法实例化","slug":"使用实例工厂方法实例化","link":"#使用实例工厂方法实例化","children":[]},{"level":3,"title":"确定Bean的运行时类型","slug":"确定bean的运行时类型","link":"#确定bean的运行时类型","children":[]}]}],"git":{"createdTime":1719508475000,"updatedTime":1740855463000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":1},{"name":"kai","email":"kkdlut@hotmail.com","commits":1}]},"readingTime":{"minutes":6.75,"words":2026},"filePathRelative":"md/spring-framework/core/beans-definition.md","localizedDate":"2024年3月18日","excerpt":"\\n<h2>概述</h2>\\n<blockquote>\\n<p>构建应用程序主干并由Spring IoC 容器管理的对象称为 Bean。</p>\\n<p>在容器中，Bean的定义表示为<code>org.springframework.beans.factory.config.BeanDefinition</code>对象。</p>\\n</blockquote>\\n<p><strong>BeanDefinition包含以下元数据：</strong></p>\\n<ul>\\n<li><strong>全路径类名</strong>：通常，被定义为Bean的实现类</li>\\n<li><strong>行为配置元素</strong>：说明了Bean在容器中的行为方式，例如作用域scope、生命周期回调等</li>\\n<li><strong>依赖关系</strong>：描述Bean与其他Bean之间的依赖关系，包括依赖注入，依赖查找等</li>\\n<li>其他配置信息：如：管理连接池的Bean可以配置pool的大小限制，使用的连接数量等</li>\\n</ul>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{W as comp,Y as data};
