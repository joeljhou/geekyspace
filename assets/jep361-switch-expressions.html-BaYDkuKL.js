import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-CARt6Xo2.js";const e={},p=t(`<h1 id="java-14-新特性-switch表达式增强" tabindex="-1"><a class="header-anchor" href="#java-14-新特性-switch表达式增强"><span>Java 14 新特性：switch表达式增强</span></a></h1><p>Java 14(JEP 361)引入了 switch 表达式的新特性，其中包括了 &quot;<strong>箭头标签</strong>（<code>case ... -&gt;</code>）&quot; 和 <code>yield</code> 语句的增强， 同时支持 <code>Lambda</code> 语法，使得代码更加灵活、简洁，并为未来的<strong>模式匹配</strong>(JEP 305)特性做好了准备。</p><h2 id="传统的switch语句" tabindex="-1"><a class="header-anchor" href="#传统的switch语句"><span>传统的switch语句</span></a></h2><p>首先，让我们回顾一下传统的switch语句，它们在处理多个条件时可能显得有些冗长：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token constant">FRIDAY</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token constant">SUNDAY</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">TUESDAY</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">THURSDAY</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token constant">SATURDAY</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">WEDNESDAY</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传统的 switch 语句存在以下问题：</p><ol><li>设计受到C和C++等低级语言的影响，且默认支持fall through语义</li><li>过多的<code>break</code>语句使得代码显得冗长</li></ol><h2 id="switch表达式增强" tabindex="-1"><a class="header-anchor" href="#switch表达式增强"><span>switch表达式增强</span></a></h2><h3 id="箭头标签-case-l" tabindex="-1"><a class="header-anchor" href="#箭头标签-case-l"><span>箭头标签（case L -&gt;）</span></a></h3><ol><li>引入了一种新的开关标签&quot;<code>case L -&gt;</code>&quot;，用于表示只有一个分支的情况</li><li>允许每种情况下有多个常量，用逗号分隔</li><li>标签右侧的代码仅限于表达式、块或抛出异常throw语句</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">TUESDAY</span>                <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span>     <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">WEDNESDAY</span>              <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="局部变量独立作用域" tabindex="-1"><a class="header-anchor" href="#局部变量独立作用域"><span>局部变量独立作用域</span></a></h3><p>在 Java 14 中，允许在每个分支中声明局部变量，避免块中变量命名冲突和误用。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>switch (day) {
    case MONDAY:
    case TUESDAY:
        int temp = ...     // &#39;temp&#39;的作用域延续到 }
        break;
    case WEDNESDAY:
    case THURSDAY:
        int temp2 = ...    // 不能将此变量命名为&#39;temp&#39;
        break;
    default:
        int temp3 = ...    // 不能将此变量命名为&#39;temp&#39;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="switch表达式" tabindex="-1"><a class="header-anchor" href="#switch表达式"><span>switch表达式</span></a></h3><p>Switch 表达式被引入，允许将 <code>switch</code> 语句用作表达式，通过 <code>Lambda</code> 语法，根据输入值返回不同的结果。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 根据输入值\`k\`的不同，返回不同的字符串，并通过\`System.out.println\`打印结果</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">howMany</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span>  <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;one&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span>  <span class="token number">2</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;many&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Switch表达式的常见形式如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">L1</span> <span class="token operator">-&gt;</span> e1<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">L2</span> <span class="token operator">-&gt;</span> e2<span class="token punctuation">;</span>
    <span class="token keyword">default</span> <span class="token operator">-&gt;</span> e3<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Switch表达式是多态表达式（poly expression）。</p><p>多态性是指在编译时不确定具体类型，而在运行时确定类型的特性。</p></blockquote><h3 id="yield语句返回值" tabindex="-1"><a class="header-anchor" href="#yield语句返回值"><span>yield语句返回值</span></a></h3><p>允许在switch表达式中使用<code>yield</code>语句，而不是使用<code>break</code>语句，用于返回一个值，结束switch表达式的执行。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> numLetters <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span> <span class="token operator">-&gt;</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">TUESDAY</span>                <span class="token operator">-&gt;</span> <span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span>     <span class="token operator">-&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">WEDNESDAY</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token function">performComplexCalculation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在这里进行一些复杂的计算</span>
        <span class="token keyword">yield</span> temp<span class="token punctuation">;</span>                              <span class="token comment">// 使用yield返回计算结果</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="发展脉络" tabindex="-1"><a class="header-anchor" href="#发展脉络"><span>发展脉络</span></a></h2><p>追溯JEP 361的发展历程：从JDK 12预览版(JEP 325)到JDK 13预览版(JEP 354)， 虽然部分功能在早期版本中已经出现，但建议在 JDK 14 及以后的版本中使用，以获得更好的稳定性和支持。</p>`,25),c=[p];function o(l,i){return s(),a("div",null,c)}const k=n(e,[["render",o],["__file","jep361-switch-expressions.html.vue"]]),d=JSON.parse('{"path":"/md/java/features/Java14/jep361-switch-expressions.html","title":"Java 14 新特性：switch表达式增强","lang":"zh-CN","frontmatter":{"title":"Java 14 新特性：switch表达式增强","shortTitle":null,"description":"Java 14 新特性：switch表达式增强 Java 14(JEP 361)引入了 switch 表达式的新特性，其中包括了 \\"箭头标签（case ... ->）\\" 和 yield 语句的增强， 同时支持 Lambda 语法，使得代码更加灵活、简洁，并为未来的模式匹配(JEP 305)特性做好了准备。 传统的switch语句 首先，让我们回顾一下传...","icon":null,"cover":null,"author":"流浪码客","isOriginal":true,"sticky":false,"star":false,"date":"2023-12-25T00:00:00.000Z","category":"Java Features","tag":["java"],"order":361,"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/java/features/Java14/jep361-switch-expressions.html"}],["meta",{"property":"og:title","content":"Java 14 新特性：switch表达式增强"}],["meta",{"property":"og:description","content":"Java 14 新特性：switch表达式增强 Java 14(JEP 361)引入了 switch 表达式的新特性，其中包括了 \\"箭头标签（case ... ->）\\" 和 yield 语句的增强， 同时支持 Lambda 语法，使得代码更加灵活、简洁，并为未来的模式匹配(JEP 305)特性做好了准备。 传统的switch语句 首先，让我们回顾一下传..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-16T11:19:57.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2023-12-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-16T11:19:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 14 新特性：switch表达式增强\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-16T11:19:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"传统的switch语句","slug":"传统的switch语句","link":"#传统的switch语句","children":[]},{"level":2,"title":"switch表达式增强","slug":"switch表达式增强","link":"#switch表达式增强","children":[{"level":3,"title":"箭头标签（case L ->）","slug":"箭头标签-case-l","link":"#箭头标签-case-l","children":[]},{"level":3,"title":"局部变量独立作用域","slug":"局部变量独立作用域","link":"#局部变量独立作用域","children":[]},{"level":3,"title":"switch表达式","slug":"switch表达式","link":"#switch表达式","children":[]},{"level":3,"title":"yield语句返回值","slug":"yield语句返回值","link":"#yield语句返回值","children":[]}]},{"level":2,"title":"发展脉络","slug":"发展脉络","link":"#发展脉络","children":[]}],"git":{"createdTime":1758021597000,"updatedTime":1758021597000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":1}]},"readingTime":{"minutes":2.47,"words":740},"filePathRelative":"md/java/features/Java14/jep361-switch-expressions.md","localizedDate":"2023年12月25日","excerpt":"\\n<p>Java 14(JEP 361)引入了 switch 表达式的新特性，其中包括了 \\"<strong>箭头标签</strong>（<code>case ... -&gt;</code>）\\" 和 <code>yield</code> 语句的增强，\\n同时支持 <code>Lambda</code> 语法，使得代码更加灵活、简洁，并为未来的<strong>模式匹配</strong>(JEP 305)特性做好了准备。</p>\\n<h2>传统的switch语句</h2>\\n<p>首先，让我们回顾一下传统的switch语句，它们在处理多个条件时可能显得有些冗长：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">switch</span> <span class=\\"token punctuation\\">(</span>day<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">case</span> <span class=\\"token constant\\">MONDAY</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">case</span> <span class=\\"token constant\\">FRIDAY</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">case</span> <span class=\\"token constant\\">SUNDAY</span><span class=\\"token operator\\">:</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">6</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">case</span> <span class=\\"token constant\\">TUESDAY</span><span class=\\"token operator\\">:</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">7</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">case</span> <span class=\\"token constant\\">THURSDAY</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">case</span> <span class=\\"token constant\\">SATURDAY</span><span class=\\"token operator\\">:</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">8</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">case</span> <span class=\\"token constant\\">WEDNESDAY</span><span class=\\"token operator\\">:</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">9</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{k as comp,d as data};
