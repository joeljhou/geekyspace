import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-CARt6Xo2.js";const t={},p=e(`<h1 id="java-18-新特性-简单web服务器" tabindex="-1"><a class="header-anchor" href="#java-18-新特性-简单web服务器"><span>Java 18 新特性：简单Web服务器</span></a></h1><p>Java 18 引入了<strong>简单Web服务</strong>器（Simple Web Server），一个专为教育或非正式任务设计的最小HTTP服务器，为单个目录层次结构提供服务。 基于JDK中的<code>com.sun.net.httpserver</code>包实现，旨在简化服务器的创建和请求处理过程。</p><p>主要特点：</p><ul><li>不能替代成熟的商业服务器，如<code>Jetty</code>、<code>Nginx</code> 和 <code>Apache Tomcat</code>等</li><li>不提供身份验证、访问控制或加密等安全功能</li><li>仅支持HTTP/1.1，不支持HTTPS</li><li>仅支持GET、HEAD请求，否则返回 501 Not Implemented 或 405 Not Allowed</li></ul><h2 id="命令行工具" tabindex="-1"><a class="header-anchor" href="#命令行工具"><span>命令行工具</span></a></h2><p>为了开始使用简单Web服务器，您需要准备一个<code>index.html</code>文件，并执行以下步骤：</p><ol><li>打开终端。</li><li>输入命令：<code>jwebserver</code>。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ jwebserver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下，服务器将绑定到本地回环地址，并在端口8000上提供服务。看到类似以下的输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Binding to loopback by default. For all interfaces use <span class="token string">&quot;-b 0.0.0.0&quot;</span> or <span class="token string">&quot;-b ::&quot;</span><span class="token builtin class-name">.</span>
Serving /cwd and its subdirectories on <span class="token number">127.0</span>.0.1 port <span class="token number">8000</span>
URL: http://127.0.0.1:8000/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尝试访问一下 <code>http://127.0.0.1:8000/</code> ，就可以获得之前准备的HTML内容了。</p><h3 id="支持的命令行选项" tabindex="-1"><a class="header-anchor" href="#支持的命令行选项"><span>支持的命令行选项</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>选项：
       <span class="token parameter variable">-h</span> 或 -? 或 <span class="token parameter variable">--help</span>
              打印帮助信息并退出.

       <span class="token parameter variable">-b</span> addr 或 --bind-address addr
              指定绑定的地址。默认：127.0.0.1或::1（回环地址）。要使用所有接口，请使用 <span class="token parameter variable">-b</span> <span class="token number">0.0</span>.0.0 或 <span class="token parameter variable">-b</span> ::.

       <span class="token parameter variable">-d</span> <span class="token function">dir</span> 或 <span class="token parameter variable">--directory</span> <span class="token function">dir</span>
              指定要提供服务的目录。默认：当前目录.

       <span class="token parameter variable">-o</span> level 或 <span class="token parameter variable">--output</span> level
              指定输出格式。none <span class="token operator">|</span> info <span class="token operator">|</span> verbose。默认：info.

       <span class="token parameter variable">-p</span> port 或 <span class="token parameter variable">--port</span> port
              指定要监听的端口。默认：8000.

       <span class="token parameter variable">-version</span> 或 <span class="token parameter variable">--version</span>
              打印版本信息并退出。

       要停止服务器，请按 Ctrl + C.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="api编程方式" tabindex="-1"><a class="header-anchor" href="#api编程方式"><span>API编程方式</span></a></h2><p>尽管命令行工具提供了便利，但为了更灵活地定制处理程序的行为，与现有代码集成，提高代码的可读性和可维护性，我们引入了新的API。</p><blockquote><p>新的API中引入了三个新的类是<code>SimpleFileServer</code>、<code>HttpHandlers</code>和<code>Request</code>， 每个类都构建在<code>com.sun.net.httpserver</code>包中的现有类和接口上：<code>HttpServer</code>、<code>HttpHandler</code>、<code>Filter</code>和<code>HttpExchange</code>。</p></blockquote><h3 id="简单文件服务器-simplefileserver" tabindex="-1"><a class="header-anchor" href="#简单文件服务器-simplefileserver"><span>简单文件服务器（SimpleFileServer）</span></a></h3><p><code>SimpleFileServer</code>支持创建文件服务器、文件服务器处理程序和输出过滤器。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span>httpserver</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFileServer</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建文件服务器实例</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token number">1</span> <span class="token function">createFileServer</span><span class="token punctuation">(</span>
        <span class="token class-name">InetSocketAddress</span> addr<span class="token punctuation">,</span> <span class="token class-name">Path</span> rootDirectory<span class="token punctuation">,</span> <span class="token class-name">OutputLevel</span> outputLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>          
    
    <span class="token comment">// 创建文件服务器处理程序</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpHandler</span> <span class="token function">createFileHandler</span><span class="token punctuation">(</span>
        <span class="token class-name">Path</span> rootDirectory<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    
    <span class="token comment">// 创建输出过滤器</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Filter</span> <span class="token function">createOutputFilter</span><span class="token punctuation">(</span>
        <span class="token class-name">OutputStream</span> out<span class="token punctuation">,</span> <span class="token class-name">OutputLevel</span> outputLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个类，在<code>jshell</code>中只需几行代码，就可以启动一个最小但定制的<strong>文件服务器</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token keyword">var</span> server <span class="token operator">=</span> <span class="token class-name">SimpleFileServer</span><span class="token punctuation">.</span><span class="token function">createFileServer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt; <span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;/some/path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SimpleFileServer<span class="token punctuation">.</span>OutputLevel</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jshell<span class="token operator">&gt;</span> server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相当于命令行模式的：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>jwebserver <span class="token parameter variable">-p</span> <span class="token number">8080</span> <span class="token parameter variable">-d</span> /some/path <span class="token parameter variable">-o</span> info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="自定义处理程序和过滤器" tabindex="-1"><a class="header-anchor" href="#自定义处理程序和过滤器"><span>自定义处理程序和过滤器</span></a></h3><p>将自定义的<strong>文件服务器处理程序</strong>添加到现有服务器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token class-name">SimpleFileServer</span><span class="token punctuation">.</span><span class="token function">createFileHandler</span><span class="token punctuation">(</span><span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;/some/path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jshell<span class="token operator">&gt;</span> <span class="token keyword">var</span> server <span class="token operator">=</span> <span class="token class-name">HttpServer</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt; <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;/store/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SomePutHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jshell<span class="token operator">&gt;</span> server<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">&quot;/browse/&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
jshell<span class="token operator">&gt;</span> server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将自定义的<strong>输出过滤器</strong>在创建过程中添加到服务器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token keyword">var</span> filter <span class="token operator">=</span> <span class="token class-name">SimpleFileServer</span><span class="token punctuation">.</span><span class="token function">createOutputFilter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt; <span class="token class-name">OutputLevel</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jshell<span class="token operator">&gt;</span> <span class="token keyword">var</span> server <span class="token operator">=</span> <span class="token class-name">HttpServer</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt; <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;/store/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SomePutHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
jshell<span class="token operator">&gt;</span> server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个例子是由<code>HttpServer</code>和<code>HttpsServer</code>类中的新重载<code>create</code>方法启用的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpServer</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">InetSocketAddress</span> addr<span class="token punctuation">,</span>
                                <span class="token keyword">int</span> backlog<span class="token punctuation">,</span>
                                <span class="token class-name">String</span> root<span class="token punctuation">,</span>
                                <span class="token class-name">HttpHandler</span> handler<span class="token punctuation">,</span>
                                <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> filters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="增强的请求处理-httphandlers" tabindex="-1"><a class="header-anchor" href="#增强的请求处理-httphandlers"><span>增强的请求处理（HttpHandlers）</span></a></h3><p>简单Web服务器的核心功能是<strong>处理程序</strong>。为了与现有代码兼容，我们引入了<code>HttpHandlers</code>类， 提供两个静态方法用于<mark>创建</mark>和<mark>自定义处理程序</mark>，还有<code>Filter</code>类中的新方法用于适配请求：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span>httpserver</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HttpHandlers</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// handleOrElse方法补充条件处理程序</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpHandler</span> <span class="token function">handleOrElse</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&gt;</span></span> handlerTest<span class="token punctuation">,</span>
                                           <span class="token class-name">HttpHandler</span> handler<span class="token punctuation">,</span>
                                           <span class="token class-name">HttpHandler</span> fallbackHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    
    <span class="token comment">// of方法创建具有预设响应状态的处理程序</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpHandler</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">int</span> statusCode<span class="token punctuation">,</span> <span class="token class-name">Headers</span> headers<span class="token punctuation">,</span> <span class="token class-name">String</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token comment">// adaptRequest方法获取预处理过滤器，用于在处理请求之前检查和调整请求的某些属性</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Filter</span> <span class="token function">adaptRequest</span><span class="token punctuation">(</span>
        <span class="token class-name">String</span> description<span class="token punctuation">,</span> <span class="token class-name">UnaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&gt;</span></span> requestOperator<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些方法的用例包括基于请求方法委托交换，创建总是返回特定响应的“canned response”处理程序，或向所有传入请求添加标头。</p><h3 id="请求-request" tabindex="-1"><a class="header-anchor" href="#请求-request"><span>请求（Request）</span></a></h3><p>现有API中，使用HttpExchange类来表达HTTP<mark>请求-响应对</mark>，描述了请求-响应交换的完整可变状态。 然而，并非所有这状态对于处理程序的定制和适配都是必要的。 因此，我们引入了更简单的Request接口，提供<mark>请求</mark>的不可变状态的有限视图。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>
    <span class="token class-name">URI</span> <span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 获取请求的URI</span>
    <span class="token class-name">String</span> <span class="token function">getRequestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 获取请求的方法</span>
    <span class="token class-name">Headers</span> <span class="token function">getRequestHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取请求的标头</span>
    <span class="token comment">// 用于修改请求头部信息</span>
    <span class="token keyword">default</span> <span class="token class-name">Request</span> <span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">String</span> headerName<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headerValues<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这使得可以直接定制现有的处理程序，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 创建一个处理程序，根据请求方法选择对应的处理器，如果请求方法为 PUT，则使用 SomePutHandler，否则使用 SomeHandler</span>
<span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token class-name">HttpHandlers</span><span class="token punctuation">.</span><span class="token function">handleOrElse</span><span class="token punctuation">(</span>r <span class="token operator">-&gt;</span> 
    r<span class="token punctuation">.</span><span class="token function">getRequestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;PUT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SomePutHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SomeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建一个过滤器，用于修改请求头部信息，在请求中添加名为 &quot;Foo&quot; 的头部，值为 &quot;Bar&quot;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token function">adaptRequest</span><span class="token punctuation">(</span><span class="token string">&quot;Add Foo header&quot;</span><span class="token punctuation">,</span> r <span class="token operator">-&gt;</span> r<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;Foo&quot;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建一个 HTTP 服务器，并指定端口为 8080，最大连接数为 10，根路径为 &quot;/&quot;，处理程序为 h，过滤器为 f</span>
<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token class-name">HttpServer</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> h<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 启动服务器</span>
s<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="替代品" tabindex="-1"><a class="header-anchor" href="#替代品"><span>替代品</span></a></h2><p><strong>命令行工具</strong>的替代方案：</p><ul><li>最初，使用 <code>java -m jdk.httpserver</code> 命令运行 Simple Web Server，没有专门的命令行工具</li><li>为了提高便利性和可访问性，我们引入了一个专门的工具 <code>jwebserver</code><ul><li>实际上 <code>jwebserver</code> 在后台使用了 <code>java -m ...</code> 命令</li></ul></li></ul><p><strong>API编程方式</strong>替代方案：</p><ul><li>新的 <code>DelegatingHandler</code> 类：捆绑定制方法在一个单独的类中，但由于引入了新类型并未添加更多功能，我们放弃了这个选项。</li><li>将 <code>HttpHandler</code> 作为服务：将 <code>HttpHandler</code> 转换为服务，并提供内部文件服务器处理程序实现。然而，这种方法对于我们要提供的功能来说过于复杂。</li><li>使用<strong>过滤器</strong>而不是 <code>HttpHandler</code>：仅使用过滤器来处理请求，但这样做不符合直觉，并且过滤器的方法会更难找到。</li></ul>`,45),c=[p];function o(l,i){return s(),a("div",null,c)}const d=n(t,[["render",o],["__file","jep408-simple-web-server.html.vue"]]),k=JSON.parse('{"path":"/md/java/features/Java18/jep408-simple-web-server.html","title":"Java 18 新特性：简单Web服务器","lang":"zh-CN","frontmatter":{"title":"Java 18 新特性：简单Web服务器","shortTitle":null,"description":"Java 18 新特性：简单Web服务器 Java 18 引入了简单Web服务器（Simple Web Server），一个专为教育或非正式任务设计的最小HTTP服务器，为单个目录层次结构提供服务。 基于JDK中的com.sun.net.httpserver包实现，旨在简化服务器的创建和请求处理过程。 主要特点： 不能替代成熟的商业服务器，如Jetty...","icon":null,"cover":null,"author":"流浪码客","isOriginal":true,"sticky":false,"star":false,"date":"2024-01-02T00:00:00.000Z","category":"Java Features","tag":["java"],"order":408,"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/java/features/Java18/jep408-simple-web-server.html"}],["meta",{"property":"og:title","content":"Java 18 新特性：简单Web服务器"}],["meta",{"property":"og:description","content":"Java 18 新特性：简单Web服务器 Java 18 引入了简单Web服务器（Simple Web Server），一个专为教育或非正式任务设计的最小HTTP服务器，为单个目录层次结构提供服务。 基于JDK中的com.sun.net.httpserver包实现，旨在简化服务器的创建和请求处理过程。 主要特点： 不能替代成熟的商业服务器，如Jetty..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-16T11:19:57.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-01-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-16T11:19:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 18 新特性：简单Web服务器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-16T11:19:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"命令行工具","slug":"命令行工具","link":"#命令行工具","children":[{"level":3,"title":"支持的命令行选项","slug":"支持的命令行选项","link":"#支持的命令行选项","children":[]}]},{"level":2,"title":"API编程方式","slug":"api编程方式","link":"#api编程方式","children":[{"level":3,"title":"简单文件服务器（SimpleFileServer）","slug":"简单文件服务器-simplefileserver","link":"#简单文件服务器-simplefileserver","children":[]},{"level":3,"title":"自定义处理程序和过滤器","slug":"自定义处理程序和过滤器","link":"#自定义处理程序和过滤器","children":[]},{"level":3,"title":"增强的请求处理（HttpHandlers）","slug":"增强的请求处理-httphandlers","link":"#增强的请求处理-httphandlers","children":[]},{"level":3,"title":"请求（Request）","slug":"请求-request","link":"#请求-request","children":[]}]},{"level":2,"title":"替代品","slug":"替代品","link":"#替代品","children":[]}],"git":{"createdTime":1758021597000,"updatedTime":1758021597000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":1}]},"readingTime":{"minutes":5.47,"words":1640},"filePathRelative":"md/java/features/Java18/jep408-simple-web-server.md","localizedDate":"2024年1月2日","excerpt":"\\n<p>Java 18 引入了<strong>简单Web服务</strong>器（Simple Web Server），一个专为教育或非正式任务设计的最小HTTP服务器，为单个目录层次结构提供服务。\\n基于JDK中的<code>com.sun.net.httpserver</code>包实现，旨在简化服务器的创建和请求处理过程。</p>\\n<p>主要特点：</p>\\n<ul>\\n<li>不能替代成熟的商业服务器，如<code>Jetty</code>、<code>Nginx</code> 和 <code>Apache Tomcat</code>等</li>\\n<li>不提供身份验证、访问控制或加密等安全功能</li>\\n<li>仅支持HTTP/1.1，不支持HTTPS</li>\\n<li>仅支持GET、HEAD请求，否则返回 501 Not Implemented 或 405 Not Allowed</li>\\n</ul>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{d as comp,k as data};
