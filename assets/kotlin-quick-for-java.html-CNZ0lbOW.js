import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as i,a as n,b as a,d as t,e}from"./app-CARt6Xo2.js";const c={},u=e(`<h1 id="java-程序员快速掌握-kotlin" tabindex="-1"><a class="header-anchor" href="#java-程序员快速掌握-kotlin"><span>Java 程序员快速掌握 Kotlin</span></a></h1><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>下面是 Java 和 Kotlin 数据类型的对比与 Kotlin 示例讲解：</p><p><strong>1️⃣ 基本类型（Primitive Types）</strong></p><ul><li><strong>Java</strong>：有原生类型（<code>int</code>、<code>double</code>）和包装类型（<code>Integer</code>、<code>Double</code>）。</li><li><strong>Kotlin</strong>：所有基本类型都是对象，没有 primitive/wrapper 区分。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span>      <span class="token comment">// 显式声明</span>
<span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token number">20</span>           <span class="token comment">// 类型推断为 Int</span>
<span class="token keyword">val</span> pi <span class="token operator">=</span> <span class="token number">3.14</span>        <span class="token comment">// 类型推断为 Double</span>
<span class="token keyword">val</span> flag<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">val</span> ch<span class="token operator">:</span> Char <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Int: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">a</span></span><span class="token string">, Double: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">pi</span></span><span class="token string">, Boolean: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">flag</span></span><span class="token string">, Char: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">ch</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>2️⃣ 空安全（Null Safety）</strong></p><ul><li><strong>Java</strong>：引用类型可为 <code>null</code>，容易 NPE。</li><li><strong>Kotlin</strong>：默认不可空，可空类型用 <code>?</code> 声明。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> str<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span>    <span class="token comment">// 非空</span>
<span class="token comment">// str = null  // ❌ 编译错误</span>

<span class="token keyword">var</span> str2<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>     <span class="token comment">// 可空</span>
<span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token operator">?</span><span class="token punctuation">.</span>length <span class="token operator">?:</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">// 安全调用 + Elvis 操作符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展：</p><ul><li><code>?.</code> 安全调用操作符，避免 NPE。</li><li><code>?:</code> Elvis 操作符，当左侧为 null 时使用右侧默认值。</li><li><code>!!</code> 非空断言，可能抛 NPE，不推荐随意使用。</li></ul><hr><p><strong>3️⃣ 字符串（String）</strong></p><ul><li><strong>Java</strong>：用 <code>+</code> 拼接字符串。</li><li><strong>Kotlin</strong> 支持字符串模板 <code>$variable</code> 和多行字符串 <code>&quot;&quot;&quot; ... &quot;&quot;&quot;</code></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Tom&quot;</span></span>
<span class="token keyword">val</span> msg <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span>
<span class="token keyword">val</span> multiLine <span class="token operator">=</span> <span class="token string-literal multiline"><span class="token string">&quot;&quot;&quot;
    多行字符串示例：
    第一行
    第二行
&quot;&quot;&quot;</span></span><span class="token punctuation">.</span><span class="token function">trimIndent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>multiLine<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>4️⃣ 数组（Array）</strong></p><ul><li><strong>Java</strong>：<code>int[] arr = {1, 2, 3};</code></li><li><strong>Kotlin</strong>：统一用 <code>Array&lt;T&gt;</code>，也有专门的基本类型数组：<code>IntArray</code>, <code>DoubleArray</code>。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> arr2<span class="token operator">:</span> IntArray <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>5️⃣ 集合（Collections）</strong></p><ul><li><strong>Java</strong>：默认可变集合。</li><li><strong>Kotlin</strong>：区分 <strong>只读</strong> 和 <strong>可变</strong> 集合。 <ul><li><code>List</code>、<code>Set</code>、<code>Map</code> → 只读</li><li><code>MutableList</code>、<code>MutableSet</code>、<code>MutableMap</code> → 可变</li></ul></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> list<span class="token operator">:</span> List<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">val</span> mList<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;x&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;y&quot;</span></span><span class="token punctuation">)</span>
mList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>6️⃣ 类型检查与智能转换（Smart Cast）</strong></p><ul><li><strong>Java</strong>：需要 <code>(String)obj</code> 强制转换。</li><li><strong>Kotlin</strong>：用 <code>is</code> 判断类型后，编译器自动推断类型。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> obj<span class="token operator">:</span> Any <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;I am a String&quot;</span></span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">is</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;长度: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">obj<span class="token punctuation">.</span>length</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment">// 自动转换为 String</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>7️⃣ 类型转换</strong></p><ul><li><strong>Java</strong>：自动装箱/拆箱。</li><li><strong>Kotlin</strong> 不会自动扩大或缩小数字类型，需要显式 <code>toXXX()</code>。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> x<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">val</span> y<span class="token operator">:</span> Long <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 必须调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>8️⃣ 特殊类型</strong></p><ul><li><strong>Any</strong>：类似 Java 的 <code>Object</code>，所有非空类型的超类</li><li><strong>Unit</strong>：类似 Java 的 <code>void</code>，但是真正的类型</li><li><strong>Nothing</strong>：表示“不会有值”，用于抛异常或死循环</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">fail</span><span class="token punctuation">(</span>message<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Nothing <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>9️⃣ 枚举（Enum）</strong></p><ul><li><strong>Java</strong>：<code>enum</code>。</li><li><strong>Kotlin</strong>：<code>enum class</code>，功能类似，但可结合 <code>when</code> 表达式使用更优雅。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">enum</span> <span class="token keyword">class</span> Direction <span class="token punctuation">{</span> NORTH<span class="token punctuation">,</span> SOUTH<span class="token punctuation">,</span> WEST<span class="token punctuation">,</span> EAST <span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">move</span><span class="token punctuation">(</span>dir<span class="token operator">:</span> Direction<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">when</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Direction<span class="token punctuation">.</span>NORTH <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;向北走&quot;</span></span>
    Direction<span class="token punctuation">.</span>SOUTH <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;向南走&quot;</span></span>
    Direction<span class="token punctuation">.</span>WEST <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;向西走&quot;</span></span>
    Direction<span class="token punctuation">.</span>EAST <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;向东走&quot;</span></span>
<span class="token punctuation">}</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">move</span><span class="token punctuation">(</span>Direction<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>Java ↔ Kotlin 数据类型速查表</strong></p><table><thead><tr><th>Java</th><th>Kotlin</th></tr></thead><tbody><tr><td>int</td><td>Int</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>char</td><td>Char</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>String</td><td>String</td></tr><tr><td>Object</td><td>Any</td></tr><tr><td>void</td><td>Unit</td></tr></tbody></table><p><strong>参考：</strong></p>`,44),r={href:"https://pl.kotl.in/28omCucvR?theme=darcula",target:"_blank",rel:"noopener noreferrer"},k={href:"https://kotlinlang.org/docs/basic-types.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://kotlinlang.org/docs/java-interop.html",target:"_blank",rel:"noopener noreferrer"},v=e(`<h2 id="条件与循环控制语句" tabindex="-1"><a class="header-anchor" href="#条件与循环控制语句"><span>条件与循环控制语句</span></a></h2><p>下面是 Java 和 Kotlin 条件控制语句的对比与 Kotlin 示例讲解：</p><p><strong>1️⃣ if 表达式</strong></p><ul><li>Java 和 Kotlin 都有 if，但 Kotlin 的 if 是表达式，可以有返回值。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">val</span> max <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> a <span class="token keyword">else</span> b
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;较大值: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">max</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>2️⃣ when 表达式（替代 switch）</strong></p><ul><li>Kotlin 用 <code>when</code> 替代 Java 的 <code>switch</code>，更强大灵活。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">describe</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Any<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span>
    <span class="token keyword">when</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span> <span class="token operator">-&gt;</span> obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 1~10 返回本身</span>
        <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;字符串 Hello&quot;</span></span>
        <span class="token keyword">is</span> Long <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Long 类型&quot;</span></span>
        <span class="token operator">!</span><span class="token keyword">is</span> String <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;不是字符串&quot;</span></span>
        <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;未知&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token number">100L</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>3️⃣ for 循环</strong></p><ul><li>Kotlin 没有传统的 <code>for(;;)</code> 循环，常用区间和集合遍历。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>4️⃣ while 和 do...while</strong></p><ul><li>用法与 Java 基本一致。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">x</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>
    x<span class="token operator">--</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>总结表：</strong></p><table><thead><tr><th>Java</th><th>Kotlin</th></tr></thead><tbody><tr><td>if/else</td><td>if/else</td></tr><tr><td>switch</td><td>when</td></tr><tr><td>for(;😉</td><td>for-in</td></tr><tr><td>while</td><td>while</td></tr><tr><td>do...while</td><td>do...while</td></tr></tbody></table><p>Kotlin 的条件控制语句更简洁、表达力更强，推荐多用表达式风格。</p><h2 id="in和区间" tabindex="-1"><a class="header-anchor" href="#in和区间"><span>In和区间</span></a></h2><p>Kotlin 的 <code>in</code> 关键字和区间（Range）用于判断元素是否在某个范围内，常用于条件判断和循环。</p><p><strong>1️⃣ 区间的创建与遍历</strong></p><ul><li>使用 <code>..</code> 创建闭区间（包含两端）。</li><li><code>in</code> 判断元素是否在区间内。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> range <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">5</span>         <span class="token comment">// 1,2,3,4,5</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> range<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">in</span> range<span class="token punctuation">)</span>      <span class="token comment">// true</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token keyword">in</span> range<span class="token punctuation">)</span>     <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>2️⃣ 降序区间与步长</strong></p><ul><li><code>downTo</code> 创建降序区间，<code>step</code> 设置步长。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">5</span> downTo <span class="token number">1</span> step <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>         <span class="token comment">// 输出: 5 3 1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>3️⃣ until 创建半开区间</strong></p><ul><li><code>until</code> 创建左闭右开区间（不包含右端）。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> until <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>         <span class="token comment">// 输出: 1 2 3 4</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>4️⃣ 字符和集合也支持 in</strong></p><ul><li><code>in</code> 可用于判断字符、集合等是否包含某元素。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> chars <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token operator">..</span><span class="token char">&#39;z&#39;</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token char">&#39;c&#39;</span> <span class="token keyword">in</span> chars<span class="token punctuation">)</span>    <span class="token comment">// true</span>

<span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span> <span class="token keyword">in</span> list<span class="token punctuation">)</span>     <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>总结：</strong></p><ul><li><code>in</code> 用于区间、集合的包含判断。</li><li>区间常用于循环、条件判断，语法简洁。</li></ul><h2 id="循环控制" tabindex="-1"><a class="header-anchor" href="#循环控制"><span>循环控制</span></a></h2><p>Kotlin 的循环控制语句主要包括 <code>break</code>、<code>continue</code> 和带标签的跳转，功能比 Java 更灵活。</p><p><strong>1️⃣ break 和 continue</strong></p><ul><li><code>break</code>：跳出最近一层循环。</li><li><code>continue</code>：跳过本次循环，进入下一次。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">break</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>   <span class="token comment">// 输出: 1 2</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>   <span class="token comment">// 输出: 1 3 5</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2️⃣ 带标签的 break/continue</strong></p><ul><li>Kotlin 支持为循环加标签，配合 <code>break</code>/<code>continue</code> 跳出多层循环。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token label symbol">tag@</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token label symbol">@tag</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">j</span></span><span class="token string">) &quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出: (1,1) (1,2) (1,3) (2,1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3️⃣ return 用于 Lambda</strong></p><ul><li>在 Lambda 表达式中，<code>return</code> 默认跳出整个函数。</li><li>用标签 <code>return@label</code> 只跳出当前 Lambda。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token label symbol">@forEach</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>   <span class="token comment">// 输出: 1 2 4</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>总结：</strong></p><ul><li><code>break</code>/<code>continue</code> 用于控制循环流程。</li><li>标签让多层循环跳转更灵活。</li><li>Lambda 中用 <code>return@label</code> 精确控制跳出范围。</li></ul><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><p>Kotlin 的函数（Function）语法简洁，支持多种声明和调用方式，适合 Java 程序员快速上手。</p><p><strong>1️⃣ 基本函数声明与调用</strong></p><ul><li>使用 <code>fun</code> 关键字定义函数，参数类型在后，返回值类型用 <code>: 类型</code> 指定。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 输出: 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>2️⃣ 表达式函数体</strong></p><ul><li>如果函数体只有一行，可以用 <code>=</code> 简化。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> a <span class="token keyword">else</span> b
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 输出: 7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>3️⃣ 默认参数与命名参数</strong></p><ul><li>参数可设置默认值，调用时可按名称传参。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;World&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">// 输出: Hello, World</span>
<span class="token function">greet</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span><span class="token punctuation">)</span>      <span class="token comment">// 输出: Hello, Kotlin</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>4️⃣ 可变参数（vararg）</strong></p><ul><li>用 <code>vararg</code> 声明可变参数，类似 Java 的 <code>...</code>。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">printAll</span><span class="token punctuation">(</span><span class="token keyword">vararg</span> items<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> items<span class="token punctuation">)</span> <span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">printAll</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;B&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>5️⃣ 单表达式返回 Unit 可省略</strong></p><ul><li>没有返回值时，<code>Unit</code> 可省略。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p><strong>6️⃣ Lambda 表达式</strong></p><ul><li>支持匿名函数和 Lambda，常用于集合操作。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
list<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>总结表：</strong></p><table><thead><tr><th>Java</th><th>Kotlin</th></tr></thead><tbody><tr><td>public int sum(int)</td><td>fun sum(a: Int): Int</td></tr><tr><td>void func()</td><td>fun func()</td></tr><tr><td>可变参数 ...</td><td>vararg</td></tr><tr><td>默认参数无</td><td>默认参数/命名参数</td></tr></tbody></table><p>Kotlin 函数语法更灵活，推荐多用表达式和默认参数风格。</p><h2 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象"><span>类和对象</span></a></h2><p>Kotlin 文件支持声明多个类、接口、函数等。每个 Kotlin 源文件可以包含任意数量的类和顶层函数，不要求一个文件只能有一个类，也不要求类名与文件名一致。这比 Java 更灵活。</p><p><strong>1️⃣ 类的声明与构造函数</strong></p><ul><li>用 <code>class</code> 关键字声明类，主构造函数直接写在类名后。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token comment">// 带主构造函数的类</span>
<span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span>

<span class="token keyword">val</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Tom&quot;</span></span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">p<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">p<span class="token punctuation">.</span>age</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>2️⃣ 属性与方法</strong></p><ul><li>属性用 <code>val</code>（只读）或 <code>var</code>（可变）声明，方法用 <code>fun</code>。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">: 汪汪！&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> d <span class="token operator">=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;旺财&quot;</span></span><span class="token punctuation">)</span>
d<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>3️⃣ 继承与重写</strong></p><ul><li>类默认 <code>final</code>，要继承需加 <code>open</code>。重写方法用 <code>override</code>。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token keyword">open</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;动物叫声&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token keyword">override</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Animal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">: 喵喵！&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> c <span class="token operator">=</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;小花&quot;</span></span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span><span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>4️⃣ 数据类（data class）</strong></p><ul><li>自动生成 <code>equals</code>、<code>hashCode</code>、<code>toString</code> 等，适合存储数据。</li><li>使用 <code>val</code>（只读属性）会自动生成的 <code>getter</code></li><li>使用 <code>var</code>（可变属性）会自动生成的 <code>getter</code>和<code>setter</code></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span>
<span class="token keyword">val</span> u <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Alice&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>5️⃣ 单例对象（object）</strong></p><ul><li>用 <code>object</code> 声明单例。</li><li><strong>本质上是“饿汉式单例”</strong>，但带有 <strong>延迟初始化特性</strong></li><li>Kotlin 编译器会在背后生成静态字段和 <code>&lt;clinit&gt;</code> 方法来保证初始化是线程安全的。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span> Counter <span class="token punctuation">{</span>
    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">fun</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">++</span>count
<span class="token punctuation">}</span>
Counter<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>Counter<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>6️⃣ 伴生对象（companion object）</strong></p><ul><li>类的静态成员用 <code>companion object</code>。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Utils <span class="token punctuation">{</span>
    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>
        <span class="token keyword">fun</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello from Utils&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
Utils<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>总结表：</strong></p><table><thead><tr><th>Java</th><th>Kotlin</th></tr></thead><tbody><tr><td>class</td><td>class</td></tr><tr><td>extends</td><td>: 父类</td></tr><tr><td>final</td><td>默认 final，需 open 才能继承</td></tr><tr><td>static</td><td>companion object</td></tr><tr><td>单例</td><td>object</td></tr><tr><td>数据类无</td><td>data class</td></tr></tbody></table><p>Kotlin 类和对象语法更简洁，支持数据类、单例、伴生对象等现代特性。</p><h2 id="访问和属性修饰符" tabindex="-1"><a class="header-anchor" href="#访问和属性修饰符"><span>访问和属性修饰符</span></a></h2><p>Kotlin 的访问和属性修饰符与 Java 类似，但更简洁灵活。常用修饰符如下：</p><p><strong>1️⃣ 访问修饰符（Visibility Modifiers）</strong></p><ul><li><code>public</code>：默认，任何地方可见。</li><li><code>internal</code>：同一模块内可见（Kotlin 独有）。</li><li><code>protected</code>：子类可见（仅用于类成员）。</li><li><code>private</code>：当前类/文件可见。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Foo <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> a <span class="token operator">=</span> <span class="token number">1</span>      <span class="token comment">// 仅 Foo 内可见</span>
    <span class="token keyword">protected</span> <span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token number">2</span>    <span class="token comment">// Foo 及子类可见</span>
    <span class="token keyword">internal</span> <span class="token keyword">val</span> c <span class="token operator">=</span> <span class="token number">3</span>     <span class="token comment">// 同模块可见</span>
    <span class="token keyword">val</span> d <span class="token operator">=</span> <span class="token number">4</span>              <span class="token comment">// public，任何地方可见</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>2️⃣ 属性修饰符</strong></p><ul><li><code>val</code>：只读属性（类似 Java 的 final）。</li><li><code>var</code>：可变属性。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p><strong>3️⃣ 其他常用修饰符</strong></p><ul><li><code>open</code>：允许被继承或重写（Kotlin 类默认 final）。</li><li><code>final</code>：禁止继承或重写（默认）。</li><li><code>abstract</code>：抽象类或方法，不能实例化。</li><li><code>override</code>：重写父类成员。</li><li><code>lateinit</code>：延迟初始化（仅用于 var，非基本类型）。</li><li><code>const</code>：编译时常量（只能用于顶层或 object 的 val）。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">class</span> Animal
<span class="token keyword">abstract</span> <span class="token keyword">class</span> Shape <span class="token punctuation">{</span> <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">class</span> Cat <span class="token operator">:</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>总结表：</strong></p><table><thead><tr><th>Java</th><th>Kotlin</th><th>说明</th></tr></thead><tbody><tr><td>public</td><td>public</td><td>公开</td></tr><tr><td>protected</td><td>protected</td><td>受保护</td></tr><tr><td>private</td><td>private</td><td>私有</td></tr><tr><td>default</td><td>internal</td><td>同包/同模块可见</td></tr><tr><td>final</td><td>final（默认）</td><td>默认不可继承</td></tr><tr><td>abstract</td><td>abstract</td><td>抽象</td></tr><tr><td>static</td><td>companion obj</td><td>伴生对象实现静态成员</td></tr><tr><td>final field</td><td>val</td><td>只读属性</td></tr></tbody></table><p>Kotlin 的修饰符更细致，<code>internal</code> 和 <code>open</code> 是常用的 Kotlin 特有特性。</p><h2 id="类的继承与重写" tabindex="-1"><a class="header-anchor" href="#类的继承与重写"><span>类的继承与重写</span></a></h2><p>Kotlin 的类继承与重写比 Java 更安全简洁，默认所有类和方法都是 final，需显式声明 <code>open</code> 才能被继承或重写。</p><p><strong>1️⃣ 基本继承语法</strong></p><ul><li>用 <code>open</code> 修饰父类和可重写方法。</li><li>子类用 <code>:</code> 继承父类，重写用 <code>override</code>。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token keyword">open</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;动物叫声&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token keyword">override</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Animal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">: 汪汪！&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> d <span class="token operator">=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;旺财&quot;</span></span><span class="token punctuation">)</span>
d<span class="token punctuation">.</span><span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 旺财: 汪汪！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>2️⃣ 构造函数与属性重写</strong></p><ul><li>子类主构造函数需调用父类构造函数。</li><li>可以重写父类的 <code>val</code>/<code>var</code> 属性。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">open</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">override</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> grade<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>3️⃣ 方法重写与 super</strong></p><ul><li>用 <code>override</code> 重写方法，<code>super</code> 调用父类实现。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">class</span> Parent <span class="token punctuation">{</span>
    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Parent hello&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> Child <span class="token operator">:</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Child hello&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>4️⃣ 抽象类与方法</strong></p><ul><li>用 <code>abstract</code> 声明抽象类/方法，子类必须实现。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> Shape <span class="token punctuation">{</span>
    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Double
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token keyword">val</span> r<span class="token operator">:</span> Double<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> r <span class="token operator">*</span> r
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>总结表：</strong></p><table><thead><tr><th>Java</th><th>Kotlin</th></tr></thead><tbody><tr><td>extends</td><td>: 父类</td></tr><tr><td>@Override</td><td>override</td></tr><tr><td>abstract</td><td>abstract</td></tr><tr><td>super</td><td>super</td></tr><tr><td>final</td><td>默认 final，需 open</td></tr></tbody></table><p>Kotlin 继承机制更安全，需显式声明可继承/可重写，推荐优先使用组合而非继承。</p><h2 id="抽象-嵌套和内部类" tabindex="-1"><a class="header-anchor" href="#抽象-嵌套和内部类"><span>抽象，嵌套和内部类</span></a></h2><p>Kotlin 的抽象类、嵌套类和内部类用法简洁，和 Java 有相似也有不同之处。</p><p><strong>1️⃣ 抽象类与抽象方法</strong></p><ul><li>用 <code>abstract</code> 修饰，不能实例化。</li><li>抽象方法无方法体，子类必须实现。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> Animal <span class="token punctuation">{</span>
    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;睡觉&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> Dog <span class="token operator">:</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;汪汪！&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> d <span class="token operator">=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
d<span class="token punctuation">.</span><span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 输出: 汪汪！</span>
d<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 输出: 睡觉</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>2️⃣ 嵌套类（Nested Class）</strong></p><ul><li>默认静态（类似 Java 的 static class），<u>不能访问外部类成员。</u></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Outer <span class="token punctuation">{</span>
    <span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">class</span> Nested <span class="token punctuation">{</span>
        <span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> n <span class="token operator">=</span> Outer<span class="token punctuation">.</span><span class="token function">Nested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不能访问外部类成员 <strong>3️⃣ 内部类（Inner Class）</strong></p><ul><li>用 <code>inner</code> 修饰，<u>可访问外部类成员。</u></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Outer <span class="token punctuation">{</span>
    <span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token keyword">inner</span> <span class="token keyword">class</span> Inner <span class="token punctuation">{</span>
        <span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> x
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> o <span class="token operator">=</span> <span class="token function">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> i <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 输出: 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>4️⃣ 匿名内部类</strong></p><ul><li>用 <code>object : 接口/父类 {}</code> 创建匿名类实例。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Clickable <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> btn <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> Clickable <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Clicked!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
btn<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>总结表：</strong></p><table><thead><tr><th>Java</th><th>Kotlin</th><th>说明</th></tr></thead><tbody><tr><td>abstract class</td><td>abstract class</td><td>抽象类</td></tr><tr><td>static class</td><td>class Nested</td><td>嵌套类，默认静态</td></tr><tr><td>inner class</td><td>inner class</td><td>内部类，访问外部成员</td></tr><tr><td>匿名内部类</td><td>object : ... {}</td><td>匿名对象/类</td></tr></tbody></table><p>Kotlin 嵌套类默认静态，内部类需 <code>inner</code>，匿名类用 <code>object</code>。抽象类和方法用法与 Java 类似。</p><h2 id="接口与接口实现" tabindex="-1"><a class="header-anchor" href="#接口与接口实现"><span>接口与接口实现</span></a></h2><p>Kotlin 的接口（interface）用法与 Java 类似，但更灵活，支持默认实现、多接口继承等。</p><p><strong>1️⃣ 接口声明与实现</strong></p><ul><li>用 <code>interface</code> 关键字声明接口，方法可有默认实现。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Clickable <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">showOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m clickable!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>2️⃣ 类实现接口</strong></p><ul><li>用 <code>:</code> 实现接口，必须实现未提供默认实现的方法。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Button <span class="token operator">:</span> Clickable <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Button clicked&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> btn <span class="token operator">=</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
btn<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 输出: Button clicked</span>
btn<span class="token punctuation">.</span><span class="token function">showOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 输出: I&#39;m clickable!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>3️⃣ 多接口实现与冲突解决</strong></p><ul><li>支持多接口实现，若有<u>同名方法需显式指定实现。</u></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Focusable <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">showOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m focusable!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> MyButton <span class="token operator">:</span> Clickable<span class="token punctuation">,</span> Focusable <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;MyButton clicked&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">showOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token operator">&lt;</span>Clickable<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">showOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">super</span><span class="token operator">&lt;</span>Focusable<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">showOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>4️⃣ 接口属性</strong></p><ul><li>接口可声明属性，但不能有状态，只能有 <code>getter</code>。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Named <span class="token punctuation">{</span>
    <span class="token keyword">val</span> name<span class="token operator">:</span> String
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">override</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> Named
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>总结表：</strong></p><table><thead><tr><th>Java</th><th>Kotlin</th><th>说明</th></tr></thead><tbody><tr><td>interface</td><td>interface</td><td>接口声明</td></tr><tr><td>implements</td><td>: 接口</td><td>实现接口</td></tr><tr><td>default</td><td>默认实现</td><td>支持方法默认实现</td></tr><tr><td>多接口</td><td>多接口</td><td>支持多接口继承</td></tr></tbody></table><p>Kotlin 接口支持默认实现、多继承，语法更简洁灵活。</p><h2 id="数据类-伴生类-枚举类" tabindex="-1"><a class="header-anchor" href="#数据类-伴生类-枚举类"><span>数据类，伴生类，枚举类</span></a></h2><p><strong>1️⃣ 数据类（data class）</strong></p><ul><li>用 <code>data class</code> 声明，自动生成 <code>equals</code>、<code>hashCode</code>、<code>toString</code>、<code>copy</code> 等方法，适合只用于存储数据的类。</li><li>主构造函数参数需用 <code>val</code> 或 <code>var</code> 修饰。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span>

<span class="token keyword">val</span> u1 <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Alice&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">val</span> u2 <span class="token operator">=</span> u1<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Bob&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">)</span>         <span class="token comment">// User(id=1, name=Alice)</span>
<span class="token function">println</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span>         <span class="token comment">// User(id=1, name=Bob)</span>
<span class="token function">println</span><span class="token punctuation">(</span>u1 <span class="token operator">==</span> u2<span class="token punctuation">)</span>   <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ul><li>自动实现结构相等（==）、解构、复制等。</li><li>常用于 DTO、VO、简单实体。</li></ul><hr><p><strong>2️⃣ 伴生对象（companion object）</strong></p><ul><li>Kotlin 没有 static 关键字，静态成员用 <code>companion object</code> 实现。</li><li>伴生对象内的方法和属性可通过类名直接访问。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Utils <span class="token punctuation">{</span>
    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token keyword">val</span> VERSION <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1.0&quot;</span></span>
        <span class="token keyword">fun</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello from Utils&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Utils<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">// 直接通过类名调用</span>
<span class="token function">println</span><span class="token punctuation">(</span>Utils<span class="token punctuation">.</span>VERSION<span class="token punctuation">)</span>  <span class="token comment">// 访问常量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ul><li>每个类最多一个伴生对象。</li><li>伴生对象本身是对象，可以实现接口。</li></ul><hr><p><strong>3️⃣ 枚举类（enum class）</strong></p><ul><li>用 <code>enum class</code> 声明，类似 Java 的枚举。</li><li>可为每个枚举常量定义属性和方法。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token function">Direction</span><span class="token punctuation">(</span><span class="token keyword">val</span> desc<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">NORTH</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;北&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SOUTH</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;南&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WEST</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;西&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">EAST</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;东&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;方向: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">desc</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">val</span> d <span class="token operator">=</span> Direction<span class="token punctuation">.</span>NORTH
<span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>name<span class="token punctuation">)</span>     <span class="token comment">// NORTH</span>
<span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>desc<span class="token punctuation">)</span>     <span class="token comment">// 北</span>
d<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 方向: 北</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ul><li>可结合 <code>when</code> 表达式优雅分支。</li><li>枚举常量可带构造参数和方法。</li></ul><hr><p><strong>总结表：</strong></p><table><thead><tr><th>Java</th><th>Kotlin</th><th>说明</th></tr></thead><tbody><tr><td>POJO/VO</td><td>data class</td><td>数据类，自动方法</td></tr><tr><td>static</td><td>companion object</td><td>伴生对象实现静态成员</td></tr><tr><td>enum</td><td>enum class</td><td>枚举类</td></tr></tbody></table><p>Kotlin 语法更简洁，数据类、伴生对象、枚举类常用于简化业务模型和工具类开发。</p><h2 id="单例和对象表达式" tabindex="-1"><a class="header-anchor" href="#单例和对象表达式"><span>单例和对象表达式</span></a></h2><p>Kotlin 的单例和对象表达式用法非常简洁，适合替代 Java 的 static 工具类、匿名内部类等场景。</p><p><strong>1️⃣ 单例对象（object）</strong></p><ul><li>用 <code>object</code> 关键字声明单例，线程安全，懒加载。</li><li>适合全局唯一实例、工具类、管理器等。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span> Counter <span class="token punctuation">{</span>
    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">fun</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">++</span>count
<span class="token punctuation">}</span>
Counter<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>Counter<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 输出: 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ul><li>编译器自动保证线程安全和唯一性。</li><li>不能有构造函数。</li></ul><hr><p><strong>2️⃣ 伴生对象（companion object）</strong></p><ul><li>用于类的“静态成员”，每个类最多一个伴生对象。</li><li>伴生对象成员可通过类名直接访问。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Utils <span class="token punctuation">{</span>
    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token keyword">val</span> VERSION <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1.0&quot;</span></span>
        <span class="token keyword">fun</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello from Utils&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
Utils<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>Utils<span class="token punctuation">.</span>VERSION<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>3️⃣ 对象表达式（object expression）</strong></p><ul><li>用 <code>object : 父类/接口 {}</code> 创建匿名对象，类似 Java 匿名内部类。</li><li>常用于临时实现接口、回调等。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Clickable <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> btn <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> Clickable <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Clicked!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
btn<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>总结表：</strong></p><table><thead><tr><th>Java</th><th>Kotlin</th><th>说明</th></tr></thead><tbody><tr><td>static 工具类</td><td>object</td><td>单例对象</td></tr><tr><td>static 成员</td><td>companion object</td><td>伴生对象</td></tr><tr><td>匿名内部类</td><td>object expression</td><td>匿名对象/表达式</td></tr></tbody></table><p>Kotlin 单例和对象表达式让代码更简洁，推荐多用 object 替代 static/匿名类。</p><h2 id="密封类和密封接口" tabindex="-1"><a class="header-anchor" href="#密封类和密封接口"><span>密封类和密封接口</span></a></h2><p>Kotlin 的<strong>密封类</strong>（sealed class）和<strong>密封接口</strong>（sealed interface）用于表达受限的继承层次，常用于表达有限集合的状态、结果等，配合 <code>when</code> 表达式更安全。</p><p><strong>1️⃣ 密封类（sealed class）</strong></p><ul><li>用 <code>sealed class</code> 声明，所有子类必须在同一文件中定义。</li><li>适合表达有限状态、结果类型等。</li><li>配合 <code>when</code>，编译器能检查分支是否覆盖所有情况。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> Result
<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Success</span><span class="token punctuation">(</span><span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token keyword">val</span> code<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">object</span> Loading <span class="token operator">:</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">handle</span><span class="token punctuation">(</span>result<span class="token operator">:</span> Result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">is</span> Success <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;成功: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">result<span class="token punctuation">.</span>data</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">is</span> Error <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;错误: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">result<span class="token punctuation">.</span>code</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    Loading <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;加载中&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>2️⃣ 密封接口（sealed interface）</strong></p><ul><li>用 <code>sealed interface</code> 声明，所有实现类也需在同一文件中。</li><li>适合需要多继承的受限类型体系。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">sealed</span> <span class="token keyword">interface</span> UiState
<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">ShowText</span><span class="token punctuation">(</span><span class="token keyword">val</span> text<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> UiState
<span class="token keyword">object</span> ShowLoading <span class="token operator">:</span> UiState
<span class="token keyword">object</span> ShowError <span class="token operator">:</span> UiState
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>3️⃣ 特点与优势</strong></p><ul><li>受限继承，所有子类/实现类可知，<code>when</code> 分支更安全。</li><li>可用于表达状态机、网络请求结果、UI 状态等。</li></ul><hr><p><strong>总结表：</strong></p><table><thead><tr><th>Java</th><th>Kotlin</th><th>说明</th></tr></thead><tbody><tr><td>无直接等价</td><td>sealed class</td><td>密封类，受限继承</td></tr><tr><td>无直接等价</td><td>sealed interface</td><td>密封接口，受限多继承</td></tr><tr><td>enum</td><td>enum/sealed class</td><td>枚举/密封类表达有限集合</td></tr></tbody></table><p>Kotlin 密封类/接口让状态建模更安全，推荐用于有限状态、结果类型等场景。</p><h2 id="扩展函数" tabindex="-1"><a class="header-anchor" href="#扩展函数"><span>扩展函数</span></a></h2><p>扩展函数是 Kotlin 的一大特色，允许你为现有类添加新函数，而无需继承或修改原类，非常适合工具方法、DSL 等场景。下面是扩展函数的核心知识点和示例：</p><p><strong>1️⃣ 基本语法</strong></p><ul><li>扩展函数的声明格式为： <code>fun 接收者类型.函数名(参数): 返回类型 { ... }</code></li><li>扩展函数在调用时和普通成员函数调用一样，但它<strong>不会真正改变类</strong>。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token comment">// 为 String 添加扩展函数</span>
<span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression"><span class="token keyword">this</span></span></span><span class="token string">&quot;</span></span>

<span class="token keyword">val</span> msg <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// Hello, Kotlin</span>
<span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>2️⃣ 扩展属性</strong></p><ul><li>扩展不仅限于函数，也可以添加属性（只能有 getter，没有 backing field）。</li><li>扩展属性不能存储状态，只能通过现有数据计算得到值。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> String<span class="token punctuation">.</span>lastChar<span class="token operator">:</span> Char
    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span><span class="token punctuation">.</span>lastChar<span class="token punctuation">)</span>  <span class="token comment">// n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>3️⃣ 泛型扩展函数</strong></p><ul><li>扩展函数支持泛型，让工具方法更通用。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> List<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>4️⃣ 作用域与静态解析</strong></p><ul><li>扩展函数<strong>不会真正修改类</strong>，调用取决于变量的<strong>声明类型</strong>。</li><li>可以定义在： <ul><li>顶层函数（常用）</li><li>类内部（成员扩展函数）</li><li>伴生对象</li></ul></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">class</span> Parent
<span class="token keyword">class</span> Child<span class="token operator">:</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> Parent<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Parent&quot;</span></span>
<span class="token keyword">fun</span> Child<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Child&quot;</span></span>

<span class="token keyword">val</span> p<span class="token operator">:</span> Parent <span class="token operator">=</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 输出: Parent，静态解析</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>5️⃣ Java 互操作</strong></p><ul><li>在 Java 中，Kotlin 扩展函数表现为 <strong>静态方法</strong>：</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token comment">// Kotlin</span>
<span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression"><span class="token keyword">this</span></span></span><span class="token string">&quot;</span></span>

<span class="token comment">// Java 调用方式</span>
String result <span class="token operator">=</span> MyKotlinFileKt<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>6️⃣ 常见应用：简化统一响应封装</strong></p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token comment">// 假设有一个 R&lt;T&gt; 响应类</span>
<span class="token keyword">class</span> R<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">,</span> <span class="token keyword">val</span> success<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>
        <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">R</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为任意对象添加扩展函数，将其快速包装成 <code>R&lt;T&gt;</code>：</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token comment">// 为任意对象添加扩展函数，将其包装成 R&lt;T&gt;</span>
<span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> Any<span class="token operator">?</span><span class="token operator">&gt;</span> T<span class="token punctuation">.</span><span class="token function">rs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> R<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">=</span> R<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>

<span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">.</span><span class="token function">rs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>success<span class="token punctuation">)</span>  <span class="token comment">// 输出: true</span>
<span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span>     <span class="token comment">// 输出: Hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这样就可以直接使用 <code>对象.rs()</code> 来快速生成统一响应，代码更简洁。</li></ul>`,276);function g(m,b){const s=o("ExternalLinkIcon");return l(),i("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[a("代码笔记：Kotlin 数据类型对比示例（Java 程序员专用）"),t(s)])]),n("li",null,[n("a",k,[a("Kotlin 官方文档-基本类型"),t(s)])]),n("li",null,[n("a",d,[a("Kotlin 与 Java 互操作性"),t(s)])])]),v])}const y=p(c,[["render",g],["__file","kotlin-quick-for-java.html.vue"]]),w=JSON.parse('{"path":"/md/java/kotlin/kotlin-quick-for-java.html","title":"Java 程序员快速掌握 Kotlin","lang":"zh-CN","frontmatter":{"title":"Java 程序员快速掌握 Kotlin","shortTitle":null,"description":"Java 程序员快速掌握 Kotlin 数据类型 下面是 Java 和 Kotlin 数据类型的对比与 Kotlin 示例讲解： 1️⃣ 基本类型（Primitive Types） Java：有原生类型（int、double）和包装类型（Integer、Double）。 Kotlin：所有基本类型都是对象，没有 primitive/wrapper 区分...","icon":null,"cover":null,"author":"流浪码客","isOriginal":true,"sticky":false,"star":false,"date":"2025-09-21T00:00:00.000Z","category":"Kotlin","tags":["Kotlin","Java"],"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/java/kotlin/kotlin-quick-for-java.html"}],["meta",{"property":"og:title","content":"Java 程序员快速掌握 Kotlin"}],["meta",{"property":"og:description","content":"Java 程序员快速掌握 Kotlin 数据类型 下面是 Java 和 Kotlin 数据类型的对比与 Kotlin 示例讲解： 1️⃣ 基本类型（Primitive Types） Java：有原生类型（int、double）和包装类型（Integer、Double）。 Kotlin：所有基本类型都是对象，没有 primitive/wrapper 区分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T09:02:31.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"Kotlin"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2025-09-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-07T09:02:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 程序员快速掌握 Kotlin\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-07T09:02:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":2,"title":"条件与循环控制语句","slug":"条件与循环控制语句","link":"#条件与循环控制语句","children":[]},{"level":2,"title":"In和区间","slug":"in和区间","link":"#in和区间","children":[]},{"level":2,"title":"循环控制","slug":"循环控制","link":"#循环控制","children":[]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"类和对象","slug":"类和对象","link":"#类和对象","children":[]},{"level":2,"title":"访问和属性修饰符","slug":"访问和属性修饰符","link":"#访问和属性修饰符","children":[]},{"level":2,"title":"类的继承与重写","slug":"类的继承与重写","link":"#类的继承与重写","children":[]},{"level":2,"title":"抽象，嵌套和内部类","slug":"抽象-嵌套和内部类","link":"#抽象-嵌套和内部类","children":[]},{"level":2,"title":"接口与接口实现","slug":"接口与接口实现","link":"#接口与接口实现","children":[]},{"level":2,"title":"数据类，伴生类，枚举类","slug":"数据类-伴生类-枚举类","link":"#数据类-伴生类-枚举类","children":[]},{"level":2,"title":"单例和对象表达式","slug":"单例和对象表达式","link":"#单例和对象表达式","children":[]},{"level":2,"title":"密封类和密封接口","slug":"密封类和密封接口","link":"#密封类和密封接口","children":[]},{"level":2,"title":"扩展函数","slug":"扩展函数","link":"#扩展函数","children":[]}],"git":{"createdTime":1758478017000,"updatedTime":1759827751000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":3}]},"readingTime":{"minutes":16.74,"words":5022},"filePathRelative":"md/java/kotlin/kotlin-quick-for-java.md","localizedDate":"2025年9月21日","excerpt":"\\n<h2>数据类型</h2>\\n<p>下面是 Java 和 Kotlin 数据类型的对比与 Kotlin 示例讲解：</p>\\n<p><strong>1️⃣ 基本类型（Primitive Types）</strong></p>\\n<ul>\\n<li><strong>Java</strong>：有原生类型（<code>int</code>、<code>double</code>）和包装类型（<code>Integer</code>、<code>Double</code>）。</li>\\n<li><strong>Kotlin</strong>：所有基本类型都是对象，没有 primitive/wrapper 区分。</li>\\n</ul>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{y as comp,w as data};
