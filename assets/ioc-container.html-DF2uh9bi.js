import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as l,a as n,b as a,d as t,e}from"./app-CARt6Xo2.js";const i={},r=n("h1",{id:"ioc-容器-container",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ioc-容器-container"},[n("span",null,"IoC 容器（Container）")])],-1),u=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),d=n("blockquote",null,[n("p",null,[a("Spring IoC（控制反转）容器是Spring框架的核心。 "),n("code",null,"org.springframework.context.ApplicationContext"),a("接口代表Spring IoC容器，负责实例化、配置和组装"),n("code",null,"Bean"),a("。")])],-1),k=n("p",null,"Spring提供了几个 ApplicationContext 接口的实现，在独立应用程序中，最常用的是：",-1),m={href:"https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/support/FileSystemXmlApplicationContext.html",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,"等等",-1),h=e("<p><strong>支持以XML、Java注释或Java代码作为配置元数据的格式</strong></p><p>虽然<code>XML</code>一直是定义配置元数据的传统格式， 但你可以通过提供少量的<code>XML</code>配置来指定容器使用<code>Java注解</code>或<code>Java代码</code>作为元数据格式。 以声明式方式启用对这些元数据格式的支持，从而更灵活地定义应用程序的配置信息。</p><p><strong>为Web应用程序提供方便的ApplicationContext实例化</strong></p>",3),b=n("strong",null,"Spring IoC",-1),f=n("code",null,"web.xml",-1),_={href:"https://docs.spring.io/spring-framework/reference/core/beans/context-introduction.html#context-create",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"ApplicationContext",-1),q=e('<p><strong>解析Spring框架的工作原理：<mark>应用程序类</mark>与<mark>配置元数据</mark>的整合</strong></p><p>下图表展示了Spring框架的工作原理高层视图。通过将你的应用程序类与配置元数据结合起来， 一旦<code>ApplicationContext</code>被创建和初始化，你就获得了一个完全配置且可执行的系统或应用程序。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403181756387.png" alt="Spring IoC容器" tabindex="0" loading="lazy"><figcaption>Spring IoC容器</figcaption></figure><h2 id="配置元数据" tabindex="-1"><a class="header-anchor" href="#配置元数据"><span>配置元数据</span></a></h2><p>如上图所示，Spring IoC容器消费配置元数据。 这种配置元数据代表了你作为一个应用开发者，如何告诉Spring容器在你的应用中实例化、配置和组装对象。</p>',5),w={class:"hint-container note"},C=n("p",{class:"hint-container-title"},"注",-1),S=n("strong",null,"注意⚠️",-1),A={href:"https://docs.spring.io/spring-framework/reference/core/beans/java.html",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,[a("有关在"),n("code",null,"Spring"),a("容器中使用其他形式的元数据信息，参阅：")],-1),I={href:"https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-collaborators.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://docs.spring.io/spring-framework/reference/core/beans/annotation-config.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://docs.spring.io/spring-framework/reference/core/beans/java.html",target:"_blank",rel:"noopener noreferrer"},X={href:"https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/annotation/Configuration.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/annotation/Bean.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/annotation/Import.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/annotation/DependsOn.html",target:"_blank",rel:"noopener noreferrer"},T=e(`<p>Spring的配置包含至少一个，通常是多个<code>&lt;bean&gt;</code>元素。容器必须管理这些定义的bean。</p><ul><li>XML配置：将这些Bean配置为顶层 <code>&lt;beans/&gt;</code> 元素内的 <code>&lt;bean/&gt;</code> 元素</li><li>Java配置：将这些Bean配置为<code>@Configuration</code>类中的<code>@Bean</code>注解的方法</li></ul><p>这些Bean的定义对应于构成应用程序的实际对象， 如服务层对象，持久层对象（Dao），表示层对象（Web控制器），基础设施对象（JPA EntityManagerFactory），JMS队列等。 通常，人们不会在容器中配置细粒度的<code>domain</code>对象，因为创建和加载<code>domain</code>对象的通常是<code>repository</code>和<code>service</code>层逻辑的责任。</p><p>下面的例子显示了基于XML的配置元数据的基本结构：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>(1) (2)
        <span class="token comment">&lt;!-- 这个bean的协作者和配置在这里 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 这个bean的协作者和配置在这里 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 更多bean 定义在这里 --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>id</code>属性是一个字符串，用于<mark>唯一标识</mark>Bean</li><li><code>class</code>属性是一个字符串，用于指定Bean的<mark>完整类名</mark>（包括包名）</li></ol>`,6),D=n("code",null,"id",-1),M=n("code",null,"ref",-1),F={href:"https://docs.spring.io/spring-framework/reference/core/beans/dependencies.html",target:"_blank",rel:"noopener noreferrer"},N=e(`<h2 id="实例化容器" tabindex="-1"><a class="header-anchor" href="#实例化容器"><span>实例化容器</span></a></h2><p>提供给<code>ApplicationContext</code> 构造函数的一条或多条路径是<mark>资源字符串</mark>，它让容器从各种外部资源（如本地文件系统、Java <code>CLASSPATH</code> 等）加载配置元数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;services.xml&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;daos.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),W={class:"hint-container note"},Z=n("p",{class:"hint-container-title"},"注",-1),U={href:"https://docs.spring.io/spring-framework/reference/core/resources.html",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"URI",-1),E=n("code",null,"InputStream",-1),O=n("code",null,"Resource",-1),V={href:"https://docs.spring.io/spring-framework/reference/core/resources.html#resources-app-ctx",target:"_blank",rel:"noopener noreferrer"},R=e(`<p>以下示例显示了<strong>服务层对象</strong><code>services.xml</code> 配置文件：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
		https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- services --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>petStore<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.samples.jpetstore.services.PetStoreServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itemDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itemDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- 这个bean的协作者和配置在这里 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 更多服务的bean 定义在这里 --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下示例显示<strong>数据访问对象</strong>（data access object）<code>daos.xml</code> 文件：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
		https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountDao<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 这个bean的协作者和配置在这里 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itemDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.samples.jpetstore.dao.jpa.JpaItemDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 这个bean的协作者和配置在这里 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 更多数据访问对象的bean 定义在这里 --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前面的示例中，服务层由 <code>PetStoreServiceImpl</code> 类和两个类型为 <code>JpaAccountDao</code> 和 <code>JpaItemDao</code> 的数据访问对象组成（基于JPA对象-关系映射标准）。</p><ul><li><code>property name</code> 元素指的是<code>JavaBean</code>属性的名称</li><li><code>ref</code> 元素指的是引用另一个<code>Bean</code>定义的名称</li></ul>`,6),H=n("code",null,"id",-1),G=n("code",null,"ref",-1),K={href:"https://docs.spring.io/spring-framework/reference/core/beans/dependencies.html",target:"_blank",rel:"noopener noreferrer"},Q=e(`<h2 id="使用容器" tabindex="-1"><a class="header-anchor" href="#使用容器"><span>使用容器</span></a></h2><p><code>ApplicationContext</code>是一个高级工厂的接口，能够维护不同Bean及其依赖关系的注册表。 通过使用方法 <code>T getBean(String name, Class&lt;T&gt; requiredType)</code>，你可以检索到Bean的实例。</p><p><code>ApplicationContext</code>可以让你读取Bean定义（definition）并访问它们，如下例所示。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 创建和配置Bean</span>
<span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;services.xml&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;daos.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 检索配置的实例</span>
<span class="token class-name">PetStoreService</span> service <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;petStore&quot;</span><span class="token punctuation">,</span> <span class="token class-name">PetStoreService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用配置的实例</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getUsernameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>不直接依赖于Spring的API</strong></p><blockquote><p>理想情况下，应用程序代码不应该直接依赖于Spring的API，而是通过元数据（如自动装配<code>@Autowired</code>注解）声明对特定Bean的依赖。</p></blockquote><p>虽然 ApplicationContext 接口提供了一些检索 Bean 的方法，如 getBean() 等，但在设计上，应该避免直接依赖这些方法。</p><p>例如，Spring与Web框架的集成为各种<strong>Web框架组件</strong>（如Controller控制器和JSF管理的Bean）提供了依赖注入的能力， 使得你可以通过元数据（如<code>@Autowired</code>注解）声明对特定<code>Bean</code>的依赖，而不必直接调用<code>getBean()</code>等方法。 这样可以使代码更加模块化、可维护性更高。</p>`,8);function Y($,nn){const s=p("ExternalLinkIcon");return c(),l("div",null,[r,u,d,k,n("ul",null,[n("li",null,[n("a",m,[a("ClassPathXmlApplicationContext"),t(s)])]),n("li",null,[n("a",g,[a("FileSystemXmlApplicationContext"),t(s)])]),v]),h,n("p",null,[a("在大多数应用场景中，无需手动编写代码来实例化"),b,a("容器； 例如：在Web应用场景中，通常只需要在应用程序的"),f,a("文件中编写 8 行（或更多）"),n("a",_,[a("模板式的Web描述符"),t(s)]),a(" 即可初始化"),x]),q,n("div",w,[C,n("p",null,[S,a("：Spring IoC容器本身与实际配置元数据的编写格式完全解耦。 如今，许多开发者选择使用"),n("a",A,[a("基于Java的容器配置"),t(s)]),a(" 来构建他们的Spring应用程序。")])]),y,n("ul",null,[n("li",null,[n("a",I,[a("基于XML的容器配置"),t(s)])]),n("li",null,[n("a",B,[a("基于注解的容器配置"),t(s)]),a("（Spring 2.5开始支持）")]),n("li",null,[n("a",j,[a("基于Java的容器配置"),t(s)]),a("（Spring 3.0开始支持；参阅 "),n("a",X,[a("@Configuration"),t(s)]),a(", "),n("a",J,[a("@Bean"),t(s)]),a(", "),n("a",L,[a("@Import"),t(s)]),a(", 和 "),n("a",P,[a("@DependsOn"),t(s)]),a(" 注解）")])]),T,n("p",null,[D,a("属性的值可以用来指代其他Bean的"),M,a("属性，从而实现Bean之间的依赖关系。 参阅 "),n("a",F,[a("依赖"),t(s)]),a("。")]),N,n("div",W,[Z,n("p",null,[a("了解更多关于"),n("a",U,[a("资源加载"),t(s)]),a("的信息； 它提供了一种简单的方法，可以从"),z,a("语法中定义的位置读取"),E,a("。 特别是，"),O,a("路径被用来构建应用程序上下文， 如 "),n("a",V,[a("Application Context和资源路径"),t(s)]),a(" 中所述。")])]),R,n("p",null,[H,a(" 和 "),G,a("元素之间的这种联系，表达了协作对象之间的依赖关系。 有关配置对象依赖项的详细信息，参阅 "),n("a",K,[a("依赖"),t(s)]),a("。")]),Q])}const tn=o(i,[["render",Y],["__file","ioc-container.html.vue"]]),en=JSON.parse('{"path":"/md/spring-framework/core/ioc-container.html","title":"IoC 容器（Container）","lang":"zh-CN","frontmatter":{"title":"IoC 容器（Container）","author":"流浪码客","isOriginal":true,"date":"2024-03-18T00:00:00.000Z","category":"Spring","tag":"Spring Framework","description":"IoC 容器（Container） 概述 Spring IoC（控制反转）容器是Spring框架的核心。 org.springframework.context.ApplicationContext接口代表Spring IoC容器，负责实例化、配置和组装Bean。 Spring提供了几个 ApplicationContext 接口的实现，在独立应用程序...","head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/spring-framework/core/ioc-container.html"}],["meta",{"property":"og:title","content":"IoC 容器（Container）"}],["meta",{"property":"og:description","content":"IoC 容器（Container） 概述 Spring IoC（控制反转）容器是Spring框架的核心。 org.springframework.context.ApplicationContext接口代表Spring IoC容器，负责实例化、配置和组装Bean。 Spring提供了几个 ApplicationContext 接口的实现，在独立应用程序..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.geekyspace.cn/pictures/2024/202403181756387.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-01T18:57:43.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"Spring Framework"}],["meta",{"property":"article:published_time","content":"2024-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-01T18:57:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IoC 容器（Container）\\",\\"image\\":[\\"https://img.geekyspace.cn/pictures/2024/202403181756387.png\\"],\\"datePublished\\":\\"2024-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-01T18:57:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"配置元数据","slug":"配置元数据","link":"#配置元数据","children":[]},{"level":2,"title":"实例化容器","slug":"实例化容器","link":"#实例化容器","children":[]},{"level":2,"title":"使用容器","slug":"使用容器","link":"#使用容器","children":[]}],"git":{"createdTime":1719508475000,"updatedTime":1740855463000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":1},{"name":"kai","email":"kkdlut@hotmail.com","commits":1}]},"readingTime":{"minutes":5.63,"words":1690},"filePathRelative":"md/spring-framework/core/ioc-container.md","localizedDate":"2024年3月18日","excerpt":"\\n<h2>概述</h2>\\n<blockquote>\\n<p>Spring IoC（控制反转）容器是Spring框架的核心。\\n<code>org.springframework.context.ApplicationContext</code>接口代表Spring IoC容器，负责实例化、配置和组装<code>Bean</code>。</p>\\n</blockquote>\\n<p>Spring提供了几个 ApplicationContext 接口的实现，在独立应用程序中，最常用的是：</p>\\n<ul>\\n<li><a href=\\"https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ClassPathXmlApplicationContext</a></li>\\n<li><a href=\\"https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/support/FileSystemXmlApplicationContext.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">FileSystemXmlApplicationContext</a></li>\\n<li>等等</li>\\n</ul>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{tn as comp,en as data};
