import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as u,a as n,b as s,d as a,w as i,e as p}from"./app-CARt6Xo2.js";const r={},k=p(`<h1 id="java-常用类与工具" tabindex="-1"><a class="header-anchor" href="#java-常用类与工具"><span>Java 常用类与工具</span></a></h1><h2 id="object-通用方法" tabindex="-1"><a class="header-anchor" href="#object-通用方法"><span>Object 通用方法</span></a></h2><p><code>Object</code> 类是Java编程语言中的根类（基类），具有以下特点：</p><ul><li><strong>继承关系</strong>：所有类都直接或间接继承自 <code>Object</code> 类</li><li><strong>默认父类</strong>：如果一个类没有明确指定父类，它会自动继承 <code>Object</code> 类</li><li><strong>核心方法</strong>：提供了所有对象都具备的基本方法</li></ul><figure><img src="http://img.geekyspace.cn/pictures/2025/202509150047796.png" alt="Object 通用方法" tabindex="0" loading="lazy"><figcaption>Object 通用方法</figcaption></figure><h2 id="对象包装器与自动装箱" tabindex="-1"><a class="header-anchor" href="#对象包装器与自动装箱"><span>对象包装器与自动装箱</span></a></h2><p>Java 为每种基本数据类型提供了对应的<strong>包装类（Wrapper Class）</strong>，其特点如下：</p><ul><li>所有包装类位于 <code>java.lang</code> 包中，均为 <code>final</code> 类</li><li>包装类是引用类型，可以像对象一样使用基本类型</li></ul><figure><img src="http://img.geekyspace.cn/pictures/2025/202509150129780.png" alt="对象包装器类图结构" tabindex="0" loading="lazy"><figcaption>对象包装器类图结构</figcaption></figure><p>从 Java 5 开始，JDK 支持了<strong>自动装箱/拆箱（Autoboxing / Unboxing）</strong>，简化了基本类型与包装类之间的转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment">// 装箱：基本类型 → 包装类对象</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment">// 拆箱：包装类对象 → 基本类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 Java 自动装箱规范，部分包装类在特定范围内使用<strong>缓存池（CachePool）</strong> 复用对象，提高性能，避免重复创建：</p><ul><li>Boolean：缓存 <code>true</code> / <code>false</code></li><li>Character：缓存 <code>\\u0000 ~ \\u007F</code>（0 ~ 127）</li><li>Byte：缓存所有取值范围 <code>[-128, 127]</code></li><li>Short / Integer/Long：默认缓存 <code>[-128, 127]</code>，其中 <code>Integer</code> 上限可通过 JVM 参数调整（<code>-XX:AutoBoxCacheMax=&lt;size&gt;</code>）</li><li>Float / Double：不使用缓存</li></ul><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h2><p>String 是 Java 中最常用的<strong>引用类型</strong>之一，使用<code>final</code>修饰，具有<strong>不可变性</strong>（<code>Immutable</code>）。</p><ul><li>位于 <code>java.lang</code> 包中</li><li><strong>线程安全</strong>，可被多个线程共享</li><li>JDK8 底层使用<code>char</code>数组实现，JDK9+ 改用<code>byte</code>数组+ <code>coder</code>编码标志</li></ul><h3 id="string-api" tabindex="-1"><a class="header-anchor" href="#string-api"><span>String API</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">1</span>️⃣ 字符串创建
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span>               → 字面量创建（常量池复用）
<span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                → 构造函数创建（堆中新建对象）
<span class="token number">2</span>️⃣ 长度与空值判断
<span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       → 获取字符串的长度
<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      → 判断是否为空（即：length <span class="token operator">==</span> <span class="token number">0</span>）
<span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      → 判断是否为空白
<span class="token number">3</span>️⃣ 字符串查找
<span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                   → 查找子字符串首次出现位置
<span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>               → 查找子字符串最后出现位置
<span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                  → 判断是否包含某子串
<span class="token number">4</span>️⃣ 字符串截取
<span class="token function">substring</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span>               → 截取子字符串（从 begin 到 结尾）
<span class="token function">substring</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span>          → 截取子字符串（从 begin 到 end<span class="token operator">-</span><span class="token number">1</span>）
<span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>                  → 获取指定位置字符
<span class="token number">5</span>️⃣ 字符串拼接
<span class="token operator">+</span>                              → 最常用
<span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                    → 辅助拼接
<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    → 多字符串拼接
<span class="token number">6</span>️⃣ 字符串替换
<span class="token function">replace</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">)</span>              → 替换字符或子串
<span class="token function">replaceAll</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> replacement<span class="token punctuation">)</span> → 正则全局替换
<span class="token number">7</span>️⃣ 大小写转换
<span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  → 转大写
<span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  → 转小写
<span class="token number">8</span>️⃣ 字符串比较
<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                    → 精确比较
<span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>          → 忽略大小写
<span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                 → 字典序比较（负数<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span>正数表示小于<span class="token operator">/</span>相等<span class="token operator">/</span>大于）
<span class="token number">9</span>️⃣ 类型转换与格式化
<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>            → 基本类型转字符串
<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>             → 模板格式化
<span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  → 字符串转字符数组（<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span>）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jdk9-compact-strings" tabindex="-1"><a class="header-anchor" href="#jdk9-compact-strings"><span>JDK9+ Compact Strings</span></a></h3>`,19),d={href:"https://openjdk.org/jeps/254",target:"_blank",rel:"noopener noreferrer"},m=p("<li>前面提到：<u>JDK8 底层使用<code>char</code>数组实现，JDK9+ 改用<code>byte</code>数组+<code>coder</code>编码标志</u>。</li><li><strong>背景</strong>：JDK8 String 使用 <code>char[]</code>，每字符占 2 字节，存储 ASCII/Latin1 时存在内存浪费。</li><li><strong>优化方案</strong>：JDK9 起改为 <code>byte[] + coder</code>，根据字符串内容自动选择最优编码方式： <ul><li><code>Latin1</code> 编码 → 每个字符占 1 字节</li><li><code>UTF-16</code> 编码 → 每个字符占 2 字节</li></ul></li><li><strong>效果</strong>：减少内存占用，提高缓存命中率，且 API 保持兼容。</li>",4),v={id:"java21-string-templates",tabindex:"-1"},b={class:"header-anchor",href:"#java21-string-templates"},g=p(`<h3 id="内存分配演进" tabindex="-1"><a class="header-anchor" href="#内存分配演进"><span>内存分配演进</span></a></h3><ol><li>在 Java 中，String 是引用类型，其引用存放在<strong>栈（Stack）</strong> 中，对象内容存放在<strong>堆（Heap）</strong> 中。</li><li>通过<strong>字符串常量池（String Pool）</strong> 缓存已创建的字面量，避免重复创建对象，提高内存利用率。</li><li>利用<code>String.intern()</code>方法，将字符串对象<strong>放入常量池</strong>，并返回常量池中的对象引用。</li></ol><p><strong>HotSpot中字符串常量池保存哪里？</strong></p><table><thead><tr><th>JDK 版本</th><th>常量池位置</th><th>说明</th></tr></thead><tbody><tr><td>≤ JDK6</td><td><strong>方法区（Method Area / PermGen）</strong></td><td>字符串常量池在类加载阶段创建，固定大小，存储在永久代中</td></tr><tr><td>JDK7</td><td><strong>堆（Heap）</strong></td><td>为了扩展灵活性，字符串常量池移到了堆，JVM 管理更方便</td></tr><tr><td>≥ JDK8</td><td><strong>堆（Heap）</strong></td><td>方法区被移除（PermGen 被 Metaspace 替代），字符串常量池仍在堆上，<code>String.intern()</code> 的对象存储在堆中</td></tr></tbody></table><h2 id="arrays" tabindex="-1"><a class="header-anchor" href="#arrays"><span>Arrays</span></a></h2><p><code>Arrays</code> 类位于 <code>java.util</code> 包，是 Java 提供的<strong>数组工具类</strong>，特点如下：</p><ul><li>方法均为 <code>static</code>，无需创建对象即可调用</li><li>提供对数组的排序、搜索、填充、复制、比较等操作</li><li>支持基础类型数组与对象数组</li></ul><p><strong>Arrays API</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">1</span>️⃣ 排序
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                             → 升序排序
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   → 指定区间排序 <span class="token punctuation">[</span>from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> → 降序（对象数组）
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">parallelSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                     → 并行排序（大数组更快）
<span class="token number">2</span>️⃣ 搜索
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                → 二分查找，数组需已排序
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>      → 在 <span class="token punctuation">[</span>from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span> 区间查找
<span class="token number">3</span>️⃣ 比较与哈希
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    → 数组内容是否相等
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepEquals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>                → 多维数组内容是否相等
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                         → 一维数组哈希
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepHashCode</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                     → 多维数组哈希
<span class="token number">4</span>️⃣ 填充与复制
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                      → 将数组元素全部填充为指定值
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            → 填充区间 <span class="token punctuation">[</span>from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">;</span>                → 复制并改变长度（扩容<span class="token operator">/</span>缩容）
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            → 复制区间 <span class="token punctuation">[</span>from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span>
<span class="token number">5</span>️⃣ 转字符串<span class="token operator">/</span>集合
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                         → 一维数组转字符串
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepToString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                     → 多维数组转字符串
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                           → 数组 → 固定大小 <span class="token class-name">List</span> 视图
<span class="token number">6</span>️⃣ 并行<span class="token operator">/</span>批量操作（<span class="token class-name">Java</span> <span class="token number">8</span><span class="token operator">+</span>）
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               → 顺序初始化数组
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">parallelSetAll</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       → 并行初始化数组
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">parallelPrefix</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     → 前缀和计算
<span class="token number">7</span>️⃣ 流式 <span class="token constant">API</span>（<span class="token class-name">Java</span> <span class="token number">8</span><span class="token operator">+</span>）
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                           → 数组 → <span class="token class-name">Stream</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 → <span class="token punctuation">[</span>from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span> 区间 → <span class="token class-name">Stream</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="math" tabindex="-1"><a class="header-anchor" href="#math"><span>Math</span></a></h2><p>Math 类位于 <code>java.lang</code> 包，是 Java 提供的<strong>数学工具类</strong>。特点如下：</p><ul><li>使用<code>final</code>修饰，具有<strong>不可变性</strong>（<code>Immutable</code>），线程安全</li><li>方法均为 <code>static</code>，无需创建对象即可调用</li><li>用途：支持基本运算（如加减乘除、取绝对值）、幂运算、三角函数、对数与指数运算、舍入操作，以及生成随机数等</li></ul><p><strong>Math API</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">1</span>️⃣ 基本数学运算
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                    → 绝对值
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>                 → 最大值
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>                 → 最小值
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">signum</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                 → 符号函数 <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">2</span>️⃣ 幂运算与开方
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>                 → a 的 b 次幂
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                   → 平方根
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                   → 立方根
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">hypot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>               → √<span class="token punctuation">(</span>x² <span class="token operator">+</span> y²<span class="token punctuation">)</span>
<span class="token number">3</span>️⃣ 指数与对数
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                    → e 的 x 次幂
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">expm1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                  → e<span class="token operator">^</span>x <span class="token operator">-</span> <span class="token number">1</span>
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                    → 自然对数 <span class="token function">ln</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                  → 以 <span class="token number">10</span> 为底的对数
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log1p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                  → <span class="token function">ln</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>x<span class="token punctuation">)</span>，高精度
<span class="token number">4</span>️⃣ 三角函数
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">tan</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>      → 正弦<span class="token operator">/</span>余弦<span class="token operator">/</span>正切
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">acos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">atan</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>   → 反三角函数
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">atan2</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span>                             → y<span class="token operator">/</span>x 的角度（弧度）
<span class="token number">5</span>️⃣ 舍入与取整
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                   → 向上取整
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                  → 向下取整
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">rint</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                   → 返回最接近 x 的整数（<span class="token keyword">double</span>）
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                  → 四舍五入
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floorDiv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>            → 整数除法向下取整
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floorMod</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>            → 向下取整取模
<span class="token number">6</span>️⃣ 随机数与常量
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  → 返回 <span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">~</span><span class="token number">1</span>） 之间随机 <span class="token keyword">double</span>
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span>                        → π 常量
<span class="token class-name">Math<span class="token punctuation">.</span>E</span>                         → e 常量
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>常见用法</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">1</span>️⃣ 分页计算
<span class="token keyword">int</span> pages <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>totalItems <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>  → 向上取整
<span class="token number">2</span>️⃣ 随机数生成
<span class="token keyword">int</span> randInt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                      → <span class="token number">0</span> <span class="token operator">~</span> n<span class="token operator">-</span><span class="token number">1</span>
<span class="token keyword">double</span> randDouble <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>        → min <span class="token operator">~</span> max
<span class="token keyword">boolean</span> flip <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">;</span>                           → 随机布尔
<span class="token number">3</span>️⃣ 数值比较与约束
<span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>minValue<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxValue<span class="token punctuation">,</span> inputValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> → 限定范围 <span class="token punctuation">[</span>minValue<span class="token punctuation">,</span> maxValue<span class="token punctuation">]</span>
<span class="token number">4</span>️⃣ 取整与舍入
<span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">2.7</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> ceil <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>   → <span class="token number">3.0</span> 向上取整
<span class="token keyword">double</span> floor <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> → <span class="token number">2.0</span> 向下取整
<span class="token keyword">long</span> round <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>   → <span class="token number">3</span> 四舍五入
<span class="token number">5</span>️⃣ 几何与距离计算
<span class="token keyword">double</span> distance <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">hypot</span><span class="token punctuation">(</span>x2 <span class="token operator">-</span> x1<span class="token punctuation">,</span> y2 <span class="token operator">-</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span> → 两点间欧几里得距离
<span class="token number">6</span>️⃣ 幂运算
<span class="token keyword">double</span> area <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>radius<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>    → 圆面积
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="random" tabindex="-1"><a class="header-anchor" href="#random"><span>Random</span></a></h2><p><code>Random</code> 类位于 <code>java.util</code> 包，是 Java 提供的<strong>伪随机数生成器</strong>，基于 <strong>线性同余算法（LCG）</strong> 实现。特点如下：</p><ul><li><strong>伪随机</strong>：由确定算法生成，种子相同会得到相同序列。</li><li><strong>线程不安全</strong>：每个 <code>Random</code> 实例在多线程中使用可能会有竞争问题。 <ul><li>JDK 8 引入 <code>ThreadLocalRandom</code> 解决。</li></ul></li><li><strong>可复现性</strong>：使用相同种子可生成相同随机序列。</li><li><strong>多种数据类型支持</strong>：可生成 <code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>boolean</code> 等随机值。</li></ul><p><strong>Random API</strong></p><figure><img src="http://img.geekyspace.cn/pictures/2025/202509161341118.png" alt="Random API" tabindex="0" loading="lazy"><figcaption>Random API</figcaption></figure><p><strong>常见用法及扩展</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Random（单线程随机数）</span>
<span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> randInt <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>                <span class="token comment">// 区间随机整数 [min, max)</span>
<span class="token keyword">double</span> randDouble <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>  <span class="token comment">// 区间随机浮点数 [min, max)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> prizes <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;奖品A&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;奖品B&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;奖品C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> winner <span class="token operator">=</span> prizes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>prizes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// List 随机选择</span>
<span class="token comment">// Java 8+ 流式生成随机整数/双精度</span>
random<span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
random<span class="token punctuation">.</span><span class="token function">doubles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ThreadLocalRandom（多线程安全）</span>
<span class="token keyword">int</span> tRand <span class="token operator">=</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 区间随机整数 [0, 100)</span>
<span class="token keyword">double</span> tDouble <span class="token operator">=</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 区间浮点数 [0.0, 1.0)</span>
<span class="token comment">// SplittableRandom（高性能/并行流）</span>
<span class="token class-name">SplittableRandom</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplittableRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sr<span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sr<span class="token punctuation">.</span><span class="token function">doubles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="时间日期-date、calendar、localdatetime-等" tabindex="-1"><a class="header-anchor" href="#时间日期-date、calendar、localdatetime-等"><span>时间日期（Date、Calendar、LocalDateTime 等）</span></a></h2>`,24),h={href:"https://www.yuque.com/yublog/nokuzy/xkk0xf",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#序"},[n("span",null,"序")])],-1),y={href:"https://www.yuque.com/yublog/nokuzy/wmmc6g",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.yuque.com/yublog/nokuzy/dioi46",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.yuque.com/yublog/nokuzy/mtonym",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.yuque.com/yublog/nokuzy/qb14q0",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.yuque.com/yublog/nokuzy/gff0zc",target:"_blank",rel:"noopener noreferrer"};function M(J,A){const t=o("ExternalLinkIcon"),e=o("RouteLink");return l(),u("div",null,[k,n("ul",null,[n("li",null,[n("a",d,[s("JEP 254: Compact Strings"),a(t)])]),m]),n("h3",v,[n("a",b,[n("span",null,[a(e,{to:"/md/java/features/Java21/jep430-string-templates.html"},{default:i(()=>[s("Java21 String Templates")]),_:1})])])]),g,n("ul",null,[n("li",null,[n("a",h,[s("Java 日期时间API"),a(t)])])]),f,n("ul",null,[n("li",null,[n("a",y,[s("lombok 使用及技巧"),a(t)])]),n("li",null,[n("a",x,[s("stream 使用及其技巧"),a(t)])]),n("li",null,[n("a",j,[s("lambda 使用及其技巧"),a(t)])]),n("li",null,[n("a",w,[s("自定义注解(元注解)"),a(t)])]),n("li",null,[n("a",_,[s("反射专题-框架的灵魂"),a(t)])])])])}const I=c(r,[["render",M],["__file","java-common-classes.html.vue"]]),D=JSON.parse('{"path":"/md/java/basic/java-common-classes.html","title":"Java 常用类与工具","lang":"zh-CN","frontmatter":{"title":"Java 常用类与工具","shortTitle":null,"description":"Java 常用类与工具 Object 通用方法 Object 类是Java编程语言中的根类（基类），具有以下特点： 继承关系：所有类都直接或间接继承自 Object 类 默认父类：如果一个类没有明确指定父类，它会自动继承 Object 类 核心方法：提供了所有对象都具备的基本方法 Object 通用方法Object 通用方法 对象包装器与自动装箱 Ja...","icon":null,"cover":null,"author":"流浪码客","isOriginal":true,"sticky":false,"star":false,"date":"2025-09-13T00:00:00.000Z","category":"Java","tags":["JavaBasic"],"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/java/basic/java-common-classes.html"}],["meta",{"property":"og:title","content":"Java 常用类与工具"}],["meta",{"property":"og:description","content":"Java 常用类与工具 Object 通用方法 Object 类是Java编程语言中的根类（基类），具有以下特点： 继承关系：所有类都直接或间接继承自 Object 类 默认父类：如果一个类没有明确指定父类，它会自动继承 Object 类 核心方法：提供了所有对象都具备的基本方法 Object 通用方法Object 通用方法 对象包装器与自动装箱 Ja..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://img.geekyspace.cn/pictures/2025/202509150047796.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-21T18:06:57.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"JavaBasic"}],["meta",{"property":"article:published_time","content":"2025-09-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-21T18:06:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 常用类与工具\\",\\"image\\":[\\"http://img.geekyspace.cn/pictures/2025/202509150047796.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509150129780.png\\",\\"http://img.geekyspace.cn/pictures/2025/202509161341118.png\\"],\\"datePublished\\":\\"2025-09-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-21T18:06:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"Object 通用方法","slug":"object-通用方法","link":"#object-通用方法","children":[]},{"level":2,"title":"对象包装器与自动装箱","slug":"对象包装器与自动装箱","link":"#对象包装器与自动装箱","children":[]},{"level":2,"title":"String","slug":"string","link":"#string","children":[{"level":3,"title":"String API","slug":"string-api","link":"#string-api","children":[]},{"level":3,"title":"JDK9+ Compact Strings","slug":"jdk9-compact-strings","link":"#jdk9-compact-strings","children":[]},{"level":3,"title":"Java21  String Templates","slug":"java21-string-templates","link":"#java21-string-templates","children":[]},{"level":3,"title":"内存分配演进","slug":"内存分配演进","link":"#内存分配演进","children":[]}]},{"level":2,"title":"Arrays","slug":"arrays","link":"#arrays","children":[]},{"level":2,"title":"Math","slug":"math","link":"#math","children":[]},{"level":2,"title":"Random","slug":"random","link":"#random","children":[]},{"level":2,"title":"时间日期（Date、Calendar、LocalDateTime 等）","slug":"时间日期-date、calendar、localdatetime-等","link":"#时间日期-date、calendar、localdatetime-等","children":[]},{"level":2,"title":"序","slug":"序","link":"#序","children":[]}],"git":{"createdTime":1757960785000,"updatedTime":1758478017000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":3}]},"readingTime":{"minutes":7.58,"words":2273},"filePathRelative":"md/java/basic/java-common-classes.md","localizedDate":"2025年9月13日","excerpt":"\\n<h2>Object 通用方法</h2>\\n<p><code>Object</code> 类是Java编程语言中的根类（基类），具有以下特点：</p>\\n<ul>\\n<li><strong>继承关系</strong>：所有类都直接或间接继承自 <code>Object</code> 类</li>\\n<li><strong>默认父类</strong>：如果一个类没有明确指定父类，它会自动继承 <code>Object</code> 类</li>\\n<li><strong>核心方法</strong>：提供了所有对象都具备的基本方法</li>\\n</ul>\\n<figure><img src=\\"http://img.geekyspace.cn/pictures/2025/202509150047796.png\\" alt=\\"Object 通用方法\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Object 通用方法</figcaption></figure>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{I as comp,D as data};
