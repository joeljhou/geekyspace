import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e}from"./app-CARt6Xo2.js";const t={},p=e(`<h1 id="java-18-新特性-新增-snipppet标签" tabindex="-1"><a class="header-anchor" href="#java-18-新特性-新增-snipppet标签"><span>Java 18 新特性：新增@snipppet标签</span></a></h1><p>Java 18 引入了<code>@snippet</code>标签，用于在API文档中嵌入代码片段，以便更好地展示API的使用方法。</p><p>主要特点：</p><ul><li>有效性检查，代码包含语法错误时，会出现错误提示</li><li>启用现代样式，例如语法高亮显示，以及名称与声明的自动链接</li><li>为创建和编辑代码段提供更好的IDE支持</li></ul><h2 id="存在的-code标签" tabindex="-1"><a class="header-anchor" href="#存在的-code标签"><span>存在的@code标签</span></a></h2><p>用于单独的小段代码, 当代码片段复杂时, 使用复合模式的文档注释，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token operator">*</span> <span class="token generics"><span class="token punctuation">&lt;</span>pre<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token annotation punctuation">@code</span>
 <span class="token operator">*</span>     源代码行<span class="token number">1</span>
 <span class="token operator">*</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
 <span class="token operator">*</span>     源代码行n
 <span class="token operator">*</span> <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="引入-snippet标签" tabindex="-1"><a class="header-anchor" href="#引入-snippet标签"><span>引入@snippet标签</span></a></h2><p>解决了<code>@code</code>标签的不足，允许在API文档中直接嵌入代码片段，以便更好地展示API的使用方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 以下代码显示了如何使用 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Optional</span><span class="token punctuation">.</span>isPresent</span></span><span class="token punctuation">}</span>:
 * <span class="token punctuation">{</span><span class="token keyword">@snippet</span> :
 * if (v.isPresent()) <span class="token punctuation">{</span>
 *     System.out.println(&quot;v: &quot; + v.get());
 * <span class="token punctuation">}</span>
 * <span class="token punctuation">}</span>
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为外部片段导入</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 以下代码显示了如何使用 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Optional</span><span class="token punctuation">.</span>isPresent</span></span><span class="token punctuation">}</span>:
 * <span class="token punctuation">{</span><span class="token keyword">@snippet</span> file=&quot;ShowOptional.java&quot; region=&quot;example&quot;<span class="token punctuation">}</span>
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>ShowOptional.java</code>是一个包含以下内容的文件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShowOptional</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// @start region=&quot;example&quot;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;v: &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// @end</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[p];function c(i,l){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","jep413-code-snippets-in-api-documentation.html.vue"]]),v=JSON.parse('{"path":"/md/java/features/Java18/jep413-code-snippets-in-api-documentation.html","title":"Java 18 新特性：新增@snipppet标签","lang":"zh-CN","frontmatter":{"title":"Java 18 新特性：新增@snipppet标签","shortTitle":null,"description":"Java 18 新特性：新增@snipppet标签 Java 18 引入了@snippet标签，用于在API文档中嵌入代码片段，以便更好地展示API的使用方法。 主要特点： 有效性检查，代码包含语法错误时，会出现错误提示 启用现代样式，例如语法高亮显示，以及名称与声明的自动链接 为创建和编辑代码段提供更好的IDE支持 存在的@code标签 用于单独的小...","icon":null,"cover":null,"author":"流浪码客","isOriginal":true,"sticky":false,"star":false,"date":"2024-01-03T00:00:00.000Z","category":"Java Features","tag":["java"],"order":413,"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/java/features/Java18/jep413-code-snippets-in-api-documentation.html"}],["meta",{"property":"og:title","content":"Java 18 新特性：新增@snipppet标签"}],["meta",{"property":"og:description","content":"Java 18 新特性：新增@snipppet标签 Java 18 引入了@snippet标签，用于在API文档中嵌入代码片段，以便更好地展示API的使用方法。 主要特点： 有效性检查，代码包含语法错误时，会出现错误提示 启用现代样式，例如语法高亮显示，以及名称与声明的自动链接 为创建和编辑代码段提供更好的IDE支持 存在的@code标签 用于单独的小..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-16T11:19:57.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-01-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-16T11:19:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 18 新特性：新增@snipppet标签\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-03T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-16T11:19:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"存在的@code标签","slug":"存在的-code标签","link":"#存在的-code标签","children":[]},{"level":2,"title":"引入@snippet标签","slug":"引入-snippet标签","link":"#引入-snippet标签","children":[]}],"git":{"createdTime":1758021597000,"updatedTime":1758021597000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":1}]},"readingTime":{"minutes":1.1,"words":330},"filePathRelative":"md/java/features/Java18/jep413-code-snippets-in-api-documentation.md","localizedDate":"2024年1月3日","excerpt":"\\n<p>Java 18 引入了<code>@snippet</code>标签，用于在API文档中嵌入代码片段，以便更好地展示API的使用方法。</p>\\n<p>主要特点：</p>\\n<ul>\\n<li>有效性检查，代码包含语法错误时，会出现错误提示</li>\\n<li>启用现代样式，例如语法高亮显示，以及名称与声明的自动链接</li>\\n<li>为创建和编辑代码段提供更好的IDE支持</li>\\n</ul>\\n<h2>存在的@code标签</h2>\\n<p>用于单独的小段代码, 当代码片段复杂时, 使用复合模式的文档注释，如下所示：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code> <span class=\\"token operator\\">*</span> <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span>pre<span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">{</span><span class=\\"token annotation punctuation\\">@code</span>\\n <span class=\\"token operator\\">*</span>     源代码行<span class=\\"token number\\">1</span>\\n <span class=\\"token operator\\">*</span>     <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n <span class=\\"token operator\\">*</span>     源代码行n\\n <span class=\\"token operator\\">*</span> <span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>pre<span class=\\"token operator\\">&gt;</span>\\n</code></pre></div>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{d as comp,v as data};
