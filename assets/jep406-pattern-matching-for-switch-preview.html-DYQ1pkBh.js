import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as s,b as n,d as e,e as a}from"./app-CARt6Xo2.js";const i={},u=a(`<h1 id="java-17-新特性-switch模式匹配-preview" tabindex="-1"><a class="header-anchor" href="#java-17-新特性-switch模式匹配-preview"><span>Java 17 新特性：switch模式匹配（Preview）</span></a></h1><p>当case标签可以有模式时，有如下四个主要的设计问题，我们一一来看：</p><ol><li>增强类型检查</li><li>switch表达式和语句的完整性</li><li>模式变量声明的作用域</li><li>处理null</li></ol><h2 id="模式匹配设计" tabindex="-1"><a class="header-anchor" href="#模式匹配设计"><span>模式匹配设计</span></a></h2><h3 id="增强类型检查" tabindex="-1"><a class="header-anchor" href="#增强类型检查"><span>增强类型检查</span></a></h3><p>通过扩展<code>switch</code>模式匹配的<code>case</code>标签，现在支持除了<strong>原始数据类型</strong>（<code>char</code>、<code>byte</code>、<code>short</code> 或 <code>int</code>）之外， 相应的<strong>包装类</strong>（<code>Character</code>、<code>Byte</code>、<code>Short</code> 或 <code>Integer</code>）、<code>String</code> 以及<code>Enum</code>类型等<strong>任何引用类型</strong>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span> <span class="token constant">RED</span><span class="token punctuation">,</span> <span class="token constant">GREEN</span><span class="token punctuation">,</span> <span class="token constant">BLUE</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">typeTester</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token keyword">null</span>     <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Color</span> c  <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enum，颜色具有 &quot;</span> <span class="token operator">+</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">&quot; 个值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Point</span> p  <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Record Class: &quot;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ia <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Array，长度为&quot;</span> <span class="token operator">+</span> ia<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span>       <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;其他情况&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意⚠️：要避免模式标签支配</strong>（编译异常）</p><p>如果一个模式标签在switch块中被先前的模式标签支配, 或者存在多个全匹配的标签（default 和 total类型模式）, 则会产生编译时错误。</p></blockquote><ul><li>例1: 模式 <code>case CharSequence cs</code> 支配 <code>case String s</code> ,因为 String 是 CharSequence 的子类</li><li>例2: 总模式的情况，如 <code>case p</code> 支配 <code>case null</code> 模式,因为总模式匹配所有值，包括null</li><li>例3: 模式 <code>case p</code> 支配 <code>case p &amp;&amp; e</code> ,因为满足第一个模式的值也满足第二个模式</li><li>例4: 模式 <code>case String s</code> 支配了带条件的模式 <code>case String s &amp;&amp; s.length() &gt; 0</code></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">switch</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">CharSequence</span> cs <span class="token operator">-&gt;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一个长度为&quot;</span> <span class="token operator">+</span> cs<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;的序列&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">String</span> s <span class="token operator">-&gt;</span>    <span class="token comment">// 编译错误 - 模式被前一个模式支配</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一个字符串：&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="switch表达式和语句的完整性" tabindex="-1"><a class="header-anchor" href="#switch表达式和语句的完整性"><span>switch表达式和语句的完整性</span></a></h3><p>通常情况下，通过添加<code>default</code>标签，可以确保<code>switch</code>块的完整性。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printType</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Integer</span> i <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Integer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Other&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),k=s("strong",null,"密封类",-1),r={href:"https://openjdk.org/jeps/409",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>以下是一个密封接口Animal的示例，包括Dog和Cat两个允许的子类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">sealed</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token keyword">permits</span> <span class="token class-name">Dog</span><span class="token punctuation">,</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getSound</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">Dog</span> d <span class="token operator">-&gt;</span> <span class="token string">&quot;Woof!&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Cat</span> c <span class="token operator">-&gt;</span> <span class="token string">&quot;Meow!&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// no default needed!</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，由于编译器知道只有Dog和Cat是可能的类型，所以可以不需要<code>default</code>标签。 同样，对于枚举类，每个常量都有一个子句，也不需要default标签。</p><h3 id="模式变量声明的作用域" tabindex="-1"><a class="header-anchor" href="#模式变量声明的作用域"><span>模式变量声明的作用域</span></a></h3>`,4),v=s("code",null,"instanceof",-1),m={href:"https://openjdk.org/jeps/394",target:"_blank",rel:"noopener noreferrer"},g=s("strong",null,"模式匹配",-1),h=s("strong",null,"模式变量",-1),b=s("code",null,"匹配的条件表达式",-1),w=s("code",null,"then",-1),y=s("code",null,"else",-1),f=a(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Not a string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>switch</code>语句的<code>case</code>标签进行<strong>模式匹配</strong>，有以下两条规则：</p><ol><li><p><code>-&gt;</code>形式：作用域包括箭头右侧的表达式、块或 throw 语句</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">Character</span> c <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">charValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Ding!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Character&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token class-name">Integer</span> i <span class="token operator">-&gt;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid Integer argument of value &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>:</code>形式，则其作用域包括语句组的块语句，直到遇到下一个<code>switch</code>标签或其他控制流语句</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">Character</span> c<span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">charValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Ding &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">charValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Tab &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;character&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="处理null" tabindex="-1"><a class="header-anchor" href="#处理null"><span>处理null</span></a></h3><p>引入新的<code>null</code>标签，用于明确处理选择表达式为<code>null</code>的情况</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// test(null) 不再抛出NullPointerException，而是打印 &quot;null!&quot;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token keyword">null</span>     <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;null!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span>       <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Something else&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由空标签产生的新标签形式， JDK 16中，<code>switch</code>块支持两种风格，</p><ol><li><code>:</code> 形式，允许<code>fallthrough</code>，多个标签通常写为<code>case l1: case l2:</code></li><li><code>-&gt;</code>形式，不允许<code>fallthrough</code>，多个标签写为<code>case l1, l2-&gt;</code></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 处理 null 和 String 标签，使用 : 形式</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> <span class="token keyword">null</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token class-name">String</span> s<span class="token operator">:</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;String, including null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span>
   <span class="token comment">// 更多的 cases...</span>

<span class="token punctuation">}</span>

<span class="token comment">// 结合 null case 和 default 标签，使用 -&gt; 形式</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 更多的 cases...</span>
   <span class="token keyword">case</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">default</span> <span class="token operator">-&gt;</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The rest (including null)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="保护模式和括号模式" tabindex="-1"><a class="header-anchor" href="#保护模式和括号模式"><span>保护模式和括号模式</span></a></h2><p>为了增强代码的可读性并避免歧义，引入了两种新的模式匹配技术：</p><ul><li>保护模式 (guarded patterns)，允许在模式匹配成功后添加一个布尔表达式</li><li>括号模式 (parenthesized patterns)，将模式放在括号中，避免歧义，控制顺序</li></ul><p>在成功匹配模式后，我们经常会进一步测试匹配结果。这会导致代码变得繁琐，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">String</span> s<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<strong>保护模式</strong>，写成<code>p &amp;&amp; e</code>改进上面的代码，使其更加简洁</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s                    <span class="token operator">-&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>JDK 17中还加入了<strong>括号模式</strong>，以避免解析歧义。支持括号内写入<code>(p)</code> 其中p是一个模式。在JDK 21中，括号模式被移除。</p></blockquote><h2 id="启用预览功能" tabindex="-1"><a class="header-anchor" href="#启用预览功能"><span>启用预览功能</span></a></h2><p>Preview阶段的功能并不是默认开启的，需要在编译和运行时启用。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> --enable-preview <span class="token parameter variable">--source</span> <span class="token number">17</span> PatternMatching.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,20);function j(q,S){const t=o("ExternalLinkIcon");return c(),l("div",null,[u,s("p",null,[n("如果switch表达式的类型是"),k,n("("),s("a",r,[n("JEP 409"),e(t)]),n(")， 则类型覆盖检查会考虑密封类的permits子句，以确保switch块的完整性。")]),d,s("p",null,[v,n("("),s("a",m,[n("JEP 394"),e(t)]),n(")进行"),g,n("， "),h,n("的作用域限定在"),b,n("和相应的"),w,n("块中。 如果匹配失败，模式变量在"),y,n("块中不可见。")]),f])}const C=p(i,[["render",j],["__file","jep406-pattern-matching-for-switch-preview.html.vue"]]),P=JSON.parse('{"path":"/md/java/features/Java17/jep406-pattern-matching-for-switch-preview.html","title":"Java 17 新特性：switch模式匹配（Preview）","lang":"zh-CN","frontmatter":{"title":"Java 17 新特性：switch模式匹配（Preview）","shortTitle":null,"description":"Java 17 新特性：switch模式匹配（Preview） 当case标签可以有模式时，有如下四个主要的设计问题，我们一一来看： 增强类型检查 switch表达式和语句的完整性 模式变量声明的作用域 处理null 模式匹配设计 增强类型检查 通过扩展switch模式匹配的case标签，现在支持除了原始数据类型（char、byte、short 或 i...","icon":null,"cover":null,"author":"流浪码客","isOriginal":true,"sticky":false,"star":false,"date":"2023-12-30T00:00:00.000Z","category":"Java Features","tag":["java"],"order":406,"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/java/features/Java17/jep406-pattern-matching-for-switch-preview.html"}],["meta",{"property":"og:title","content":"Java 17 新特性：switch模式匹配（Preview）"}],["meta",{"property":"og:description","content":"Java 17 新特性：switch模式匹配（Preview） 当case标签可以有模式时，有如下四个主要的设计问题，我们一一来看： 增强类型检查 switch表达式和语句的完整性 模式变量声明的作用域 处理null 模式匹配设计 增强类型检查 通过扩展switch模式匹配的case标签，现在支持除了原始数据类型（char、byte、short 或 i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-16T11:19:57.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2023-12-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-16T11:19:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 17 新特性：switch模式匹配（Preview）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-16T11:19:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"模式匹配设计","slug":"模式匹配设计","link":"#模式匹配设计","children":[{"level":3,"title":"增强类型检查","slug":"增强类型检查","link":"#增强类型检查","children":[]},{"level":3,"title":"switch表达式和语句的完整性","slug":"switch表达式和语句的完整性","link":"#switch表达式和语句的完整性","children":[]},{"level":3,"title":"模式变量声明的作用域","slug":"模式变量声明的作用域","link":"#模式变量声明的作用域","children":[]},{"level":3,"title":"处理null","slug":"处理null","link":"#处理null","children":[]}]},{"level":2,"title":"保护模式和括号模式","slug":"保护模式和括号模式","link":"#保护模式和括号模式","children":[]},{"level":2,"title":"启用预览功能","slug":"启用预览功能","link":"#启用预览功能","children":[]}],"git":{"createdTime":1758021597000,"updatedTime":1758021597000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":1}]},"readingTime":{"minutes":4.4,"words":1319},"filePathRelative":"md/java/features/Java17/jep406-pattern-matching-for-switch-preview.md","localizedDate":"2023年12月30日","excerpt":"\\n<p>当case标签可以有模式时，有如下四个主要的设计问题，我们一一来看：</p>\\n<ol>\\n<li>增强类型检查</li>\\n<li>switch表达式和语句的完整性</li>\\n<li>模式变量声明的作用域</li>\\n<li>处理null</li>\\n</ol>\\n<h2>模式匹配设计</h2>\\n<h3>增强类型检查</h3>\\n<p>通过扩展<code>switch</code>模式匹配的<code>case</code>标签，现在支持除了<strong>原始数据类型</strong>（<code>char</code>、<code>byte</code>、<code>short</code> 或 <code>int</code>）之外，\\n相应的<strong>包装类</strong>（<code>Character</code>、<code>Byte</code>、<code>Short</code> 或 <code>Integer</code>）、<code>String</code> 以及<code>Enum</code>类型等<strong>任何引用类型</strong>。</p>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{C as comp,P as data};
