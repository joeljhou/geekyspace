import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-CARt6Xo2.js";const e={},p=t(`<h1 id="java-21-新特性-switch模式匹配" tabindex="-1"><a class="header-anchor" href="#java-21-新特性-switch模式匹配"><span>Java 21 新特性：switch模式匹配</span></a></h1><p>Java 21 引入了 switch 模式匹配功能，它增强了 switch 语句的功能，允许使用更简洁的语法来执行类型检查和数据提取。 该功能与<a href="/java-features/Java21/jep440-record-partterns">记录模式（JEP 440）</a>共同发展，并与之有相当大的互动。</p><h2 id="switch-instanceof" tabindex="-1"><a class="header-anchor" href="#switch-instanceof"><span>switch + instanceof</span></a></h2><p>与if条件中的<code>instanceof</code>一样，<code>switch case</code>现在可以对其值进行类型检查，并创建一个case作用域变量:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">asStringValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anyValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>anyValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> str      <span class="token operator">-&gt;</span> str<span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">JSONObject</span> json <span class="token operator">-&gt;</span> json<span class="token punctuation">.</span><span class="token function">toCompactString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">BigDecimal</span> bd   <span class="token operator">-&gt;</span> bd<span class="token punctuation">.</span><span class="token function">toEngineeringString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Integer</span> i       <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">LocalDate</span> ld    <span class="token operator">-&gt;</span> ld<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">ISO_LOCAL_DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span>              <span class="token operator">-&gt;</span> <span class="token string">&quot;n/a&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="switch-null" tabindex="-1"><a class="header-anchor" href="#switch-null"><span>switch + null</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">asStringValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anyValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>anyValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token keyword">null</span>       <span class="token operator">-&gt;</span> <span class="token string">&quot;n/a&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> str <span class="token operator">-&gt;</span> str<span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="switch-enum" tabindex="-1"><a class="header-anchor" href="#switch-enum"><span>switch + enum</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">sealed</span> <span class="token keyword">interface</span> <span class="token class-name">CardClassification</span> <span class="token keyword">permits</span> <span class="token class-name">Suit</span><span class="token punctuation">,</span> <span class="token class-name">Tarot</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Suit</span> <span class="token keyword">implements</span> <span class="token class-name">CardClassification</span> <span class="token punctuation">{</span> <span class="token constant">CLUBS</span><span class="token punctuation">,</span> <span class="token constant">DIAMONDS</span><span class="token punctuation">,</span> <span class="token constant">HEARTS</span><span class="token punctuation">,</span> <span class="token constant">SPADES</span> <span class="token punctuation">}</span>
<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Tarot</span> <span class="token keyword">implements</span> <span class="token class-name">CardClassification</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exhaustiveSwitchWithBetterEnumSupport</span><span class="token punctuation">(</span><span class="token class-name">CardClassification</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token constant">CLUBS</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;梅花&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">DIAMONDS</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方块&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">HEARTS</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;红桃&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">SPADES</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;黑桃&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Tarot</span> t <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;塔罗牌&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;未知的卡片类型&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),c=[p];function o(l,i){return s(),a("div",null,c)}const k=n(e,[["render",o],["__file","jep441-pattern-matching-for-switch.html.vue"]]),d=JSON.parse('{"path":"/md/java/features/Java21/jep441-pattern-matching-for-switch.html","title":"Java 21 新特性：switch模式匹配","lang":"zh-CN","frontmatter":{"title":"Java 21 新特性：switch模式匹配","shortTitle":null,"description":"Java 21 新特性：switch模式匹配 Java 21 引入了 switch 模式匹配功能，它增强了 switch 语句的功能，允许使用更简洁的语法来执行类型检查和数据提取。 该功能与记录模式（JEP 440）共同发展，并与之有相当大的互动。 switch + instanceof 与if条件中的instanceof一样，switch case现...","icon":null,"cover":null,"author":"流浪码客","isOriginal":true,"sticky":false,"star":false,"date":"2024-01-10T00:00:00.000Z","category":"Java Features","tag":["java"],"order":441,"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/java/features/Java21/jep441-pattern-matching-for-switch.html"}],["meta",{"property":"og:title","content":"Java 21 新特性：switch模式匹配"}],["meta",{"property":"og:description","content":"Java 21 新特性：switch模式匹配 Java 21 引入了 switch 模式匹配功能，它增强了 switch 语句的功能，允许使用更简洁的语法来执行类型检查和数据提取。 该功能与记录模式（JEP 440）共同发展，并与之有相当大的互动。 switch + instanceof 与if条件中的instanceof一样，switch case现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-16T11:19:57.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-01-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-16T11:19:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 21 新特性：switch模式匹配\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-16T11:19:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"switch + instanceof","slug":"switch-instanceof","link":"#switch-instanceof","children":[]},{"level":2,"title":"switch + null","slug":"switch-null","link":"#switch-null","children":[]},{"level":2,"title":"switch + enum","slug":"switch-enum","link":"#switch-enum","children":[]}],"git":{"createdTime":1758021597000,"updatedTime":1758021597000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":1}]},"readingTime":{"minutes":0.91,"words":274},"filePathRelative":"md/java/features/Java21/jep441-pattern-matching-for-switch.md","localizedDate":"2024年1月10日","excerpt":"\\n<p>Java 21 引入了 switch 模式匹配功能，它增强了 switch 语句的功能，允许使用更简洁的语法来执行类型检查和数据提取。\\n该功能与<a href=\\"/java-features/Java21/jep440-record-partterns\\">记录模式（JEP 440）</a>共同发展，并与之有相当大的互动。</p>\\n<h2>switch + instanceof</h2>\\n<p>与if条件中的<code>instanceof</code>一样，<code>switch case</code>现在可以对其值进行类型检查，并创建一个case作用域变量:</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">asStringValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> anyValue<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">switch</span> <span class=\\"token punctuation\\">(</span>anyValue<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">case</span> <span class=\\"token class-name\\">String</span> str      <span class=\\"token operator\\">-&gt;</span> str<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">case</span> <span class=\\"token class-name\\">JSONObject</span> json <span class=\\"token operator\\">-&gt;</span> json<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toCompactString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">case</span> <span class=\\"token class-name\\">BigDecimal</span> bd   <span class=\\"token operator\\">-&gt;</span> bd<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toEngineeringString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">case</span> <span class=\\"token class-name\\">Integer</span> i       <span class=\\"token operator\\">-&gt;</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">case</span> <span class=\\"token class-name\\">LocalDate</span> ld    <span class=\\"token operator\\">-&gt;</span> ld<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">format</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">DateTimeFormatter</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">ISO_LOCAL_DATE</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">default</span>              <span class=\\"token operator\\">-&gt;</span> <span class=\\"token string\\">\\"n/a\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{k as comp,d as data};
