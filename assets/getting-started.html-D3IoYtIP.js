import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c,a as n,b as a,d as t,e}from"./app-CARt6Xo2.js";const r={},l=n("h1",{id:"spring-data-jpa-快速入门",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-data-jpa-快速入门"},[n("span",null,"Spring Data JPA 快速入门")])],-1),u=n("blockquote",null,[n("p",null,"目标： 了解如何使用Spring Data JPA从数据库中存储和检索数据。")],-1),d=n("p",null,"参考：",-1),g={href:"https://docs.spring.io/spring-data/jpa/reference/jpa/getting-started.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.jetbrains.com/guide/java/tutorials/getting-started-spring-data-jpa/",target:"_blank",rel:"noopener noreferrer"},m=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍"},[n("span",null,"介绍")])],-1),v={href:"https://spring.io/projects/spring-data-jpa",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.jetbrains.com/lp/intellij-frameworks/",target:"_blank",rel:"noopener noreferrer"},y=e(`<h2 id="创建一个新的spring-boot项目" tabindex="-1"><a class="header-anchor" href="#创建一个新的spring-boot项目"><span>创建一个新的Spring Boot项目</span></a></h2><p>首先，在 IntelliJ IDEA Ultimate 中，我们将通过在欢迎屏幕中点击 &quot;<strong>New Project</strong>&quot; 来创建一个新项目。 我们将从左侧菜单中选择 &quot;<strong>Spring Initializr</strong>&quot;。然后，我们将指定项目的名称 - 你可以将其命名为 <mark>SpringDataJPA</mark>。 我们还可以将 &quot;<strong>Group</strong>&quot; 字段更改为我们公司的名称。 对于其余的字段，你可以接受默认值。请随意为你的项目使用最新的 Java 版本。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032048778.png" alt="New Project Window" tabindex="0" loading="lazy"><figcaption>New Project Window</figcaption></figure><p>接下来，我们将点击 &quot;<strong>Next</strong>&quot;。</p><p>在接下来的窗口中，我们将选择我们可用的最新的 Spring Boot 版本。 然后在 &quot;Dependencies&quot; 下，我们将在搜索框中搜索 &quot;<mark>data</mark>&quot;。 在 SQL 下，我们将从列表中选择 <strong>Spring Data JPA</strong> 和 <strong>H2 Database</strong> 的复选框。 对于本教程，我们将使用 H2 作为我们的数据库，因为它很容易设置。 如果你想使用不同的数据库，比如 MySQL 或 HyperSQL，可以随意选择这些依赖项，或者稍后将它们添加到你的 pom.xml 文件中。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032053947.png" alt="New Project Window Dependency" tabindex="0" loading="lazy"><figcaption>New Project Window Dependency</figcaption></figure><p>一旦我们点击 &quot;<strong>Finish</strong>&quot;，IntelliJ IDEA 就会创建一个带有 Spring Data JPA 和数据库依赖的新的 Spring Boot 项目。</p><h2 id="创建员工实体" tabindex="-1"><a class="header-anchor" href="#创建员工实体"><span>创建员工实体</span></a></h2><p>实体是一个Java类，代表着你想要插入到数据库中的数据。 对于我们的应用程序，我们将创建一个名为 Employee 的实体， 我们将使用它来将员工数据插入到我们数据库中的 Employee 表中。</p><p>在项目工具窗口中，我们将导航到我们的 <code>src/main/java</code> 目录，选择 <code>com.jetbrains.springdatajpaapp</code> 包， 并按下 <strong>⌘N</strong> (macOS) / <strong>Alt+Insert</strong> (Windows/Linux)。选择 <strong>Java Class</strong>，然后输入我们的实体名称 - <mark>Employee</mark>。 然后，按下 <strong>⏎</strong> (macOS) / <strong>Enter</strong> (Windows/Linux)。</p><p>在 Employee 类中，我们将通过在类定义中添加 <mark>@Entity</mark> 注解并导入 <code>javax.persistence.Entity</code> 包来将其设置为实体。 一旦你这样做了，你会注意到你的类中出现了一个错误。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032108680.png" alt="Employee Entity Error" tabindex="0" loading="lazy"><figcaption>Employee Entity Error</figcaption></figure><p>正如错误消息所指示的，实体必须有一个由 <code>@Id </code>注解指定的主键字段。我们将使用 <strong>⌥⏎</strong> (macOS) / <strong>Alt+Enter</strong> (Windows/Linux) 快捷键， 这样 IntelliJ IDEA 就可以为我们添加 ID，这将导致提示输入 ID 字段的信息。 我们将采用默认的名称和类型。 你可以选择 &quot;<strong>Field Access</strong>&quot; 复选框（我更喜欢在字段上使用注解，而不是在 setter 方法上，因为我觉得这样更易读）。 你也可以选择 &quot;<strong>Generated</strong>&quot; 复选框，这样你就不必自己分配员工 ID。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032111916.png" alt="Add Employee ID" tabindex="0" loading="lazy"><figcaption>Add Employee ID</figcaption></figure><p>然后，我们将点击 &quot;<strong>OK</strong>&quot;。你会注意到 IntelliJ IDEA 创建了一个带有其 setter 和 getter 的 <code>id</code> 字段。</p><p>接下来，让我们添加几个 String 字段：<mark>firstName</mark> 和 <mark>lastName</mark>。</p><p>接下来，我们将通过调出 Generate 菜单 <strong>⌘N</strong> (macOS) / <strong>Alt+Insert</strong> (Windows/Linux)，然后选择 <strong>Constructor</strong> 来生成我们的构造函数。 我们不需要构造函数接收一个 id，因为我们的 id 将会自动生成， 所以我们将点击 <strong>firstName</strong>，然后按住 <strong>⌘</strong> (macOS) / <strong>Ctrl</strong> (Windows/Linux) 键，然后选择 <strong>lastName</strong>。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032114060.png" alt="Generate Constructor" tabindex="0" loading="lazy"><figcaption>Generate Constructor</figcaption></figure><p>然后，我们将点击 &quot;<strong>OK</strong>&quot;。</p><p>你现在会注意到你的 <code>Employee</code> 类上出现了一个错误，因为你没有一个无参构造函数。 如果你在错误上按下 <strong>Alt+Enter</strong> (Windows/Linux) 或 <strong>⌥⏎</strong> (macOS)，IntelliJ IDEA 将为你提供创建它的选项 - 让我们继续执行。</p><p>接下来，我们将生成字段的 setter 和 getter。 我们将调出 Generate 菜单 ⌘N (macOS) / Alt+Insert (Windows/Linux)，然后选择 Getter 和 Setter。 我们将按住 ⌘ (macOS) / Ctrl (Windows/Linux) 键，并选择两个变量。 然后，我们将点击 &quot;<strong>OK</strong>&quot;。IntelliJ IDEA 为这两个变量生成了 getter 和 setter。</p><p>最后，让我们再次调出 Generate 菜单 ⌘N (macOS) / Alt+Insert (Windows/Linux)，然后选择 <code>toString</code> 来生成一个 toString 方法。 我们将保持所有字段选中，然后点击 &quot;<strong>OK</strong>&quot;。</p><p>最终，Employee 实体应该类似于以下内容（格式可能会有所不同）：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>springdatajpaapp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Entity</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">GeneratedValue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Id</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span> <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> firstName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirstName</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLastName</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Employee{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;id=&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span>
                <span class="token string">&quot;, firstName=&#39;&quot;</span> <span class="token operator">+</span> firstName <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, lastName=&#39;&quot;</span> <span class="token operator">+</span> lastName <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建-repository-接口" tabindex="-1"><a class="header-anchor" href="#创建-repository-接口"><span>创建 Repository 接口</span></a></h2><p>现在我们已经创建了 Employee 实体，我们需要一种方式来执行 CRUD（创建、读取、更新、删除）操作。 幸运的是，Spring Data JPA 通过 <mark>Repositories</mark> 提供了所有基本的操作。让我们看看它们是如何工作的。</p><p>在项目工具窗口中，我们将选择 <code>com.jetbrains.springdatajpaapp</code> 包，并按下 ⌘N (macOS) / Alt+Insert (Windows/Linux)。 选择 <strong>Java Class</strong>。 我们将其命名为 <mark>EmployeeRepository</mark>，这次我们选择 <strong>Interface</strong> 然后按下 ⏎ (macOS) / Enter (Windows/Linux)。 为了使我们的接口成为一个 repository，我们需要让它扩展 <mark>CrudRespository&lt;T, ID&gt;</mark> 接口，其中泛型参数是我们的实体类和实体的 id 类型。 所以对于我们的应用程序，我们的 repository 接口定义将会是：<code>public interface EmployeeRepository extends CrudRepository&lt;Employee, Long&gt;</code>。</p><p>我们将使用这个 <code>EmployeeRepository</code> 接口来在我们的应用程序代码中执行 CRUD 操作。 由于我们正在扩展 <code>CrudRepository</code>，我们默认就可以访问基本的 CRUD 方法。 例如，我们可以调用 <code>save</code> 方法将一个 Employee 对象插入到我们的数据库中。 我们也可以调用 <code>findAll</code> 方法来列出你的 Employee 表中的所有员工。 当我们编写我们的应用程序逻辑时，我们将看到如何做到这一点。</p><p>在大多数应用程序中，你会发现自己希望做的事情超出了 CrudRepository 接口默认提供的范围。 例如，假设我们想要找到所有姓氏中包含空格的员工。你当然可以编写一个 SQL 查询来实现这个功能。 然而，一个更简单的方法是利用 Spring Data JPA，它允许你在你的 repository 中创建方法，这些方法将根据方法名被转换为查询。</p><p>例如，假设我们想要添加一个方法来查找所有姓氏中包含特定字符串的员工。 我们将前往我们的 <code>EmployeeRepository</code> 接口，并开始声明我们的方法。 我的方法将返回一个员工列表，因此我们将使用 <code>List&lt;Employee&gt;</code> 作为返回类型。 然后，我们需要指定一个由两部分组成的方法名：引入部分和条件部分。 我们可以在 IntelliJ IDEA 中使用 <strong>⌃␣</strong> (macOS) / <strong>Ctrl+Space</strong> (Windows/Linux) 来查看引入部分的方法建议列表：</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032144256.png" alt="Repository Method Suggestion Introducer" tabindex="0" loading="lazy"><figcaption>Repository Method Suggestion Introducer</figcaption></figure><p>我们将选择 <mark>findEmployeesBy</mark> 作为引入部分。 然后，我们将再次点击 <strong>⌃␣</strong> (macOS) / <strong>Ctrl+Space</strong> (Windows/Linux) 来查看可以选择的条件列表。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032145040.png" alt="Repository Method Suggestion Criteria" tabindex="0" loading="lazy"><figcaption>Repository Method Suggestion Criteria</figcaption></figure><p>我们将选择 <code>LastNameContaining</code>。最后，我们将声明一个 String 方法参数，表示我们要检查的字符串。 现在我们有了一个方法，可以找到所有姓氏中包含所提供字符串的员工。</p><p>你可能会想：如果我定义了这个接口，我不是必须要实现它吗？答案是否定的。 Spring Data JPA 会为你处理这些！你只需要定义你的 Repository 接口，并遵循 Spring Data 的约定声明你的方法。 当你添加更多方法时，如果在方法名中犯错，IntelliJ IDEA 将会指出错误。 例如，如果我们尝试创建一个用于查询具有不正确 <code>LName</code> 属性的员工的方法，IntelliJ IDEA 会给出一个错误，说<code>Cannot resolve property LName</code>。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032330980.png" alt="Method Signature Validation" tabindex="0" loading="lazy"><figcaption>Method Signature Validation</figcaption></figure><p>最终，你的 EmployeeRepository 接口应该如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>springdatajpaapp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">CrudRepository</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">findEmployeesByLastNameContaining</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置数据库" tabindex="-1"><a class="header-anchor" href="#配置数据库"><span>配置数据库</span></a></h2><p>此时，我们可以使用 Spring Boot 为我们创建的默认内存数据库。 然而，默认数据库功能有限，并且在应用程序终止后不允许数据保留，因此让我们继续配置一个数据库。</p><p>我们将调出搜索菜单 <strong>⇧⇧</strong> (macOS) / <strong>Shift+Shift</strong> (Windows/Linux) 并搜索我们的 <mark>application.properties</mark> 文件。 在我们的 application.properties 文件中，我们可以利用 IntelliJ IDEA 的建议来指定连接到我们的 H2 数据库所需的属性。 我们将开始输入 <mark>url</mark>，并从建议列表中选择 <mark>spring.datasource.url</mark> 属性。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032332643.png" alt="Application Properties URL" tabindex="0" loading="lazy"><figcaption>Application Properties URL</figcaption></figure><p>如果你没有使用 H2 作为你的数据库，你可以在这里指定你自己的数据库 URL。 在我们的情况下，我们将指定 <mark>jdbc:h2:file:./data/myDB</mark> 作为我们的 URL，这将创建一个名为 <mark>myDB</mark> 的 H2 数据库。</p><p>接下来，我们需要指定我们的驱动类名。 我们可以类似地搜索 <mark>driver</mark>，并从我们的建议列表中选择 <mark>spring.datasource.driver-class-name</mark>。 一旦我们选择了这个，IntelliJ IDEA 将根据我们之前指定的 URL 提供 H2 驱动程序的建议值，因此我们可以选择它。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032156491.png" alt="Application Properties Driver Class" tabindex="0" loading="lazy"><figcaption>Application Properties Driver Class</figcaption></figure><p>接下来，我们同样搜索 <mark>username</mark> 和 <mark>password</mark> 属性，并将它们的值分别设置为 <mark>sa</mark> 和 <mark>password</mark>。</p><p>最后，我们不想手动创建任何表，因此我们将添加 <mark>spring.jpa.hibernate.ddl-auto</mark> 属性，并使用代码完成来查看可能的值列表。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032158424.png" alt="Application Properties ddl-auto" tabindex="0" loading="lazy"><figcaption>Application Properties ddl-auto</figcaption></figure><p>对于我的应用程序，我将把属性值设置为 <mark>update</mark>，这样如果表不存在，它将在数据库中创建表，并在我对实体进行更改时更新它们。</p><p>最终，你的 application.properties 文件应该如下所示：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:h2:file:./data/myDB</span>
<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">org.h2.Driver</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">sa</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">password</span>
<span class="token key attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token value attr-value">update</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="从应用程序写入数据库" tabindex="-1"><a class="header-anchor" href="#从应用程序写入数据库"><span>从应用程序写入数据库</span></a></h2><p>现在我们有了我们的 Employee 实体、Repository 和数据库配置，我们准备编写我们的应用程序逻辑。 假设我们想要向我们的数据库插入四个员工。我们将导航到为我们的 Spring Boot 应用程序 创建的 <mark>SpringDataJpaApplication</mark> 类 <strong>⇧⇧</strong> (macOS) / <strong>Shift+Shift</strong> (Windows/Linux)。</p><p><strong>练习</strong>：</p><p>花几分钟时间看看你能否创建一个 <code>insertFourEmployees(EmployeeRepository repository)</code> 方法，使用 <code>save()</code> 方法插入员工。</p><p>完成了吗？以下是你的方法应该是什么样子的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insertFourEmployees</span><span class="token punctuation">(</span><span class="token class-name">EmployeeRepository</span> repository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Dalia&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Abo Sheasha&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Trisha&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Gee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Helen&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Scott&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Mala&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Gupta&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们继续在我们的应用程序中调用那个方法。在一个典型的 Spring Boot 应用程序中，我们会有一个服务类，其中包含服务提供的功能。 然而，由于我们只是做一些一次性的操作，让我们保持简单，使用一个 Bean 来调用我们的 <code>insertFourEmployees</code> 方法。 然后，让我们调用 <code>repository.findAll()</code> 来检索已插入的实体。下面是代码示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">CommandLineRunner</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EmployeeRepository</span> repository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">insertFourEmployees</span><span class="token punctuation">(</span>repository<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们运行我们的应用程序并看到它的运行情况。我们将按 <strong>⌃R</strong> (macOS) / <strong>Shift+F10</strong> (Windows/Linux)。</p><p>最终结果，一旦我们的应用程序启动，我们可以看到控制台日志显示我们的 Spring Boot 应用程序正在启动。 然后，我们可以看到 <code>findAll</code> 调用的结果，打印出数据库中所有的员工。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032212130.png" alt="Application Run Successfully" tabindex="0" loading="lazy"><figcaption>Application Run Successfully</figcaption></figure><h2 id="创建数据源" tabindex="-1"><a class="header-anchor" href="#创建数据源"><span>创建数据源</span></a></h2>`,63),b={href:"https://www.h2database.com/html/main.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.jetbrains.com/help/java/connecting-to-a-database.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.jetbrains.com/idea/features/editions_comparison_matrix.html",target:"_blank",rel:"noopener noreferrer"},S=e(`<p>要创建我们的H2数据源，我们将打开数据库工具窗口（<strong>View | Tool Windows | Database</strong>），然后点击<code>+</code>按钮。 有多种方式可以创建我们的连接。我们将使用<strong>Data source from URL</strong>选项。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032330533.png" alt="New Database" tabindex="0" loading="lazy"><figcaption>New Database</figcaption></figure><p>我们将输入我们的数据库URL：<mark>jdbc:h2:file:./data/myDB</mark>，然后点击确定。</p><p>接下来，我们将完成数据库的配置。对于我们的用户和密码字段， 我们将输入在我们的<code>application.properties</code>文件中设置的用户和密码（<mark>sa</mark>，<mark>password</mark>）。 如果你收到有关缺少H2驱动程序的警告，请点击下载缺失的驱动程序文件。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032332971.png" alt="Data Source myDB Config" tabindex="0" loading="lazy"><figcaption>Data Source myDB Config</figcaption></figure><p><strong>可选步骤</strong>：在选项选项卡下，启用“设置后自动断开连接”，并将其设置为在3秒后断开连接。 此设置将断开IntelliJ IDEA中的数据库并释放所有锁定，使我们应用程序的进程可以持续连接并写入数据库。 这将防止来自你的应用程序的<code>database may already be in use</code>的错误。 如果执行了此步骤，则可能需要在数据库工具窗口中点击“刷新”按钮以更新数据源。</p><p>然后，我们将点击“<strong>Test Connection</strong>”以确保我们的配置是有效的。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032331974.png" alt="Data Source Config Options" tabindex="0" loading="lazy"><figcaption>Data Source Config Options</figcaption></figure><p>一旦我们点击&quot;<strong>OK</strong>&quot;，我们就会看到一个新的数据源，用于我们的H2数据库。</p><p>最终结果 ，在数据库视图中，我们现在可以导航到我们的Employee表，并通过双击表格查看所有员工数据。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032331767.png" alt="Database View" tabindex="0" loading="lazy"><figcaption>Database View</figcaption></figure><h2 id="调用自定义查询" tabindex="-1"><a class="header-anchor" href="#调用自定义查询"><span>调用自定义查询</span></a></h2><p>假设我们想要查询数据库中所有姓氏中包含空格的员工。</p><p><strong>练习</strong>：花几分钟时间编写代码，查找并打印姓氏中带有空格的所有员工。</p><p>完成了吗？以下是实现代码的样子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">CommandLineRunner</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EmployeeRepository</span> repository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>repository<span class="token punctuation">.</span><span class="token function">findEmployeesByLastNameContaining</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终结果， 如果你插入了教程中提到的相同数据，你应该在控制台输出中看到&quot;<code>Dalia</code>&quot;员工。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202403032250455.png" alt="Application Run Successfully" tabindex="0" loading="lazy"><figcaption>Application Run Successfully</figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>在这个教程中，我们创建了一个简单的Spring Boot应用程序，它使用Spring Data JPA来存储和检索数据库中的数据。</p><p>一些在教程中提到的有用的快捷方式包括：</p><table><thead><tr><th>Name</th><th>Windows Shortcut</th><th>macOS Shortcut</th></tr></thead><tbody><tr><td>创建类并生成构造函数/方法</td><td>Alt+Insert</td><td>⌘N</td></tr><tr><td>上下文感知代码完成</td><td>Ctrl+Space</td><td>⌃Space</td></tr><tr><td>到处搜索</td><td>Shift+Shift</td><td>Shift+Shift</td></tr><tr><td>运行你的应用程序</td><td>Shift+F10</td><td>⌃R</td></tr></tbody></table>`,22),D={href:"https://github.com/daliasheasha/SpringDataJPA",target:"_blank",rel:"noopener noreferrer"},j=n("p",null,[n("strong",null,"帮助链接")],-1),E={href:"https://spring.io/projects/spring-data-jpa",target:"_blank",rel:"noopener noreferrer"},A={href:"https://spring.io/guides/gs/accessing-data-jpa/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://youtu.be/QJddHc41xrM",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.jetbrains.com/help/idea/spring-support.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.jetbrains.com/help/idea/spring-support-tutorial.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://www.jetbrains.com/help/idea/connecting-to-a-database.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.youtube.com/watch?v=wuX2ESOy-Ts",target:"_blank",rel:"noopener noreferrer"};function N(L,P){const s=o("ExternalLinkIcon");return i(),c("div",null,[l,u,d,n("ul",null,[n("li",null,[n("a",g,[a("Spring Data JPA 官方文档"),t(s)])]),n("li",null,[n("a",k,[a("Jetbrains 官方文档"),t(s)])])]),m,n("p",null,[n("a",v,[a("Spring Data JPA"),t(s)]),a("是一个功能强大的框架，允许用户轻松地与数据库交互，同时最大限度地减少样板代码。 在本教程中，我们将研究如何使用Spring Data JPA插入数据库并从数据库查询数据。 我们将使用"),n("a",h,[a("IntelliJ IDEA Ultimate"),t(s)]),a("创建一个简单的Spring靴子应用程序，以利用其Spring特性支持。")]),y,n("p",null,[a("在你的项目中使用数据库时，在IntelliJ IDEA中创建一个数据源连接非常有用。 它允许你在IDE中轻松地与数据库进行交互。让我们为我们的"),n("a",b,[a("H2"),t(s)]),a("数据库创建一个数据源连接。 如果你正在使用其他数据库，你可以使用类似的步骤，或者你可以按照 IntelliJ IDEA"),n("a",f,[a("数据库连接帮助页面"),t(s)]),a("中概述的说明进行操作。 请注意，此功能仅适用于"),n("a",w,[a("IntelliJ IDEA Ultimate"),t(s)]),a("版。")]),S,n("p",null,[a("你可以在这个"),n("a",D,[a("GitHub仓库"),t(s)]),a("中找到通过这个教程创建的最终项目。")]),j,n("ul",null,[n("li",null,[n("a",E,[a("Spring.io: Spring Data JPA"),t(s)])]),n("li",null,[n("a",A,[a("Spring Guide: Accessing Data with JPA"),t(s)])]),n("li",null,[n("a",_,[a("Working with Hibernate/JPA in IntelliJ IDEA (2021) (video)"),t(s)])]),n("li",null,[n("a",x,[a("(documentation) Spring Support in IntelliJ IDEA"),t(s)])]),n("li",null,[n("a",I,[a("(documentation) Explore Spring support features"),t(s)])]),n("li",null,[n("a",J,[a("(documentation) Database Connection in IntelliJ IDEA"),t(s)])]),n("li",null,[n("a",q,[a("(video) Getting started with Spring Data JPA"),t(s)])])])])}const O=p(r,[["render",N],["__file","getting-started.html.vue"]]),B=JSON.parse('{"path":"/md/spring-data-jpa/jetbrains/getting-started.html","title":"Spring Data JPA 快速入门","lang":"zh-CN","frontmatter":{"title":"Spring Data JPA 快速入门","shortTitle":null,"description":"Spring Data JPA 快速入门 目标： 了解如何使用Spring Data JPA从数据库中存储和检索数据。 参考： Spring Data JPA 官方文档 Jetbrains 官方文档 介绍 Spring Data JPA是一个功能强大的框架，允许用户轻松地与数据库交互，同时最大限度地减少样板代码。 在本教程中，我们将研究如何使用Spri...","icon":null,"cover":null,"author":"流浪码客","isOriginal":true,"sticky":false,"star":false,"date":"2024-04-04T00:00:00.000Z","category":"Spring Data","tag":["spring data jpa"],"order":1,"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/spring-data-jpa/jetbrains/getting-started.html"}],["meta",{"property":"og:title","content":"Spring Data JPA 快速入门"}],["meta",{"property":"og:description","content":"Spring Data JPA 快速入门 目标： 了解如何使用Spring Data JPA从数据库中存储和检索数据。 参考： Spring Data JPA 官方文档 Jetbrains 官方文档 介绍 Spring Data JPA是一个功能强大的框架，允许用户轻松地与数据库交互，同时最大限度地减少样板代码。 在本教程中，我们将研究如何使用Spri..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.geekyspace.cn/pictures/2024/202403032048778.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-15T17:07:35.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"spring data jpa"}],["meta",{"property":"article:published_time","content":"2024-04-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-15T17:07:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Data JPA 快速入门\\",\\"image\\":[\\"https://img.geekyspace.cn/pictures/2024/202403032048778.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032053947.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032108680.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032111916.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032114060.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032144256.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032145040.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032330980.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032332643.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032156491.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032158424.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032212130.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032330533.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032332971.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032331974.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032331767.png\\",\\"https://img.geekyspace.cn/pictures/2024/202403032250455.png\\"],\\"datePublished\\":\\"2024-04-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-15T17:07:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"创建一个新的Spring Boot项目","slug":"创建一个新的spring-boot项目","link":"#创建一个新的spring-boot项目","children":[]},{"level":2,"title":"创建员工实体","slug":"创建员工实体","link":"#创建员工实体","children":[]},{"level":2,"title":"创建 Repository 接口","slug":"创建-repository-接口","link":"#创建-repository-接口","children":[]},{"level":2,"title":"配置数据库","slug":"配置数据库","link":"#配置数据库","children":[]},{"level":2,"title":"从应用程序写入数据库","slug":"从应用程序写入数据库","link":"#从应用程序写入数据库","children":[]},{"level":2,"title":"创建数据源","slug":"创建数据源","link":"#创建数据源","children":[]},{"level":2,"title":"调用自定义查询","slug":"调用自定义查询","link":"#调用自定义查询","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1719508475000,"updatedTime":1742058455000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":2},{"name":"kai","email":"kkdlut@hotmail.com","commits":1}]},"readingTime":{"minutes":13.03,"words":3909},"filePathRelative":"md/spring-data-jpa/jetbrains/getting-started.md","localizedDate":"2024年4月4日","excerpt":"\\n<blockquote>\\n<p>目标： 了解如何使用Spring Data JPA从数据库中存储和检索数据。</p>\\n</blockquote>\\n<p>参考：</p>\\n<ul>\\n<li><a href=\\"https://docs.spring.io/spring-data/jpa/reference/jpa/getting-started.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Spring Data JPA 官方文档</a></li>\\n<li><a href=\\"https://www.jetbrains.com/guide/java/tutorials/getting-started-spring-data-jpa/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Jetbrains 官方文档</a></li>\\n</ul>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{O as comp,B as data};
