import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as l,c as n,e as a}from"./app-CARt6Xo2.js";const o={},i=a('<h1 id="java核心思想-面向对象编程-oop" tabindex="-1"><a class="header-anchor" href="#java核心思想-面向对象编程-oop"><span>Java核心思想-面向对象编程（OOP）</span></a></h1><h2 id="什么是面向对象编程" tabindex="-1"><a class="header-anchor" href="#什么是面向对象编程"><span>什么是面向对象编程？</span></a></h2><h3 id="发展历史简述" tabindex="-1"><a class="header-anchor" href="#发展历史简述"><span>发展历史简述</span></a></h3><ul><li><strong>1960 年</strong>：类（Class）和对象（Object）的概念首次出现在 <strong>Simula</strong> 语言中。</li><li><strong>1970 年代</strong>：<strong>Smalltalk</strong> 引入了“面向对象编程（OOP）”的概念，被认为是第一个真正意义上的 OOP 语言。</li><li><strong>1980 年左右</strong>：<strong>C++</strong> 出现，推动了 OOP 的广泛流行。</li><li><strong>今天</strong>：大多数主流语言都支持 OOP（Java、C++、Python、C#、Ruby、JavaScript、Go、Scala、PHP 等）。</li></ul><h3 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象"><span>类和对象</span></a></h3><p>面向对象编程中有两个非常重要、非常基础的概念，那就是<strong>类（Cass）</strong> 和<strong>对象（Object）</strong>。</p><ul><li><strong>类（Class）</strong> 是指对某一类事物的抽象描述，包含属性和方法。</li><li><strong>对象（Object）</strong> 是类的实例，是在程序中具体存在的实体。</li></ul><h3 id="核心定义" tabindex="-1"><a class="header-anchor" href="#核心定义"><span>核心定义</span></a></h3><ul><li><strong>面向对象编程（OOP, Object-Oriented Programming）</strong> 是一种编程范式或编程风格。它以<strong>类</strong>或<strong>对象</strong>作为组织代码的基本单元，并将<strong>封装</strong>、<strong>抽象</strong>、<strong>继承</strong>、<strong>多态</strong>四个特性，作为代码设计和实现的基石 。</li><li><strong>面向对象编程语言（OOPL, Object-Oriented Programming Language）</strong> 是支持类或对象的语法机制，并有现成的语法机制，能方便地实现面向对象编程四大特性（封装、抽象、继承、多态）的编程语言。</li></ul><h2 id="四大特性" tabindex="-1"><a class="header-anchor" href="#四大特性"><span>四大特性</span></a></h2><h3 id="封装-encapsulation" tabindex="-1"><a class="header-anchor" href="#封装-encapsulation"><span>封装（Encapsulation）</span></a></h3><ul><li>核心思想：<mark><u>隐藏实现、保护数据、对外提供接口</u></mark>。</li><li><strong>实现方式：</strong> 通过 <code>private</code>、<code>protected</code>、<code>public</code> 等权限控制，把属性隐藏起来，通过方法来操作。</li><li><strong>意义：</strong><ul><li>防止数据被随意修改，提高代码的<strong>安全性和可维护性</strong>。</li><li>对外只暴露必要的接口，提高类的<strong>易用性</strong>。</li><li>👉 通俗理解：<strong>“把属性藏起来，通过方法管起来”</strong>。</li></ul></li></ul><h3 id="抽象-abstraction" tabindex="-1"><a class="header-anchor" href="#抽象-abstraction"><span>抽象（Abstraction）</span></a></h3><ul><li>核心思想：<mark><u>提取共性，屏蔽细节</u></mark>。</li><li><strong>实现方式：</strong> 接口、抽象类，或者只提供方法定义而隐藏实现。</li><li><strong>意义：</strong><ul><li>使用者只需关心<strong>做什么</strong>，不必关心<strong>怎么做</strong>。</li><li>提高代码的<strong>扩展性和维护性</strong>，修改实现不影响对外接口。</li><li>👉 通俗理解：<strong>“只告诉你功能，不告诉你原理”</strong>。</li></ul></li></ul><p>⚠️ 有的教程会把<strong>抽象</strong> 视为 <strong>封装的一部分</strong>（抽象 ≈ “隐藏细节、暴露共性”）</p><h3 id="继承-inheritance" tabindex="-1"><a class="header-anchor" href="#继承-inheritance"><span>继承（Inheritance）</span></a></h3><ul><li>核心思想：<mark><u>子类复用父类的属性和方法</u></mark>，体现 <code>is-a</code> 关系。</li><li><strong>模式：</strong><ul><li>单继承：一个子类只能继承一个父类（Java）。</li><li>多继承：一个子类可继承多个父类（C++ 支持，Java 通过接口间接实现）。</li></ul></li><li><strong>意义：</strong><ul><li>解决<strong>代码复用</strong>问题。</li><li>为多态打下基础。</li><li>👉 通俗理解：<strong>“子承父业”</strong>。</li></ul></li></ul><h3 id="多态-polymorphism" tabindex="-1"><a class="header-anchor" href="#多态-polymorphism"><span>多态（Polymorphism）</span></a></h3><ul><li>核心思想：<mark><u>同一接口，不同实现，表现出不同行为</u></mark>。</li><li><strong>定义：</strong> 多态是指子类可以替换父类，在实际的代码运行过程中，调用子类的方法实现。</li><li><strong>实现方式：</strong> 继承 + 方法重写、接口实现、duck typing（动态语言）。</li><li><strong>多态的三种类型：</strong><ol><li><strong>编译时多态（静态多态）</strong><ul><li>通过**方法重载（Overload）**实现。</li><li>编译阶段决定调用哪个方法。</li><li>示例：<code>print(int a)</code> 和 <code>print(String s)</code>。</li></ul></li><li><strong>运行时多态（动态多态）</strong><ul><li>通过<strong>方法重写（Override）<strong>和</strong>向上转型</strong>实现。</li><li>运行时根据实际对象类型决定调用哪个方法。</li><li>示例：父类 <code>Animal</code> 的 <code>speak()</code> 被子类 <code>Dog</code>、<code>Cat</code> 重写。</li></ul></li><li><strong>参数化多态（泛型多态）</strong><ul><li>通过<strong>泛型（Generics）</strong> 实现。</li><li>方法或类可以操作不同类型，而无需写多份代码。</li><li>示例：<code>List&lt;String&gt;</code>、<code>List&lt;Integer&gt;</code> 都能用同一个 <code>List&lt;T&gt;</code> 实现。</li></ul></li></ol></li><li><strong>意义：</strong><ul><li>提高代码的<strong>扩展性</strong>（新增子类无需修改原有逻辑）。</li><li>提升代码的<strong>复用性</strong>（相同代码可适配多种对象）。</li><li>是<strong>设计模式与面向对象编程技巧</strong>的核心基础。</li><li>👉 通俗理解：<strong>“一个接口，多种形态”</strong>。</li></ul></li></ul>',19),r=[i];function e(s,c){return l(),n("div",null,r)}const h=t(o,[["render",e],["__file","java-basic-oop.html.vue"]]),p=JSON.parse('{"path":"/md/java/basic/java-basic-oop.html","title":"Java核心思想 - 面向对象编程（OOP）","lang":"zh-CN","frontmatter":{"title":"Java核心思想 - 面向对象编程（OOP）","shortTitle":null,"description":"Java核心思想-面向对象编程（OOP） 什么是面向对象编程？ 发展历史简述 1960 年：类（Class）和对象（Object）的概念首次出现在 Simula 语言中。 1970 年代：Smalltalk 引入了“面向对象编程（OOP）”的概念，被认为是第一个真正意义上的 OOP 语言。 1980 年左右：C++ 出现，推动了 OOP 的广泛流行。 ...","icon":null,"cover":null,"author":"流浪码客","isOriginal":true,"sticky":false,"star":false,"date":"2025-09-13T00:00:00.000Z","category":"Java","tags":["JavaBasic","OOP"],"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/java/basic/java-basic-oop.html"}],["meta",{"property":"og:title","content":"Java核心思想 - 面向对象编程（OOP）"}],["meta",{"property":"og:description","content":"Java核心思想-面向对象编程（OOP） 什么是面向对象编程？ 发展历史简述 1960 年：类（Class）和对象（Object）的概念首次出现在 Simula 语言中。 1970 年代：Smalltalk 引入了“面向对象编程（OOP）”的概念，被认为是第一个真正意义上的 OOP 语言。 1980 年左右：C++ 出现，推动了 OOP 的广泛流行。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-21T18:06:57.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"JavaBasic"}],["meta",{"property":"article:tag","content":"OOP"}],["meta",{"property":"article:published_time","content":"2025-09-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-21T18:06:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java核心思想 - 面向对象编程（OOP）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-21T18:06:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"什么是面向对象编程？","slug":"什么是面向对象编程","link":"#什么是面向对象编程","children":[{"level":3,"title":"发展历史简述","slug":"发展历史简述","link":"#发展历史简述","children":[]},{"level":3,"title":"类和对象","slug":"类和对象","link":"#类和对象","children":[]},{"level":3,"title":"核心定义","slug":"核心定义","link":"#核心定义","children":[]}]},{"level":2,"title":"四大特性","slug":"四大特性","link":"#四大特性","children":[{"level":3,"title":"封装（Encapsulation）","slug":"封装-encapsulation","link":"#封装-encapsulation","children":[]},{"level":3,"title":"抽象（Abstraction）","slug":"抽象-abstraction","link":"#抽象-abstraction","children":[]},{"level":3,"title":"继承（Inheritance）","slug":"继承-inheritance","link":"#继承-inheritance","children":[]},{"level":3,"title":"多态（Polymorphism）","slug":"多态-polymorphism","link":"#多态-polymorphism","children":[]}]}],"git":{"createdTime":1757746390000,"updatedTime":1758478017000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":3}]},"readingTime":{"minutes":3.35,"words":1004},"filePathRelative":"md/java/basic/java-basic-oop.md","localizedDate":"2025年9月13日","excerpt":"\\n<h2>什么是面向对象编程？</h2>\\n<h3>发展历史简述</h3>\\n<ul>\\n<li><strong>1960 年</strong>：类（Class）和对象（Object）的概念首次出现在 <strong>Simula</strong> 语言中。</li>\\n<li><strong>1970 年代</strong>：<strong>Smalltalk</strong> 引入了“面向对象编程（OOP）”的概念，被认为是第一个真正意义上的 OOP 语言。</li>\\n<li><strong>1980 年左右</strong>：<strong>C++</strong> 出现，推动了 OOP 的广泛流行。</li>\\n<li><strong>今天</strong>：大多数主流语言都支持 OOP（Java、C++、Python、C#、Ruby、JavaScript、Go、Scala、PHP 等）。</li>\\n</ul>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{h as comp,p as data};
