import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-CARt6Xo2.js";const t={},c=e(`<h1 id="java-21-新特性-有序集合-sequenced-collections" tabindex="-1"><a class="header-anchor" href="#java-21-新特性-有序集合-sequenced-collections"><span>Java 21 新特性：有序集合（Sequenced Collections）</span></a></h1><p>在JDK 21中，<strong>有序集合</strong>（Sequenced Collections）引入了新的接口和方法来简化集合处理。</p><blockquote><p>此增强功能旨在解决访问Java中各种集合类型的第一个和最后一个元素需要非统一且麻烦处理场景</p></blockquote><p><code>Sequenced Collections</code> 引入如下 3 个新接口，用于处理顺序<code>List</code>、<code>Set</code>和<code>Map</code>， 并将它们整合到现有的集合类型中。这些新接口中的方法都具有默认实现。</p><ol><li>SequencedCollection</li><li>SequencedSet</li><li>SequencedMap</li></ol><h2 id="sequencedcollection" tabindex="-1"><a class="header-anchor" href="#sequencedcollection"><span>SequencedCollection</span></a></h2><p>提供了在集合两端添加、检索和移除元素的方法，沿着<code>reversed()</code>方法提供了该集合的逆序视图。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">SequencedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 新方法：返回反转后的序列化集合</span>
    <span class="token class-name">SequencedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 以下方法是从Deque提升的,支持在两端添加、获取和删除元素</span>
    <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">E</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">E</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">E</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>新的<code>reversed()</code>方法提供了原始集合的反向视图，对原始集合的任何修改都可以在视图中看到</li><li>如果允许，对视图的修改将写入原始集合</li><li>逆序视图使得不同的序列类型可以在两个方向上处理元素 <ul><li>如：增强for循环、显式iterator()循环、forEach()、stream()、parallelStream() 和 toArray()</li></ul></li></ul><p>例如，从<code>LinkedHashSet</code>获得逆序流以前很难，现在很简单</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>linkedHashSet<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 获取逆序流非常困难</span>
linkedHashSet<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 现在：直接使用 reversed() 方法获取逆序流</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>reversed()</code> 方法本质上是 <code>NavigableSet::descendingSet</code>的重命名，并升级为 SequencedCollection</p></blockquote><h2 id="sequencedset" tabindex="-1"><a class="header-anchor" href="#sequencedset"><span>SequencedSet</span></a></h2><p>sequenced set 是一个不包含重复元素的 SequencedCollection，区别是<code>SequencedSet.reversed()</code>的返回类型是SequencedSet。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">SequencedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">SequencedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 重写父接口的 reversed() 方法</span>
    <span class="token class-name">SequencedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>SortedSet</strong></p><ul><li>Java集合框架中<code>SortedSet</code>接口，表示一个有序集合</li><li>不能支持显式定位操作，因为是基于元素之间的相对比较来确定它们位置的，而不是基于顺序插入</li><li>如果尝试使用<code>addFirst(E)</code>或<code>addLast(E)</code>方法，会抛出<code>UnsupportedOperationException</code>异常</li></ul><p><strong>SequencedSet</strong></p><ul><li><code>SequencedSet</code>接口扩展了<code>SortedSet</code></li><li>其中<code>addFirst(E)</code>和<code>addLast(E)</code> 方法对于集合（如<code>LinkedHashSet</code>）具有特殊情况语义： <ul><li>如果元素已经存在于集合中，则将其移动到适当的位置</li><li>这弥补了LinkedHashSet中的一个长期缺陷，即无法重新定位元素</li></ul></li></ul><h2 id="sequencedmap" tabindex="-1"><a class="header-anchor" href="#sequencedmap"><span>SequencedMap</span></a></h2><p>sequenced map 是一个映射，其键具有已定义的顺序， 它不实现SequencedCollection，而是提供了自己的方法，这些方法将访问顺序应用于映射条目，而不是单个元素。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">SequencedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 新方法</span>
    <span class="token class-name">SequencedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 返回一个反转的映射</span>
    <span class="token class-name">SequencedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token function">sequencedKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 返回键的序列化集合</span>
    <span class="token class-name">SequencedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">sequencedValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回值的序列化集合</span>
    <span class="token class-name">SequencedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">sequencedEntrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回条目的序列化集合</span>
    <span class="token class-name">V</span> <span class="token function">putFirst</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// 将键值对放在映射的第一个位置</span>
    <span class="token class-name">V</span> <span class="token function">putLast</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 将键值对放在映射的最后一个位置</span>
    <span class="token comment">// 从 NavigableMap 提升的方法，支持在映射的两端获取和移除条目</span>
    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">firstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 返回映射的第一个条目</span>
    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">lastEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// 返回映射的最后一个条目</span>
    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">pollFirstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 移除并返回映射的第一个条目</span>
    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">pollLastEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 移除并返回映射的最后一个条目</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新的<code>put*(K, V)</code>方法具有特殊的含义，类似于 SequencedSet 中对应的<code>add*(E)</code>方法：</p><ul><li>对于 LinkedHashMap 映射，如果已存在相同键的条目，该方法将重新定位该条目</li><li>对于 SortedMap 映射，这些方法会抛出 <code>UnsupportedOperationException</code> 异常</li></ul><h2 id="改造" tabindex="-1"><a class="header-anchor" href="#改造"><span>改造</span></a></h2><p>上述定义的三个新接口完美地适应了现有的集合类型层次结构（点击放大）：</p><figure><img src="http://img.geekyspace.cn/pictures/2024/SequencedCollectionDiagram20220216.png" alt="Sequenced-Collections" tabindex="0" loading="lazy"><figcaption>Sequenced-Collections</figcaption></figure><p>具体而言，我们对现有的类和接口进行以下调整：</p><ul><li>List 现在将 SequencedCollection 定义为其直接超级接口</li><li>Deque 现在将 SequencedCollection 定义为其直接超级接口</li><li>LinkedHashSet 另外实现了 SequencedSet</li><li>SortedSet 现在将 SequencedSet 定义为其直接超级接口</li><li>LinkedHashMap 另外实现了 SequencedMap</li><li>SortedMap 现在将 SequencedMap 定义为其直接超级接口</li></ul><p>我们在适当的位置为<code>reversed()</code>方法定义协变覆盖。 例如: <code>List::reversed</code> 被覆盖为返回 List 类型的值，而不是 <code>SequencedCollection</code> 类型的值。</p><p>我们还向 Collections 实用类添加了新方法，用于创建三种新类型的不可修改包装：</p><ul><li>Collections.unmodifiableSequencedCollection(sequencedCollection)</li><li>Collections.unmodifiableSequencedSet(sequencedSet)</li><li>Collections.unmodifiableSequencedMap(sequencedMap)</li></ul><h2 id="第一个和最后一个元素的访问" tabindex="-1"><a class="header-anchor" href="#第一个和最后一个元素的访问"><span>第一个和最后一个元素的访问</span></a></h2><p>引入顺序接口的动机是对获取集合的第一个和最后一个元素的简单方法的长期未决需求。</p><p>目前，在Java 21之前，JDK API调用访问第一个和最后一个元素的一些示例：</p><table><thead><tr><th>访问位置</th><th>List</th><th>Deque</th><th>SortedSet</th></tr></thead><tbody><tr><td>第一个元素</td><td>list.get(0)</td><td>deque.getFirst()</td><td>set.first()</td></tr><tr><td>最后一个元素</td><td>list.get(list.size()-1)</td><td>deque.getLast()</td><td>set.last()</td></tr></tbody></table><p>可以看到，一个简单的操作，在不同的集合中需要不同的编写方式，非常麻烦！ 但在JDK 21之后，访问第一个和最后一个元素就方法多了：</p><p>对于<code>List</code>, <code>Deque</code>, <code>Set</code>这些有序的集合，访问方法变得统一起来：</p><ul><li>第一个元素：<code>collection.getFirst()</code></li><li>最后一个元素：<code>collection.getLast()</code></li></ul>`,39),p=[c];function o(l,i){return s(),a("div",null,p)}const r=n(t,[["render",o],["__file","jep431-sequenced-collections.html.vue"]]),k=JSON.parse('{"path":"/md/java/features/Java21/jep431-sequenced-collections.html","title":"Java 21 新特性：有序集合","lang":"zh-CN","frontmatter":{"title":"Java 21 新特性：有序集合","shortTitle":null,"description":"Java 21 新特性：有序集合（Sequenced Collections） 在JDK 21中，有序集合（Sequenced Collections）引入了新的接口和方法来简化集合处理。 此增强功能旨在解决访问Java中各种集合类型的第一个和最后一个元素需要非统一且麻烦处理场景 Sequenced Collections 引入如下 3 个新接口，用于...","icon":null,"cover":null,"author":"流浪码客","isOriginal":true,"sticky":false,"star":false,"date":"2024-01-07T00:00:00.000Z","category":"Java Features","tag":["java"],"order":431,"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/java/features/Java21/jep431-sequenced-collections.html"}],["meta",{"property":"og:title","content":"Java 21 新特性：有序集合"}],["meta",{"property":"og:description","content":"Java 21 新特性：有序集合（Sequenced Collections） 在JDK 21中，有序集合（Sequenced Collections）引入了新的接口和方法来简化集合处理。 此增强功能旨在解决访问Java中各种集合类型的第一个和最后一个元素需要非统一且麻烦处理场景 Sequenced Collections 引入如下 3 个新接口，用于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://img.geekyspace.cn/pictures/2024/SequencedCollectionDiagram20220216.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-16T11:19:57.000Z"}],["meta",{"property":"article:author","content":"流浪码客"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-01-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-16T11:19:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 21 新特性：有序集合\\",\\"image\\":[\\"http://img.geekyspace.cn/pictures/2024/SequencedCollectionDiagram20220216.png\\"],\\"datePublished\\":\\"2024-01-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-16T11:19:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"流浪码客\\"}]}"]]},"headers":[{"level":2,"title":"SequencedCollection","slug":"sequencedcollection","link":"#sequencedcollection","children":[]},{"level":2,"title":"SequencedSet","slug":"sequencedset","link":"#sequencedset","children":[]},{"level":2,"title":"SequencedMap","slug":"sequencedmap","link":"#sequencedmap","children":[]},{"level":2,"title":"改造","slug":"改造","link":"#改造","children":[]},{"level":2,"title":"第一个和最后一个元素的访问","slug":"第一个和最后一个元素的访问","link":"#第一个和最后一个元素的访问","children":[]}],"git":{"createdTime":1758021597000,"updatedTime":1758021597000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":1}]},"readingTime":{"minutes":4.56,"words":1368},"filePathRelative":"md/java/features/Java21/jep431-sequenced-collections.md","localizedDate":"2024年1月7日","excerpt":"\\n<p>在JDK 21中，<strong>有序集合</strong>（Sequenced Collections）引入了新的接口和方法来简化集合处理。</p>\\n<blockquote>\\n<p>此增强功能旨在解决访问Java中各种集合类型的第一个和最后一个元素需要非统一且麻烦处理场景</p>\\n</blockquote>\\n<p><code>Sequenced Collections</code> 引入如下 3 个新接口，用于处理顺序<code>List</code>、<code>Set</code>和<code>Map</code>，\\n并将它们整合到现有的集合类型中。这些新接口中的方法都具有默认实现。</p>","copyright":{"author":"流浪码客"},"autoDesc":true}');export{r as comp,k as data};
